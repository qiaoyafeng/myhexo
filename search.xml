<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/myhexo/2021/07/30/xue-xi/algorithm/shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/myhexo/2021/07/30/xue-xi/algorithm/shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><blockquote><p>数据结构就是研究数据的<strong>逻辑结构</strong>和<strong>物理结构</strong>以及它们之间<strong>相互关系</strong>，并对这种结构定义相应的运算，而且确保经过这些运算后所得到的新结构仍然是原来的结构类型。</p></blockquote><ol><li><p>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合。是计算机操作的对象的总称。</p></li><li><p>数据元素：数据（集合）中的一个“个体”，数据及结构中讨论的<strong>基本</strong>单位</p></li><li><p>数据项：数据的不可分割的最小单位。一个数据元素可由若干个数据项组成。</p></li><li><p>数据类型：在一种程序设计语言中，变量所具有的数据种类。整型、浮点型、字符型等等</p></li><li><p>逻辑结构：数据之间的相互关系。</p><ul><li>集合 结构中的数据元素除了同属于一种类型外，别无其它关系。</li><li>线性结构 数据元素之间一对一的关系</li><li>树形结构 数据元素之间一对多的关系</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</li></ul></li><li><p>物理结构/存储结构：数据在计算机中的表示。物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等</p></li><li><p>在数据结构中,从逻辑上可以将其分为线性结构和非线性结构</p></li><li><p>数据结构的基本操作的设置的最重要的准则是,<strong>实现应用程序与存储结构的独立</strong>。实现应用程序是“逻辑结构”，存储的是“物理结构”。逻辑结构主要是对该结构操作的设定，物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、希哈结构）等。</p></li><li><p>顺序存储结构中，线性表的逻辑顺序和物理顺序总是一致的。但在链式存储结构中，线性表的逻辑顺序和物理顺序一般是不同的。</p></li><li><p>算法五个特性： 有穷性、确定性、可行性、输入、输出</p></li><li><p>算法设计要求：正确性、可读性、健壮性、高效率与低存储量需求。(好的算法)</p></li><li><p>算法的描述有伪程序、流程图、N-S结构图等。E-R图是实体联系模型，不是程序的描述方式。</p></li><li><p>设计算法在执行时间时需要考虑：算法选用的规模、问题的规模</p></li><li><p>时间复杂度：算法的执行时间与原操作<strong>执行次数</strong>之和成正比。时间复杂度有小到大：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup>)、O(n<sup>3</sup>)。幂次时间复杂度有小到大O(2<sup>n</sup>)、O(n!)、O(n<sup>n</sup>)</p></li><li><p>空间复杂度：若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析<strong>除输入和程序之外的辅助变量所占额外空间</strong>。</p></li></ol><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是一种典型的线性结构。头结点无前驱有一个后继，尾节点无后继有一个前驱。链表只能顺序查找，定位一个元素的时间为O(N)，删除一个元素的时间为O(1)</p><ol><li>线性表的顺序存储结构：把线性表的结点按逻辑顺序依次存放在一组地址连续的存储单元里。用这种方法存储的线性表简称顺序表。是一种随机存取的存储结构。顺序存储指内存地址是一块的，随机存取指访问时可以按下标随机访问，存储和存取是不一样的。如果是存储，则是指按顺序的，如果是存取，则是可以随机的，可以利用元素下标进行。数组比线性表速度更快的是：原地逆序、返回中间节点、选择随机节点。<ul><li>便于线性表的构造和任意元素的访问</li><li>插入：插入新结点，之后结点后移。平均时间复杂度:O(n)</li><li>删除：删除节点，之后结点前移。平均时间复杂度:O(n)</li></ul></li><li>线性链表：用一组任意的存储单元来依次存放线性表的结点，这组存储单元即可以是连续的，也可以是不连续的，甚至是零散分布在内存中的任意位置上的。因此，链表中结点的逻辑次序和物理次序不一定相同。为了能正确表示结点间的逻辑关系，在存储每个结点值的同时，还必须存储指示其后继结点的地址。data域是数据域，用来存放结点的值。next是指针域（亦称链域），用来存放结点的直接后继的地址（或位置）。不需要事先估计存储空间大小。<ul><li><strong>单链表</strong>中每个结点的存储地址是存放在其前趋结点next域中，而开始结点无前趋，故应设头指针head指向开始结点。同时，由于最后一个结点无后继，故结点的指针域为空，即NULL。头插法建表(逆序)、尾插法建表(顺序)。增加头结点的目的是算法实现上的方便，但增大了内存开销。<ul><li>查找：只能从链表的头指针出发，顺链域next逐个结点往下搜索，直到搜索到第i个结点为止。因此，<strong>链表不是随机存取结构</strong>。</li><li>插入：先找到表的第i-1的存储位置，然后插入。新结点先连后继，再连前驱。</li><li>删除：首先找到a<sub>i-1</sub>的存储位置p。然后令p–&gt;next指向a<sub>i</sub>的直接后继结点，即把a<sub>i</sub>从链上摘下。最后释放结点a<sub>i</sub>的空间.r=p-&gt;next;p-&gt;next=r-&gt;next;delete r。</li><li>判断一个单向链表中是否存在环的最佳方法是快慢指针。</li></ul></li><li>静态链表：用一维数组来实现线性链表，这种用一维数组表示的线性链表，称为静态链表。静态：体现在表的容量是一定的。（数组的大小）；链表：插入与删除同前面所述的动态链表方法相同。静态链表中指针表示的是下一元素在数组中的位置。</li><li>静态链表是用数组实现的，是顺序的存储结构，在物理地址上是连续的，而且需要预先分配大小。动态链表是用申请内存函数（C是malloc,C++是new）动态申请内存的，所以在链表的长度上没有限制。动态链表因为是动态申请内存的，所以每个节点的物理地址不连续，要通过指针来顺序访问。静态链表在插入、删除时也是通过修改指针域来实现的，与动态链表没有什么分别</li><li>循环链表：是一种头尾相接的链表。其特点是无须增加存储量，仅对表的链接方式稍作改变，即可使得表处理更加方便灵活。<ul><li>在单链表中，将终端结点的指针域NULL改为指向表头结点的或开始结点，就得到了单链形式的循环链表，并简单称为<strong>单循环链表</strong>。由于循环链表中没有NULL指针，故涉及遍历操作时，其终止条件就不再像非循环链表那样判断p或p—&gt;next是否为空，而是判断它们是否等于某一指定指针，如头指针或尾指针等。</li></ul></li><li>双向链表:在单链表的每个结点里再增加一个指向其直接前趋的指针域prior。这样就形成的链表中有两个方向不同的链。双链表一般由头指针唯一确定的，将头结点和尾结点链接起来构成循环链表，并称之为双向链表。设指针p指向某一结点，则双向链表结构的对称性可用下式描述：p—&gt;prior—&gt;next=p=p—&gt;next—&gt;prior。从两个方向搜索双链表，比从一个方向搜索双链表的方差要小。<ul><li>插入：先搞定插入节点的前驱和后继，再搞定后结点的前驱，最后搞定前结点的后继。</li><li>在有序双向链表中定位删除一个元素的平均时间复杂度为O(n)</li><li>可以直接删除当前指针所指向的节点。而不需要像单向链表中，删除一个元素必须找到其前驱。因此在插入数据时，单向链表和双向链表操作复杂度相同，而删除数据时，双向链表的性能优于单向链表</li></ul></li></ul></li></ol><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈(Stack)是限制在表的一端进行插入和删除运算的线性表，通常称插入、删除的这一端为栈顶(Top)，另一端为栈底(Bottom)。先进后出。top= -1时为空栈，top=0只能说明栈中只有一个元素，并且元素进栈时top应该自增</p><ol><li>顺序存储栈：顺序存储结构</li><li>链栈：链式存储结构。插入和删除操作仅限制在链头位置上进行。栈顶指针就是链表的头指针。通常不会出现栈满的情况。 不需要判断栈满但需要判断栈空。</li><li>两个栈共用静态存储空间,对头使用也存在空间溢出问题。栈1的底在v[1]，栈2的底在V[m]，则栈满的条件是top[1]+1=top[2]。</li><li>基本操作：删除栈顶元素、判断栈是否为空以及将栈置为空栈等</li><li>对于n各元素的入栈问题，可能的出栈顺序有C(2n,n)/(n+1)个。</li><li>堆栈溢出一般是循环的递归调用、大数据结构的局部变量导致的</li></ol><p>应用，<a href="https://github.com/Jack-Lee-Hiter/AlgorithmsByPython/blob/master/Stack.py">代码</a>：</p><ol><li>进制转换</li><li>括号匹配的检验</li><li>行编辑程序</li><li>迷宫求解：若当前位置“可通”，则纳入路径，继续前进;若当前位置“不可通”，则后退，换方向继续探索;若四周“均无通路”，则将当前位置从路径中删除出去。</li><li>表达式求解：前缀、中缀、后缀。<ul><li>操作数之间的相对次序不变;</li><li>运算符的相对次序不同;</li><li>中缀式丢失了括弧信息，致使运算的次序不确定</li><li>前缀式的运算规则为:连续出现的两个操作数和在它们之前且紧靠它们的运算符构成一个最小表达式</li><li>后缀式的运算规则为:运算符在式中出现的顺序恰为表达式的运算顺序;每个运算符和在它之前出现且紧靠它的两个操作数构成一个最小表达式。</li></ul></li><li>实现递归：多个函数嵌套调用的规则是：后调用先返回。</li><li>浏览器历史纪录，Android中的最近任务，Activity的启动模式，CPU中栈的实现，Word自动保存，解析计算式，解析xml/json。解析XML时，需要校验节点是否闭合，节点闭合的话，有头尾符号相对应，遇到头符号将其放入栈中，遇到尾符号时，弹出栈的内容，看是否有与之对应的头符号，栈的特性刚好符合符号匹配的就近原则。</li></ol><p>不是所有的递归程序都需要栈来保护现场，比方说求阶乘的，是单向递归，直接用循环去替代从1乘到n就是结果了，另外一些需要栈保存的也可以用队列等来替代。不是所有的递归转化为非递归都要用到栈。转化为非递归主要有两种方法：对于尾递归或单向递归，可以用循环结构算法代替</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(Queue)也是一种运算受限的线性表。它只允许在表的一端进行插入，而在另一端进行删除。允许删除的一端称为队头(front)，允许插入的一端称为队尾(rear)。先进先出。</p><ol><li><p>顺序队列：顺序存储结构。当头尾指针相等时队列为空。在非空队列里，头指针始终指向队头前一个位置，而尾指针始终指向队尾元素的实际位置</p></li><li><p>循环队列。在循环队列中进行出队、入队操作时，头尾指针仍要加1，朝前移动。只不过当头尾指针指向向量上界（MaxSize-1）时，其加1操作的结果是指向向量的下界0。除非向量空间真的被队列元素全部占用，否则不会上溢。因此，除一些简单的应用外，真正实用的顺序队列是循环队列。故队空和队满时头尾指针均相等。因此，我们无法通过front=rear来判断队列“空”还是“满”</p></li><li><p>链队列：链式存储结构。限制仅在表头删除和表尾插入的单链表。显然仅有单链表的头指针不便于在表尾做插入操作，为此再增加一个尾指针，指向链表的最后一个结点。</p></li><li><p>设尾指针的循环链表表示队列,则入队和出队算法的时间复杂度均为O(1)。用循环链表表示队列，必定有链表的头结点，入队操作在链表尾插入，直接插入在尾指针指向的节点后面，时间复杂度是常数级的；出队操作在链表表头进行，也就是删除表头指向的节点，时间复杂度也是常数级的。</p></li><li><p>队空条件：rear==front，但是一般需要引入新的标记来说明栈满还是栈空，比如每个位置布尔值</p></li><li><p>队满条件：(rear+1) % QueueSize==front，其中QueueSize为循环队列的最大长度</p></li><li><p>计算队列长度：（rear-front+QueueSize）% QueueSize</p></li><li><p>入队：（rear+1）% QueueSize</p></li><li><p>出队：（front+1）% QueueSize</p></li><li><p>假设以数组A[N]为容量存放循环队列的元素,其头指针是front,当前队列有X个元素,则队列的尾指针值为(front+X mod N)</p></li></ol><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>串(String)是零个或多个字符组成的有限序列。长度为零的串称为<strong>空串</strong>(Empty String)，它不包含任何字符。通常将仅由一个或多个空格组成的串称为<strong>空白串</strong>(Blank String) 注意：空串和空白串的不同，例如“  ”和“”分别表示长度为1的空白串和长度为0的空串。</p><p>串的表示和实现：</p><ol><li>定长顺序存储表示。静态存储分配的顺序表。</li><li>堆分配存储表示。存储空间是在程序执行过程中动态分配而得。所以也称为动态存储分配的顺序表</li><li>串的链式存储结构。</li></ol><p>串匹配：将主串称为目标串，子串称之为模式串。蛮力法匹配。<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">KMP算法</a>匹配。<a href="https://github.com/Jack-Lee-Hiter/Introduction-to-The-Design-and-Analysis-of-Algorithms/blob/master/Boyer-Moore/BM%20by%20swift">Boyer-Moore算法</a>匹配。</p><h2 id="数组和广义表"><a href="#数组和广义表" class="headerlink" title="数组和广义表"></a>数组和广义表</h2><p>数组和广义表可看成是一种特殊的线性表，其特殊在于: 表中的元素本身也是一种线性表。内存连续。根据下标在O(1)时间读/写任何元素。</p><p><strong>二维数组，多维数组，广义表、树、图都属于非线性结构</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的顺序存储：行优先顺序；列优先顺序。数组中的任一元素可以在相同的时间内存取，即顺序存储的数组是一个随机存取结构。</p><p>关联数组(Associative Array)，又称映射（Map）、字典（ Dictionary）是一个抽象的数据结构，它包含着类似于(键，值)的有序对。 不是线性表。</p><p>矩阵的压缩：</p><ol><li>对称矩阵、三角矩阵：直接存储矩阵的上三角或者下三角元素。<strong>注意区分i&gt;=j和i&lt;j的情况</strong></li><li>对角矩阵：除了主对角线和主对角线相邻两侧的若干条对角线上的元素之外，其余元素皆为零。</li><li>稀疏矩阵：非零元素个数远小于矩阵元素总数。三元组或十字链表，十字链表更适合矩阵的加法乘法等操作。<ul><li>三元组顺序表。三元组顺序表虽然节省了存储空间，但时间复杂度比一般矩阵转置的算法还要复杂，同时还有可能增加算法的难度。因此，此算法仅适用于t&lt;&lt;m*n的情况。</li><li>稀疏矩阵在采用压缩存储后将会失去随机存储的功能。因为在这种矩阵中，非零元素的分布是没有规律的，为了压缩存储，就将每一个非零元素的值和它所在的行、列号做为一个结点存放在一起，这样的结点组成的线性表中叫三元组表，它已不是简单的向量，所以无法用下标直接存取矩阵中的元素。</li><li>对于用三元组存储稀疏矩阵，每个元素要用行号,列号,元素值来表示,在用三元组表示稀疏矩阵,还要三个成员来记住矩阵的行数列数,总的元素数，即总共需要(非零元素个数)n+1个元素。</li><li>三元组转置（1）将数组的行列值相互交换（2）将每个三元组的i和j相互交换（3）重排三元组的之间的次序便可实现矩阵的转置</li></ul></li></ol><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>广义表（Lists，又称列表）是线性表的推广。广义表是n(n≥0)个元素a<sup>1</sup>,a<sup>2</sup>,a<sup>3</sup>,…,a<sup>n</sup>的有限序列，其中a<sub>i</sub>或者是原子项，或者是一个广义表。若广义表LS（n&gt;=1)非空，则a<sup>1</sup>是LS的表头，其余元素组成的表(a<sup>2</sup>,…a<sup>n</sup>)称为LS的表尾。广义表的元素可以是广义表，也可以是原子，广义表的元素也可以为空。表尾是指除去表头后剩下的元素组成的表，表头可以为表或单元素值。所以表尾不可以是单个元素值。</p><p>例子：</p><ol><li>A=（）——A是一个空表，其长度为零。</li><li>B=（e）——表B只有一个原子e，B的长度为1。</li><li>C=（a,(b,c,d))——表C的长度为2，两个元素分别为原子a和子表(b,c,d)。</li><li>D=（A，B，C）——表D的长度为3，三个元素都是广义 表。显然，将子表的值代入后，则有D=(( ),(e),(a,(b,c,d)))。</li><li>E=（a,E）——这是一个递归的表，它的长度为2，E相当于一个无限的广义表E=(a,(a,(a,(a,…)))).</li></ol><p>三个结论：</p><ol><li>广义表的元素可以是子表，而子表的元素还可以是子表。由此，广义表是一个多层次的结构，可以用图形象地表示</li><li>广义表可为其它表所共享。例如在上述例4中，广义表A，B，C为D的子表，则在D中可以不必列出子表的值，而是通过子表的名称来引用。</li><li>广义表的递归性</li></ol><p>考点：</p><ol><li>广义表是0个或多个单因素或子表组成的有限序列，广义表可以是自身的子表，广义表的长度n&gt;=0，所以可以为空表。广义表的<strong>同级</strong>元素(直属于同一个表中的各元素)具有<strong>线性</strong>关系</li><li>广义表的表头为空，并不代表该广义表为空表。广义表()和(())不同。前者是长度为0的空表，对其不能做求表头和表尾的运算；而后者是长度为l的非空表(只不过该表中惟一的一个元素是空表)，对其可进行分解，得到的表头和表尾均是空表()</li><li>已知广义表LS＝((a,b,c),(d,e,f)),运用head和tail函数取出LS中原子e的运算是head(tail(head(tail(LS)))。根据表头、表尾的定义可知：任何一个非空广义表的表头是表中第一个元素，它可以是原子，也可以是子表，而其<strong>表尾必定是子表</strong>。也就是说，广义表的head操作，取出的元素是什么，那么结果就是什么。但是tail操作取出的元素外必须加一个表——“（）“。tail(LS)＝((d,e,f))；head(tail(LS))=(d,e,f)；tail(head(tail(LS)))=(e,f)；head(tail(head(tail(LS))))=e。</li><li>二维以上的数组其实是一种特殊的广义表</li><li>在（非空）广义表中：1、表头head可以是原子或者一个表 2、表尾tail一定是一个表 3.广义表难以用顺序存储结构 4.广义表可以是一个多层次的结构</li></ol><h2 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h2><p>一种<strong>非线性</strong>结构。树是递归结构，在树的定义中又用到了树的概念。</p><p>基本术语：</p><ol><li>树结点：包含一个数据元素及若干指向子树的分支；</li><li>孩子结点：结点的子树的根称为该结点的孩子；</li><li>双亲结点：B结点是A结点的孩子，则A结点是B结点的双亲；</li><li>兄弟结点：同一双亲的孩子结点；</li><li>堂兄结点：同一层上结点；</li><li>结点层次：根结点的层定义为1；根的孩子为第二层结点，依此类推；</li><li>树的高（深）度：树中最大的结点层</li><li>结点的度：结点子树的个数</li><li>树的度： 树中最大的结点度。</li><li>叶子结点：也叫终端结点，是度为0的结点；</li><li>分枝结点：度不为0的结点（非终端结点）；</li><li>森林：互不相交的树集合；</li><li>有序树：子树有序的树，如：家族树；</li><li>无序树：不考虑子树的顺序；</li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树可以为空。二叉树结点的子树要区分左子树和右子树，即使只有一棵子树也要进行区分，说明它是左子树，还是右子树。这是二叉树与树的最主要的差别。注意区分：二叉树、<strong>二叉查找树/二叉排序树/二叉搜索树</strong>、<strong>二叉平衡(查找)树</strong></p><p><strong>二叉平衡树肯定是一颗二叉排序树。堆不是一颗二叉平衡树。</strong></p><p><strong>二叉树与树是不同的，二叉树不等价于分支树最多为二的有序树。当一个结点只包含一个子节点时，对于有序树并无左右孩子之分，而对于二叉树来说依然有左右孩子之分，所以二叉树与树是两种不同的结构。</strong></p><p>性质：</p><ol><li>在二叉树的第 i 层上至多有2<sup>i-1</sup>个结点。</li><li>深度为 k 的二叉树上至多含 2<sup>k</sup>-1 个结点（k≥1）</li><li>对任何一棵二叉树，若它含有n<sub>0</sub>个叶子结点、n<sub>2</sub>个度为 2 的结点，则必存在关系式：n<sub>0</sub>= n<sub>2</sub>+1。</li><li>具有 n 个结点的完全二叉树的深度为⎣log<sub>2</sub> n⎦+1 。</li><li>n个结点的二叉树中，完全二叉树具有最小的路径长度。</li><li>如果对一棵有n个结点的完全二叉树的结点按层序编号,则对任一结点i（1&lt;=i&lt;=n),有：<ul><li>如果i＝1，则结点i无双亲，是二叉树的根；如果i&gt;1，则其双亲的编号是 i/2(整除）。</li><li>如果2i&gt;n，无左孩子；否则，其左孩子是结点2i。</li><li>如果2i＋1&gt;n，则结点i无右孩子；否则，其右孩子是结点2i＋1。</li></ul></li></ol><p>二叉树的存储结构</p><ol><li>顺序存储结构：仅仅适用于满或完全二叉树，结点之间的层次关系由性质5确定。</li><li>二叉链表法：每个节点存储左子树和右子树。三叉链表：左子树、右子树、父节点，总的指针是n+2</li><li>在有n个结点的二叉链表中，值为非空的链域的个数为n-1。在有N个结点的二叉链表中必定有2N个链域。除根结点外，其余N-1个结点都有一个父结点。所以，一共有N-1个非空链域，其余2N-(N-1)=N+1个为空链域。</li><li>二叉链存储法也叫孩子兄弟法，左指针指向左孩子，右指针指向右兄弟。而中序遍历的顺序是左孩子，根，右孩子。这种遍历顺序与存储结构不同，因此需要堆栈保存中间结果。而中序遍历检索二叉树时，由于其存储结构跟遍历顺序相符，因此不需要用堆栈。</li></ol><h4 id="遍历二叉树和线索二叉树"><a href="#遍历二叉树和线索二叉树" class="headerlink" title="遍历二叉树和线索二叉树"></a><strong>遍历二叉树和线索二叉树</strong></h4><p>遍历二叉树：使得每一个结点均被访问一次，而且仅被访问一次。非递归的遍历实现要利用栈。</p><ul><li>先序遍历DLR：根节点-&gt;左子树-&gt;右子树</li><li>中序遍历LDR：左子树-&gt;根节点-&gt;右子树。必须要有中序遍历才能得到一棵二叉树的正确顺序</li><li>后续遍历LRD：左子树-&gt;右子树-&gt;根节点。需要栈的支持。</li><li>层次遍历：用一维数组存储二叉树时,总是以层次遍历的顺序存储结点。层次遍历应该借助队列。</li></ul><p>线索二叉树：对二叉树所有结点做某种处理可在遍历过程中实现；检索（查找）二叉树某个结点，可通过遍历实现；如果能将二叉树线索化，就可以简化遍历算法，提高遍历速度，目的是加快查找结点的前驱或后继的速度。</p><p>如何线索化？以中序遍历为例，若能将中序序列中每个结点前趋、后继信息保存起来，以后再遍历二叉树时就可以根据所保存的结点前趋、后继信息对二叉树进行遍历。对于二叉树的线索化，实质上就是遍历一次二叉树，只是在遍历的过程中，检查当前结点左，右指针域是否为空，若为空，将它们改为指向前驱结点或后继结点的线索。<strong>前驱就是在这一点之前走过的点，不是下一将要去往的点</strong>。</p><p>加上结点前趋后继信息（结索）的二叉树称为<strong>线索二叉树</strong>。n个结点的线索二叉树上每个结点有2个指针域（指向左孩子和右孩子），总共有2n个指针域；一个n个结点的树有n-1条边，那么空指针域= 2n - (n-1) = n + 1，即线索数为n+1。指针域tag为0，存放孩子指针，为1，存放前驱/后继节点指针。</p><p>线索树下结点x的前驱与后继查找：设结点x相应的左（右）标志是线索标志，则lchild(rchild)就是前驱(后继），否则：</p><ul><li>LDR–前驱：左子树中最靠右边的结点；后继：右子树中最靠左边的结点</li><li>LRD–前驱：右子树的根，若无右子树，为左子树跟。后继：x是根，后继是空；x是双亲的右孩子、x是双亲的左孩子，但双亲无右孩子，双亲是后继；x是双亲的左孩子，双亲有右孩子，双亲右子树中最左的叶子是后继</li><li>DLR–对称于LRD线索树—将LRD中所有左右互换，前驱与后继互换，得到DLR的方法。</li><li>为简化线索链表的遍历算法，仿照线性链表，为线索链表加上一头结点，约定：<ul><li>头结点的lchild域：存放线索链表的根结点指针；</li><li>头结点的rchild域: 中序序列最后一个结点的指针；</li><li>中序序列第一结点lchild域指向头结点;</li><li>中序序列最后一个结点的rchild域指向头结点;</li></ul></li></ul><p>中序遍历的线索二叉树以及线索二叉树链表示意图<br><img src="http://images.cnitblog.com/blog/311549/201309/13230006-d365a5866c094ee7b3897a1675d34716.jpg" alt="xiansuobinarytree"></p><p>一棵左右子树均不空的二叉树在前序线索化后,其中空的链域的个数是1。<strong>前序和后续线索化后空链域个数都是1，中序是2</strong>。二叉树在线索化后，仍不能有效求解的问题是前序求前序先驱，后序求后序后继。</p><p>中序遍历的顺序为：左、根、右，所以对于每一非空的线索，左子树结点的后继为根结点，右子树结点的前驱为根结点，再递归的执行上面的过程，可得非空线索均指向其祖先结点。<strong>在中序线索二叉树中,每一非空的线索均指向其祖先结点</strong>。</p><p>在二叉树上加上结点前趋、后继线索后，可利用线索对二叉树进行遍历,此时，<strong>不需栈，也不需递归</strong>。基本步骤：</p><ol><li>p=T-&gt;lchild; p指向线索链表的根结点；</li><li>若线索链表非空，循环：<ul><li>循环，顺着p左孩子指针找到最左下结点；访问之； </li><li>若p所指结点的右孩子域为线索，p的右孩子结点即为后继结点循环： p=p-&gt;rchild； 并访问p所指结点；（在此循环中，顺着后继线索访问二叉树中的结点）</li><li>一旦线索“中断”，p所指结点的右孩子域为右孩子指针，p=p-&gt;rchild，使 p指向右孩子结点；</li></ul></li></ol><h3 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h3><p>树的存储结构：</p><ol><li>双亲表示法</li><li>孩子表示法</li><li>利用图表示树</li><li>孩子兄弟表示法（二叉树表示法）：链表中每个结点的两指针域分别指向其第一个孩子结点和下一个兄弟结点</li></ol><p>将树转化成二叉树：右子树一定为空</p><ol><li>加线：在兄弟之间加一连线</li><li>抹线：对每个结点，除了其左孩子外，去除其与其余孩子之间的关系</li><li>旋转：以树的根结点为轴心，将整树顺时针转45°</li></ol><p>森林转换成二叉树：</p><ol><li>将各棵树分别转换成二叉树</li><li>将每棵树的根结点用线相连</li><li>以第一棵树根结点为二叉树的根</li></ol><p>树与转换后的二叉树的关系：转换后的二叉树的先序对应树的先序遍历；转换后的二叉树的中序对应树的后序遍历</p><h3 id="哈弗曼树-霍夫曼树"><a href="#哈弗曼树-霍夫曼树" class="headerlink" title="哈弗曼树/霍夫曼树"></a>哈弗曼树/霍夫曼树</h3><p>一些概念</p><ol><li>路径：从一个祖先结点到子孙结点之间的分支构成这两个结点间的路径；</li><li>路径长度：路径上的分支数目称为路径长度；</li><li>树的路径长度：从根到每个结点的路径长度之和。</li><li>结点的权：根据应用的需要可以给树的结点赋权值；</li><li>结点的带权路径长度：从根到该结点的路径长度与该结点权的乘积；</li><li>树的带权路径长度=树中所有叶子结点的带权路径之和；通常记作  WPL=∑w<sub>i</sub>×l<sub>i</sub> </li><li>哈夫曼树：假设有n个权值(w<sub>1</sub>,  w<sub>2</sub>, … , w<sub>n</sub>)，构造有n个叶子结点的二叉树，每个叶子结点有一个 w<sub>i</sub>作为它的权值。则带权路径长度最小的二叉树称为哈夫曼树。最优二叉树。</li></ol><p>前缀码的定义：在一个字符集中，任何一个字符的编码都不是另一个字符编码的前缀。霍夫曼编码就是前缀码，可用于快速判断霍夫曼编码是否正确。霍夫曼树是满二叉树，若有n个节点，则共有(n+1)/2个码子</p><p>给定n个权值作为n的叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为霍夫曼树(Huffman Tree)。霍夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><p>假设哈夫曼树是二叉的话，则度为0的结点个数为N，度为2的结点个数为N-1，则结点总数为2N-1。哈夫曼树的结点个数必为奇数。</p><p>哈夫曼树不一定是完全二叉树，但一定是最优二叉树。</p><p>若度为m的哈夫曼树中,其叶结点个数为n,则非叶结点的个数为[(n-1)/(m-1)]。边的数目等于度。</p><h3 id="图遍历与回溯"><a href="#图遍历与回溯" class="headerlink" title="图遍历与回溯"></a>图遍历与回溯</h3><p>图搜索-&gt;形成搜索树</p><ol><li>穷举法。</li><li>贪心法。多步决策，每步选择使得构成一个问题的可能解，同时满足目标函数。</li><li>回溯法。根据题意，选取度量标准，然后将可能的选择方法按度量标准所要求顺序排好，每次处理一个量，得到该意义下的最优解的分解处理。</li></ol><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>无向图</p><ol><li>回路或环：第一个顶点和最后一个顶点相同的路径。</li><li>简单回路或简单环：除第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路</li><li>连通：顶点v至v’ 之间有路径存在</li><li>连通图：无向图图 G 的任意两点之间都是连通的，则称G是连通图。</li><li>连通分量：极大连通子图，子图中包含的顶点个数极大</li><li>所有顶点度的和必须为偶数</li></ol><p>有向图：</p><ol><li><p>回路或环：第一个顶点和最后一个顶点相同的路径。</p></li><li><p>简单回路或简单环：除第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路。</p></li><li><p>连通：顶点v至v’之间有路径存在</p></li><li><p>强连通图：有向图G的任意两点之间都是连通的，则称G是强连通图。各个顶点间均可达。</p></li><li><p>强连通分量：极大连通子图</p></li><li><p>有向图顶点的度是顶点的入度与出度之和。邻接矩阵中第V行中的1的个数是V的出度</p></li><li><p>生成树：极小连通子图。包含图的所有n个结点，但只含图的n-1条边。在生成树中添加一条边之后，必定会形成回路或环。</p></li><li><p>完全图：有 n(n-1)/2 条边的无向图。其中n是结点个数。必定是连通图。</p></li><li><p>有向完全图：有n(n-1)条边的有向图。其中n是结点个数。每两个顶点之间都有两条方向相反的边连接的图。</p></li><li><p>一个无向图 G=(V,E) 是连通的，那么边的数目大于等于顶点的数目减一：|E|&gt;=|V|-1，而反之不成立。如果 G=(V,E) 是有向图，那么它是强连通图的必要条件是边的数目大于等于顶点的数目：|E|&gt;=|V|，而反之不成立。没有回路的无向图是连通的当且仅当它是树，即等价于：|E|=|V|-1。</p></li></ol><h3 id="图的存储形式"><a href="#图的存储形式" class="headerlink" title="图的存储形式"></a>图的存储形式</h3><ol><li>邻接矩阵和加权邻接矩阵<ul><li>无权有向图：出度: i行之和；入度: j列之和。</li><li>无权无向图：i结点的度: i行或i列之和。</li><li>加权邻接矩阵：相连为w，不相连为∞</li></ul></li><li>邻接表<ul><li>用顶点数组表、边（弧）表表示该有向图或无向图</li><li>顶点数组表：用数组存放所有的顶点。数组大小为图顶点数n</li><li>边表（边结点表）：每条边用一个结点进行表示。同一个结点的所有的边形成它的边结点单链表。  </li><li>n个顶点的无向图的邻接表最多有n(n-1)个边表结点。有n个顶点的无向图最多有n*(n-1)/2条边，此时为完全无向图，而在邻接表中每条边存储两次，所以有n*(n-1)个结点</li></ul></li></ol><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>深度优先搜索利用栈，广度优先搜索利用队列</p><p>求一条从顶点i到顶点s的简单路径–深搜。求两个顶点之间的一条长度最短的路径–广搜。当各边上的权值均相等时,BFS算法可用来解决单源最短路径问题。</p><h3 id="生成树和最小生成树"><a href="#生成树和最小生成树" class="headerlink" title="生成树和最小生成树"></a>生成树和最小生成树</h3><p>每次遍历一个连通图将图的边分成遍历所经过的边和没有经过的边两部分，将遍历经过的边同图的顶点构成一个子图，该子图称为生成树。因此有DFS生成树和BFS生成树。</p><p>生成树是连通图的极小子图，有n个顶点的连通图的生成树必定有n-1条边,在生成树中任意增加一条边，必定产生回路。若砍去它的一条边，就会把生成树变成非连通子图</p><p>最小生成树：生成树中边的权值(代价)之和最小的树。最小生成树问题是构造连通网的最小代价生成树。</p><p>Kruskal算法：令最小生成树集合T初始状态为空，在有n个顶点的图中选取代价最小的边并从图中删去。若该边加到T中有回路则丢弃，否则留在T中；依此类推，直至T中有n-1条边为止。</p><p>Prim算法、Kruskal算法和Dijkstra算法均属于贪心算法。</p><ol><li>Dijkstra算法解决的是带权重的有向图上单源最短路径问题，该算法要求所有边的权重都为非负值。</li><li>Dijkstra算法解决了从某个原点到其余各顶点的最短路径问题，由循环嵌套可知该算法的时间复杂度为O(N*N)。若要求任一顶点到其余所有顶点的最短路径，一个比较简单的方法是对每个顶点当做源点运行一次该算法，等于在原有算法的基础上，再来一次循环，此时整个算法的复杂度就变成了O(N*N*N)。</li><li>Bellman-Ford算法解决的是一般情况下的单源最短路径问题，在这里，边的权重可以为负值。该算法返回一个布尔值，以表明是否存在一个从源节点可以到达的权重为负值的环路。如果存在这样一个环路，算法将告诉我们不存在解决方案。如果没有这种环路存在，算法将给出最短路径和它们的权重。</li></ol><h3 id="双连通图和关节点"><a href="#双连通图和关节点" class="headerlink" title="双连通图和关节点"></a>双连通图和关节点</h3><p>若从一个连通图中删去任何一个顶点及其相关联的边，它仍为一个连通图的话，则该连通图被称为<strong>重（双）连通图</strong>。</p><p>若连通图中的某个顶点和其相关联的边被删去之后，该连通图被分割成两个或两个以上的连通分量，则称此顶点为<strong>关节点</strong>。</p><p>没有关节点的连通图为双连通图</p><ol><li>若生成树的根结点，有两个或两个以上的分支，则此顶点(生成树的根)必为关节点；</li><li>对生成树上的任意一个非叶“顶点”，若其某棵子树中的所有“顶点”没有和其祖先相通的回边，则该“顶点”必为关节点。</li></ol><h3 id="有向无环图及其应用"><a href="#有向无环图及其应用" class="headerlink" title="有向无环图及其应用"></a>有向无环图及其应用</h3><p>拓扑排序。在用邻接表表示图时,对有n个顶点和e条弧的有向图而言时间复杂度为O(n+e)。一个有向图能被拓扑排序的充要条件就是它是一个有向无环图。拓扑序列唯一不能唯一确定有向图。</p><p>AOV网(Activity On Vertex)：用顶点表示活动，边表示活动的优先关系的有向图称为<strong>AOV网</strong>。AOV网中不允许有回路，这意味着某项活动以自己为先决条件。 </p><p>拓扑有序序列：把AOV网络中各顶点按照它们相互之间的优先关系排列一个线性序列的过程。若v<sub>i</sub>是v<sub>j</sub>前驱，则v<sub>i</sub>一定在v<sub>j</sub>之前；对于没有优先关系的点，顺序任意。</p><p>拓扑排序：对AOV网络中顶点构造拓扑有序序列的过程。方法：</p><ol><li>在有向图中选一个没有前驱的顶点且输出之</li><li>从图中删除该顶点和所有以它为尾的弧</li><li>重复上述两步，直至全部顶点均已输出；或者当图中不存在无前驱的顶点为止(此时说明图中有环）</li></ol><p>采用<strong>深度优先搜索</strong>或<strong>拓扑排序</strong>算法可以判断出一个有向图中是否有环(回路).深度优先搜索只要在其中记录下搜索的节点数n，当n大于图中节点数时退出，并可以得出有回路。若有回路，则拓扑排序访问不到图中所有的节点，所以也可以得出回路。<del>广度优先搜索</del>过程中如果访问到一个已经访问过的节点，可能是多个节点指向这个节点，不一定是存在环。</p><p>算法描述：</p><ol><li>把邻接表中入度为0的顶点依此进栈</li><li>若栈不空，则<ul><li>栈顶元素v<sub>j</sub>退栈并输出；</li><li>在邻接表中查找v<sub>j</sub>的直接后继v<sub>k</sub>，把v<sub>k</sub>的入度减1；若v<sub>k</sub>的入度为0则进栈</li></ul></li><li>若栈空时输出的顶点个数不是n，则有向图有环；否则，拓扑排序完毕。</li></ol><p>AOE网：带权的<strong>有向无环图</strong>，其中顶点表示事件，弧表示活动，权表示活动持续时间。在工程上常用来表示工程进度计划。</p><p>一些定义：</p><ol><li>事件的最早发生时间（ve(j)）：从源点到j结点的最长的路径。意味着事件最早能够发生的时间。</li><li>事件的最迟发生时间（vl(j)）：不影响工程的如期完工，事件j必须发生的时间。</li><li>活动a<sub>i</sub>由弧&lt;j,k&gt;表示，持续时间记为 dut&lt;j,k&gt;,则有:<ul><li>活动的最早开始时间：e(i)=ve(j)</li><li>活动的最迟开始时间：l(i)=vl(k) - dut(&lt;j , k &gt;)</li></ul></li><li>活动余量：l(i)-e(i)的差</li><li>关键活动：活动余量为0的活动</li><li>关键路径：从源点到汇点的最长的一条路径，或者全部由关键活动构成的路径。关键活动一定位于关键路径上。</li><li>关键活动组成了关键路径，关键路径是图中的最长路径，关键路径长度代表整个工期的最短完成时间，关键活动延期完成，必将导致关键路径长度增加，即整个工期的最短完成时间增加。关键路径并不唯一，当有多条关键路径存在时，其中一条关键路径上的关键活动时间缩短，只能导致本条关键路径变成非关键路径，而无法缩短整个工期，因为其他关键路径没有变化。任何一条关键路径上的关键活动变长了，都会使这条关键路径变成更长的关键路径，并且导致其他关键路径变成非关键路径（如果关键路径不唯一）。关键活动不按期完成就会影响整个工程的完成时间。所有的关键活动提前完成,那么整个工程才会提前完成。关键路径也不能任意缩短，一旦缩短到一定程度，该关键活动可能变成非关键活动了。</li></ol><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>顺序查找、折半查找、索引查找、分块查找是静态查找，动态查找有二叉排序树查找，最优二叉树查找，键树查找，哈希表查找</p><h3 id="静态查找表"><a href="#静态查找表" class="headerlink" title="静态查找表"></a>静态查找表</h3><p>顺序表的顺序查找：应用范围：顺序表或线性链表表示的表，表内元素之间无序。查找过程：从表的一端开始逐个进行记录的关键字和给定值的比较。</p><p>顺序有序表的二分查找。平均查找时间(n+1)/n log<sub>2</sub>(n+1)</p><p>分块查找：将表分成几块，块内无序，块间有序，即前一块中的最大值小于后一块中的最小值。并且有一张索引表，每一项存放每一块的最大值和指向该块第一个元素的指针。索引表有序，块内无序。所以，块间查找用二分查找，块内用顺序查找，效率介于顺序和二分之间；先确定待查记录所在块，再在块内查找。因此跟表中元素个数和块中元素个数都有关。</p><ol><li>用数组存放待查记录,</li><li>建立索引表，由每块中最大（小）的关键字及所属块位置的信息组成。</li><li>当索引表较大时，可以采用二分查找</li><li>在数据量极大时，索引可能很多，可考虑建立索引表的索引，即二级索引，原则上索引不超过三级</li></ol><p>分块查找平均查找长度：<em>ASL</em><sub><em>bs</em></sub> = <em>L</em><sub><em>b</em></sub> + <em>L</em><sub><em>w</em></sub>。其中，<em>L</em><sub><em>b</em></sub>是查找索引表确定所在块的平均查找长度， <em>L</em><sub><em>w</em></sub>是在块中查找元素的平均查找长度。在n一定时，可以通过选择s使ASL尽可能小。当s=sqrt(n)时，ASL最小。</p><ol><li>时间：顺序查找最差，二分最好，分块介于两者之间</li><li>空间：分块最大，需要增加索引数据的空间</li><li>顺序查找对表没有特殊要求  </li><li>分块时数据块之间在物理上可不连续。所以可以达到插入、删除数据只涉及对应的块；另外，增加了索引的维护。</li><li>二分查找要求表有序，所以若表的元素的插入与删除很频繁，维持表有序的工作量极大。</li><li>在表不大时，一般直接使用顺序查找。</li></ol><h2 id="动态查找"><a href="#动态查找" class="headerlink" title="动态查找"></a>动态查找</h2><p>二叉排序树的结点删除：</p><ol><li>x为叶子结点，则直接删除</li><li>x只有左子树x<sub>L</sub>或只有右子树x<sub>R</sub> ,则令x<sub>L</sub>或x<sub>R</sub>直接成为双亲结点f的子树； </li><li>x即有左子树x<sub>L</sub>也有右子树x<sub>R</sub>，在x<sub>L</sub>中选值最大的代替x，该数据按二叉排序树的性质应在最右边。</li></ol><p>平衡二叉树：每个结点的平衡因子都为 1、－1、0 的二叉排序树。或者说每个结点的左右子树的高度最多差1的二叉排序树。</p><p>平衡二叉树的平衡：</p><ol><li>左调整(新结点插入在左子树上的调整)：<ul><li>LL(插入在结点左子树的左子树上)：旋转前后高度都为h+1</li><li>LR(新插入结点在左子树的右子树上)：旋转前后高度仍为h+1</li></ul></li><li>右调整(新结点插入在右子树上进行的调整):<ul><li>RR(插入在的右子树的右子树上)：处理方法和 LL对称</li><li>RL(插入在的右子树的左子树上)：处理方法和 LR对称</li></ul></li></ol><p>平衡树建立方法：</p><ol><li>按二叉排序树插入结点</li><li>如引起结点平衡因子变为|2|，则确定旋转点，该点是离根最远（或最接近于叶子的点）</li><li>确定平衡类型后进行平衡处理，平衡后以平衡点为根的子树高不变</li><li>最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。</li></ol><p>常见的平衡二叉树：</p><ol><li>红黑树是平衡二叉树，也就是左右子树是平衡的，高度大概相等。这种情况等价于一块完全二叉树的高度，查找的时间复杂度是树的高度，为logn，插入操作的平均时间复杂度为O(logn)，最坏时间复杂度为O(logn)<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/800px-Red-black_tree_example.svg.png" alt="红黑树"><ul><li>节点是红色或黑色。</li><li>根是黑色。</li><li>所有叶子都是黑色（叶子是NIL节点）。</li><li>每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>从任一节点到其每个叶子的所有简单路径 都包含相同数目的黑色节点。</li></ul></li><li>avl树也是自平衡二叉树；红黑树和AVL树查找、插入、删除的时间复杂度相同；包含n个内部结点的红黑树的高度是o(logn); TreeMap 是一个红黑树的实现，能保证插入的值保证排序</li><li>STL和linux多使用红黑树作为平衡树的实现：<ol><li>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</li><li>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</li><li>map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。</li></ol></li></ol><h2 id="查找总结"><a href="#查找总结" class="headerlink" title="查找总结"></a>查找总结</h2><ol><li>既希望较快的查找又便于线性表动态变化的查找方法是哈希法查找。二叉排序树查找，最优二叉树查找，键树查找，哈希法查找是动态查找。分块、顺序、折半、索引顺序查找均为静态。分块法应该是将整个线性表分成若干块进行保存，若动态变化则可以添加在表的尾部（非顺序结构），时间复杂度是O(1)，查找复杂度为O(n)；若每个表内部为顺序结构，则可用二分法将查找时间复杂度降至O(logn)，但同时动态变化复杂度则变成O(n)；顺序法是挨个查找，这种方法最容易实现，不过查找时间复杂度都是O(n)，动态变化时可将保存值放入线性表尾部，则时间复杂度为O(1)；二分法是基于顺序表的一种查找方式，时间复杂度为O(logn)；通过哈希函数将值转化成存放该值的目标地址，O（1）</li><li>二叉树的平均查找长度为O(log<sub>2</sub>n)——O(n).二叉排序树的查找效率与二叉树的高度有关，高度越低，查找效率越高。二叉树的查找成功的平均查找长度ASL不超过二叉树的高度。二叉树的高度与二叉树的形态有关，n个节点的完全二叉树高度最小，高度为[log<sub>2</sub>n]+1,n个节点的单只二叉树的高度最大，高度为n，此时查找成功的ASL为最大(n+1)/2，因此二叉树的高度范围为[log<sub>2</sub>n]+1——n.</li><li>链式存储不能随机访问，必须是顺序存储</li></ol><h2 id="B-树的B-树"><a href="#B-树的B-树" class="headerlink" title="B_树的B+树"></a>B_树的B+树</h2><h3 id="B-树"><a href="#B-树" class="headerlink" title="B_树"></a>B_树</h3><p>B-树就是B树。m阶B_树满足或空，或为满足下列性质的m叉树：</p><p><img src="http://img.my.csdn.net/uploads/201106/7/8394323_13074405906V6Q.jpg" alt="B-树"></p><ol><li>树中每个结点最多有m棵子树</li><li>根结点在不是叶子时，至少有两棵子树</li><li>除根外，所有非终端结点至少有⎡m/2⎤棵子树 </li><li>有s个子树的非叶结点具有 n = s-1个关键字，结点的信息组织为:(n,A<sub>0</sub>,K<sub>1</sub>,A<sub>1</sub>,K<sub>2</sub>,A<sub>2</sub> … K<sub>n</sub>，A<sub>n</sub>)。这里：n为关键字的个数，k<sub>i</sub>（i=1,2,…,n)为关键字，且满足K<sub>i</sub>小于K<sub>i+1</sub>,，A<sub>i</sub>(i=0,1,..n)为指向子树的指针。</li><li>所有的叶子结点都出现在同一层上，不带信息（可认为外部结点或失败结点）。</li><li>关键字集合分布在整颗树中</li><li>任何一个关键字出现且只出现在一个结点中</li><li>搜索有可能在非叶子结点结束</li><li>其搜索性能等价于在关键字全集内做一次二分查找</li><li>只适用于随机检索，不适用于顺序检索。</li><li>有结点的平衡因子都为零</li><li>M阶B-树中含有N个关键字，最大深度为log<sub>⎡m/2⎤</sub>(n+1)/2+2</li></ol><p>B_树中结点的插入</p><ol><li>m代表B_树的阶，插入总发生在最低层</li><li>插入后关键字个数小于等于 m-1,完成。</li><li>插入后关键字个数等于m,结点分裂，以中点数据为界一分为二，中点数据放到双亲结点中。这样就有可能使得双亲结点的数据个数为m,引起双亲结点的分裂，最坏情况下一直波及到根，引起根的分裂——B_树长高。</li></ol><p>3阶<code>B_</code>树的插入。每个结点最多3棵子树，2个数据；最少2棵子树，1个数据。所以3阶B_树也称为2-3树。</p><p>B_树中结点的删除</p><ol><li>删除发生在最底层<ul><li>被删关键字所在结点中的关键字数目大于等于 m/2 ，直接删除。</li><li>删除后结点中数据为⎡m/2⎤-2，而相邻的左（右）兄弟中数据大于⎡m/2⎤-1，此时左（右兄弟）中最大（小）的数据上移到双亲中，双亲中接（靠）在它后（前）面的数据移到被删数据的结点中</li><li>其左右兄弟结点中数据都是⎡m/2⎤-1，此时和左（右）兄弟合并，合并时连同双亲中相关的关键字。此时，双亲中少了一项，因此又可能引起双亲的合并，最坏一直到根，使B-树降低一层。</li></ul></li><li>删除不在最底层<ul><li>在大于被删数据中选最小的代替被删数据，问题转换成在最底层的删除</li></ul></li></ol><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>在实际的文件系统中，用的是B+树或其变形。有关性质与操作类似与B_树。</p><p><img src="http://hi.csdn.net/attachment/201106/7/8394323_1307440587b6WG.jpg" alt="B+树"></p><p>差异：</p><ol><li>有n棵子树的结点中有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。</li><li>所有叶子结点中包含全部关键字信息，及对应记录位置信息及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接。(而B树的叶子节点并没有包括全部需要查找的信息)</li><li>所有非叶子为索引，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B树的非终节点也包含需要查找的有效信息)</li><li>非叶最底层顺序联结，这样可以进行顺序查找</li></ol><p>B+特性</p><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层</li><li>更适合文件索引系统</li><li>B+树插入操作的平均时间复杂度为O(logn)，最坏时间复杂度为O(logn)</li></ol><p>查找过程</p><ul><li>在 B+ 树上，既可以进行缩小范围的查找，也可以进行顺序查找；</li><li>在进行缩小范围的查找时，不管成功与否，都必须查到叶子结点才能结束；</li><li>若在结点内查找时，给定值≤K<sub>i</sub>， 则应继续在 A<sub>i</sub> 所指子树中进行查找</li></ul><p>插入和删除的操作：类似于B_树进行，即必要时，也需要进行结点的“分裂”或“合并”。</p><p>为什么说B+tree比B树更适合实际应用中操作系统的文件索引和数据库索引？</p><ol><li>B+tree的磁盘读写代价更低<ul><li>B+tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</li><li>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B树就比B+树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</li></ul></li><li>B+tree的查询效率更加稳定</li></ol><ul><li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li></ul><p>B树和B+树都是平衡的多叉树。B树和B+树都可用于文件的索引结构。B树和B+树都能有效的支持随机检索。B+树既能索引查找也能顺序查找.</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><ol><li>在记录的存储地址和它的关键字之间建立一个确定的对应关系；这样不经过比较，一次存取就能得到元素。 </li><li>哈希函数——在记录的关键字与记录的存储位置之间建立的一种对应关系。是从关键字空间到存储位置空间的一种映象。</li><li>哈希表——应用哈希函数，由记录的关键字确定记录在表中的位置信息，并将记录根据此信息放入表中，这样构成的表叫哈希表。</li><li>Hash查找适合于关键字可能出现的值的集合远远大于实际关键字集合的情形。</li><li>更适合查找，不适合频繁更新</li><li>Hash表等查找复杂依赖于Hash值算法的有效性，在最好的情况下，hash表查找复杂度为O(1)。只有无冲突的hash_table复杂度才是O(1)。一般是O(c)，c为哈希关键字冲突时查找的平均长度。插入，删除，查找都是O(1)。平均查找长度不随表中结点数目的增加而增加,而是随负载因子的增大而增大</li><li>由于冲突的产生，使得哈希表的查找过程仍然是一个给定值与关键字比较的过程。</li></ol><p>根据抽屉原理，冲突是不可能完全避免的，所以，选择好的<strong>散列函数和冲突处理</strong>方法：</p><ol><li>构造一个性能好，冲突少的Hash函数</li><li>如何解决冲突</li></ol><p>常用的哈希函数</p><ol><li>直接定址法。仅适合于：地址集合的大小 == 关键字集合的大小</li><li>数字分析法。对关键字进行分析，取关键字的若干位或其组合作哈希地址。仅适合于：能预先估计出全体关键字的每一位上各种数字出现的频度。</li><li>平方取中法。以关键字的平方值的中间几位作为存储地址。</li><li>折叠法。将关键字分割成位数相同的几部分，然后取这几部分的叠加和（舍去进位）做哈希地址。移位叠加/间界叠加。适合于: 关键字的数字位数特别多，且每一位上数字分布大致均匀情况。</li><li>除留余数法。取关键字被某个不大于哈希表表长m的数p除后所得余数作哈希地址，即H(key)=key%p，p&lt;=m。</li><li>随机数法。取关键字的伪随机函数值作哈希地址，即H(key)=random(key)，适于关键字长度不等的情况。</li></ol><p>冲突解决</p><ol><li>开放定址法。当冲突发生时，形成一个探查序列；沿此序列逐个地址探查，直到找到一个空位置（开放的地址），将发生冲突的记录放到该地址中。即H<sub>i</sub>=(H(key)+d<sub>i</sub>) % m，i=1,2,……k(k&lt;=m-1)，H(key)哈希函数，m哈希表长，d<sub>i</sub>增量序列。缺点：删除：只能作标记，不能真正删除；溢出；载因子过大、解决冲突的算法选择不好会发生聚集问题。要求装填因子α较小，故当结点规模较大时会浪费很多空间。<ul><li>线性探测再散列：d<sub>i</sub>=1，2，3，…，m-1</li><li>二次探测再散列：d<sub>i</sub>=1<sup>2</sup>,-1<sup>2</sup>,2<sup>2</sup>,-2<sup>2</sup>,…，±k<sup>2</sup>（k&lt;=m/2）</li><li>伪随机探测再散列: d<sub>i</sub>为伪随机数序列</li></ul></li><li>链地址法：将所有关键字为同义词的记录存储在一个单链表中，并用一维数组存放头指针。拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间。一旦发生冲突，在当前位置给单链表增加结点就行。</li><li>其他方法：再哈希法、建立公共溢出区</li><li>在用拉链法构造的散列表中，删除结点的操作易于实现。拉链法的缺点是：指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间。由于拉链法中各链表上的结点空间是动态申请的,故它更适合于造表前无法确定表长的情况。拉链法解决冲突时，需要使用指针，指示下一个元素的存储位置</li><li>开哈希表–链式地址法;闭哈希表–开放地址法.开哈希和闭哈希主要的区别在于，随着哈希表的密集度提高，使用闭哈希时，不仅会与相同哈希值的元素发生冲突，还容易与不同哈希值的元素发生冲突；而开哈希则不受哈希表疏密与否的影响，始终只会与相同哈希值的元素冲突而已。所以在密集度变大的哈希表中查找时，显然开哈希的平均搜索长度不会增长。</li><li>设有n个关键字具有相同的Hash函数值，则用线性探测法把这n个关键字映射到Hash表中需要做n*(n-1)/2次线性探测。如果使用二次探测再散列法将这n个关键字存入哈希表，至少要进行n*(n+1)/2次探测</li></ol><p>Hash查找效率：装填因子=表中记录数/表容量</p><p>有B+Tree/Hash_Map/STL Map三种数据结构。对于内存中数据，查找性能较好的数据结构是Hash_Map，对于磁盘中数据，查找性能较好的数据结构是B+Tree。Hash操作能根据散列值直接定位数据的存储地址，设计良好的hash表能在常数级时间下找到需要的数据，但是更适合于内存中的查找。B+树是一种是一种树状的数据结构，适合做索引，对磁盘数据来说，索引查找是比较高效的。STL_Map的内部实现是一颗红黑树，但是只是一颗在内存中建立二叉树树，不能用于磁盘操作，而其内存查找性能也比不上Hash查找。</p><h2 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h2><ol><li>内部排序：全部数据可同时放入内存进行的排序。    </li><li>外部排序：文件中数据太多，无法全部调入内存进行的排序。</li></ol><p>插入类：</p><ol><li>直接插入排序。最坏情况是数据递减序，数据比较和移动量最大，达到O(n<sup>2</sup>)，最好是数据是递增序，比较和移动最少为O(n)。趟数是固定的n-1，即使有序，也要依次从第二个元素开始。排序趟数不等于时间复杂度。</li><li>折半插入排序 。由于插入第i个元素到r[1]到r[i-1]之间时，前i个数据是有序的，所以可以用折半查找确定插入位置，然后插入。</li><li>希尔排序。缩小增量排序。5-3-1。在实际应用中，步长的选取可简化为开始为表长n的一半（n/2），以后每次减半，最后为1。插入的改进，最后一趟已基本有序，比较次数和移动次数相比直接插入最后一趟更少</li></ol><p>交换类：</p><ol><li>冒泡排序。O(n<sup>2</sup>)通常认为冒泡是比较差的，可以加些改进，比如在一趟中无数据的交换，则结束等措施。<ul><li>在数据已基本有序时，冒泡是一个较好的方法</li><li>在数据量较少时（15个左右）可以用冒泡</li></ul></li><li>快速排序。<ul><li>时间复杂度。最好情况：每次支点总在中间，O(nlog<sub>2</sub>n)，平均O(nlog<sub>2</sub>n)。最坏，数据已是递增或递减，O(n<sup>2</sup>)。pivotkey的选择越靠近中央，即左右两个子序列长度越接近，排序速度越快。越无序越快。</li><li>空间复杂度。需栈空间以实现递归，最坏情况：S(n)=O(n)；一般情况：S(n)=O(log<sub>2</sub>n)</li><li>在序列已是有序的情况下，时间复杂度最高。原因：支点选择不当。改进：随机选取支点或最左、最右、中间三个元素中的值处于中间的作为支点，通常可以避免最坏情况。所以，快速排序在表已基本有序的情况下不合适。</li><li>在序列长度已较短时，采用直接插入排序、起泡排序等排序方法。序列的个数通常取10左右。</li></ul></li></ol><p>选择类排序：</p><ol><li>简单选择排序。O(n<sup>2</sup>)。总比较次数n(n-1)/2。</li><li>堆排序。建堆 O(n)，筛选排序O(nlogn)。找出若干个数中最大/最小的前K个数，用堆排序是最好。小根堆中最大的数一定是放在叶子节点上，堆本身是个完全二叉树，完全二叉树的叶子节点的位置大于[n/2]。时间复杂度不会因为待排序序列的有序程度而改变，但是待排序序列的有序程度会影响比较次数。</li><li>归并排序。时间：与表长成正比，若一个表表长是m，另一个是n，则时间是O(m+n)。单独一个数组归并，时间：O(nlogn)，空间：O(n)，比较次数介于(nlogn)/2和(nlogn)-n+1，赋值操作的次数是(2nlogn)。归并排序算法比较占用内存，但却是<strong>效率高且稳定</strong>的排序算法。在外排序中使用。归并的趟数是logn。</li><li>基数排序。在一般情况下，每个结点有 d 位关键字，必须执行 t = d次分配和收集操作。分配的代价：O(n)；收集的代价：O(rd) （rd是基数）；总的代价为：O( d ×(n + rd))。适用于以数字和字符串为关键字的情况。</li><li>枚举排序，通常也被叫做秩排序，比较计数排序。对每一个要排序的元素，统计小于它的所有元素的个数，从而得到该元素在整个序列中的位置，时间复杂度为O(n<sup>2</sup>)</li></ol><p>比较法分类的下界：O(nlogn)</p><p>排序算法的一些特点：</p><ol><li><strong>堆排序、冒泡排序、快速排序</strong>在每趟排序过程中,都会有一个元素被放置在其最终的位置上。</li><li>有字符序列 ｛Q,H,C,Y,P,A,M,S,R,D,F,X｝ ,新序列{F,H,C,D,P,A,M,Q,R,S,Y,X}，是快速排序算法一趟扫描的结果。(<em>拿Q作为分割点,快速排序一轮。二路归并，第一趟排序，得到 n / 2 个长度为 2 的各自有序的子序列，第二趟排序，得到 n / 4 个长度为 4 的各自有序的子序列H Q C Y A P M S D R F X。如果是快速排序的话，第一个元素t将会被放到一个最准确的位置，t前的数均小于t，后面的数均大于t。希尔排序每个小分组内将会是有序的。堆排序，把它构成一颗二叉树的时候，该堆要么就是大根堆，要么就是小根堆，第一趟Y排在最后；冒泡，那么肯定会有数据下沉的动作，第一趟有A在第一位。</em>)</li><li>在文件”局部有序”或文件长度较小的情况下,最佳内部排序的方法是<strong>直接插入排序</strong>。（归并排序要求待排序列已经部分有序，而部分有序的含义是待排序列由若干有序的子序列组成，即每个子序列必须有序，并且其时间复杂度为O(nlog2n)；直接插入排序在待排序列基本有序时，每趟的比较次数大为降低，即n-1趟比较的时间复杂度由O(n^2)降至O(n)。在待排序的元素序列基本有序或者每个元素距其最终位置不远也可用插入排序，效率最高的排序方法是<strong>插入排序</strong>）</li><li>排序趟数与序列的原始状态有关的排序方法是优化冒泡和快速排序法。(插入排序和选择排序不管序列的原始状态是什么都要执行n-1趟，优化冒泡和快排不一定。仔细理解<code>排序的次数</code>和<code>比较次数</code>的区别)</li><li><strong>不稳定的排序方法：快排，堆排，希尔，选择</strong></li><li>要与关键字的初始排列次序无关,那么就是最好、最坏、一般的情况下排序时间复杂度不变, 总共有堆排序,归并排序,选择排序,基数排序</li><li>快速排序、Shell 排序、归并排序、直接插入排序的关键码比较次数与记录的初始排列有关。折半插入排序、选择排序无关。(直接插入排序在完全有序的情况下每个元素只需要与他左边的元素比较一次就可以确定他最终的位置；折半插入排序，比较次数是固定的，与初始排序无关；快速排序，初始排序不影响每次划分时的比较次数，都要比较n次，但是初始排序会影响划分次数，所以会影响总的比较次数，但快排平均比较次数最小；归并排序在归并的时候，如果右路最小值比左路最大值还大，那么只需要比较n次，如果右路每个元素分别比左路对应位置的元素大，那么需要比较2*n-1次，所以与初始排序有关)</li><li>精俭排序，即一对数字不进行两次和两次以上的比较，插入和归并是“精俭排序”。插入排序，前面是有序的，后面的每一个元素与前面有序的元素比较，比较过的就是有序的了，不会再比较一次。归并每次合并后，内部都是有序的，内部的元素之间不用再比较。选择排序，每次在后面的元素中找到最小的，找最小元素的过程是在没有排好序的那部分进行，所有肯定会比较多次。堆排序也需比较多次。</li></ol><h2 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h2><ol><li>生成合并段（run）：读入文件的部分记录到内存－&gt;在内存中进行内部排序－&gt;将排好序的这些记录写入外存，形成合并段－&gt;再读入该文件的下面的记录，往复进行，直至文件中的记录全部形成合并段为止。</li><li>外部合并：将上一阶段生成的合并段调入内存，进行合并，直至最后形成一个有序的文件。</li><li>外部排序指的是大文件的排序，即待排序的记录存储在外存储器上，待排序的文件无法一次装入内存，需要在内存和外部存储器之间进行多次数据交换，以达到排序整个文件的目的。外部排序最常用的算法是多路归并排序，即将原文件分解成多个能够一次性装入内存的部分，分别把每一部分调入内存完成排序。然后，对已经排序的子文件进行多路归并排序</li><li>不管初始序列是否有序, 冒泡、选择排序时间复杂度是O(n^2),归并、堆排序时间复杂度是O(nlogn）</li><li>外部排序的总时间 = 内部排序（产出初始归并段）所需时间 + 外存信息读取时间 + 内部归并所需的时间</li><li>外排中使用置换选择排序的目的,是为了增加初始归并段的长度。减少外存读写次数需要减小归并趟数</li></ol><ol><li>根据内存容量设若干个输入缓冲区和一个输出缓冲区。若采用二路归并，用两个输入缓冲。</li><li>归并的方法类似于归并排序的归并算法。增加的是对缓冲的监视，对于输入，一旦缓冲空，要到相应文件读后续数据，对于输出缓冲，一旦缓冲满，要将缓冲内容写到文件中去。</li><li>外排序和内排序不只是考虑内外排序算法的性能，还要考虑IO数据交换效率的问题，内存存取速度远远高于外存。影响外排序的时间因素主要是内存与外设交换信息的总次数</li></ol><h2 id="有效的算法设计"><a href="#有效的算法设计" class="headerlink" title="有效的算法设计"></a>有效的算法设计</h2><ol><li>贪心法。Dijkstra的最短路径(时间复杂度O(n<sup>2</sup>))；Prim求最小生成树邻接表存储时是O(n+e),图O(n<sub>2</sub>)；关键路径及关键活动的求法。</li><li>回溯法</li><li>分支限界法</li><li>分治法。分割、求解、合并。二分查找、归并排序、快速排序。</li><li>动态规划。Floyd-Warshall算法求解图中所有点对之间最短路径时间复杂度为O(n<sup>3</sup>)</li></ol><p>动态规划解题的方法是一种高效率的方法，其时间复杂度通常为O(n<sup>2</sup>)，O(n<sup>3</sup>)等，可以解决相当大的信息量。（数塔在n&lt;=100层时，可以在很短的时间内得到问题解）</p><ul><li>适用的原则：原则为优化原则，即整体优化可以分解为若干个局部优化。</li><li>动态规划比穷举法具有较少的计算次数</li><li>递归算法需要很大的栈空间，而动态规划不需要栈空间</li></ul><p>贪心和动态规划的差别：</p><ol><li>所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。</li><li>在动态规划算法中，每步所作的选择往往依赖于相关子问题的解。因而只有在解出相关子问题后，才能作出选择。而在贪心算法中，仅在当前状态下作出最好选择，即局部最优选择。然后再去解作出这个选择后产生的相应的子问题。</li><li>贪心算法所作的贪心选择可以依赖于以往所作过的选择，但决不依赖于将来所作的选择，也不依赖于子问题的解。正是由于这种差别，动态规划算法通常以自底向上的方式解各子问题，而贪心算法则通常以自顶向下的方式进行,以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为一个规模更小的子问题。 </li></ol><p>P问题</p><ol><li>P问题，如果它可以通过运行多项式次(即运行时间至多是输入量大小的多项式函数的一种算法获得解决），可以找到一个能在多项式的时间里解决它的算法。—-确定性问题</li><li>NP问题，虽然可以用计算机求解，但是对于任意常数k，它们不能在O(n<sup>k</sup>)时间内得到解答，可以在多项式的时间里验证一个解的问题。所有的P类问题都是NP问题。</li><li>NP完全问题，知道有效的非确定性算法，但是不知道是否存在有效的确定性算法，同时，不能证明这些问题中的任何一个不存在有效的确定性算法。这类问题称为NP完全问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5摘要算法简介</title>
      <link href="/myhexo/2021/07/21/xue-xi/python/md5-zhai-yao-suan-fa-jian-jie/"/>
      <url>/myhexo/2021/07/21/xue-xi/python/md5-zhai-yao-suan-fa-jian-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。</p><p>什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。</p><p>举个例子，你写了一篇文章，内容是一个字符串’how to use python hashlib - by Michael’，并附上这篇文章的摘要是’2d73d4f15c0db7f5ecb321b6a65e5d6d’。如果有人篡改了你的文章，并发表为’how to use python hashlib - by Bob’，你可以一下子指出Bob篡改了你的文章，因为根据’how to use python hashlib - by Bob’计算出的摘要不同于原始文章的摘要。</p><p>可见，摘要算法就是通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原始数据是否被人篡改过。</p><p>摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但通过digest反推data却非常困难。而且，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64编码</title>
      <link href="/myhexo/2021/07/20/xue-xi/essay/mo-bi-wu-si-huan-fu-ben/"/>
      <url>/myhexo/2021/07/20/xue-xi/essay/mo-bi-wu-si-huan-fu-ben/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h2><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，大家可以查看RFC2045～RFC2049，上面有MIME的详细规范。Base64编码可用于在HTTP环境下传递较长的标识信息。</p><p>例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。</p><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，大家可以查看RFC2045～RFC2049，上面有MIME的详细规范。Base64编码可用于在HTTP环境下传递较长的标识信息。例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。</p><p>Base64编码要求把3个8位字节（3<em>8=24）转化为4个6位的字节（4</em>6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现1或2个’=’。</p><h1 id="Base64使用注意问题"><a href="#Base64使用注意问题" class="headerlink" title="Base64使用注意问题"></a>Base64使用注意问题</h1><h2 id="一、Base64和URL传参问题"><a href="#一、Base64和URL传参问题" class="headerlink" title="一、Base64和URL传参问题"></a>一、Base64和URL传参问题</h2><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“/”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。</p><p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’=’号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p><h2 id="二、Base64和URL传参问题改善"><a href="#二、Base64和URL传参问题改善" class="headerlink" title="二、Base64和URL传参问题改善"></a>二、Base64和URL传参问题改善</h2><p>另有一种用于正则表达式的改进Base64变种，它将“+”和“/”改成了“!”和“-”，因为“+”,“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。</p><p>此外还有一些变种，它们将“+/”改为“_-”或“.<em>”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“</em>:”（用于XML中的Name）。</p><h2 id="三、Base64转换后比原有的字符串长1-3"><a href="#三、Base64转换后比原有的字符串长1-3" class="headerlink" title="三、Base64转换后比原有的字符串长1/3"></a>三、Base64转换后比原有的字符串长1/3</h2><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</p><h1 id="四、Base64转换总结"><a href="#四、Base64转换总结" class="headerlink" title="四、Base64转换总结"></a>四、Base64转换总结</h1><p>Base64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题。</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> Base64编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PEP 8-Python代码样式指南 中文版</title>
      <link href="/myhexo/2021/07/12/xue-xi/python/pep8-cn/"/>
      <url>/myhexo/2021/07/12/xue-xi/python/pep8-cn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PEP-8-Python代码样式指南"><a href="#PEP-8-Python代码样式指南" class="headerlink" title="PEP 8-Python代码样式指南"></a>PEP 8-Python代码样式指南</h1><table><thead><tr><th align="left">PEP:</th><th>8</th></tr></thead><tbody><tr><td align="left">标题:</td><td>Python代码样式指南</td></tr><tr><td align="left">作者:</td><td>Guido van Rossum <guido at="" python.org="">, Barry Warsaw <barry at="" python.org="">, Nick Coghlan <ncoghlan at="" gmail.com=""></ncoghlan></barry></guido></td></tr><tr><td align="left">状态:</td><td>激活</td></tr><tr><td align="left">类型：</td><td>处理</td></tr><tr><td align="left">创建时间   :</td><td>2001年7月5日</td></tr><tr><td align="left">历史后      :</td><td>2001年7月5日，2013年8月1日</td></tr></tbody></table><hr><p>内容</p><ul><li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li><li><a href="#%E6%84%9A%E8%A0%A2%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%98%AF%E5%B0%8F%E5%A4%B4%E8%84%91%E7%9A%84%E5%A6%96%E7%B2%BE">愚蠢的一致性是小头脑的妖精</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E5%B8%83%E5%B1%80">代码布局</a><ul><li><a href="#%E7%BC%A9%E8%BF%9B">缩进</a></li><li><a href="#%E5%88%B6%E8%A1%A8%E7%AC%A6%E6%88%96%E7%A9%BA%E6%A0%BC">制表符或空格?</a></li><li><a href="#%E8%A1%8C%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6">行的最大长度</a></li><li><a href="#%E5%BA%94%E8%AF%A5%E5%9C%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E5%89%8D%E6%88%96%E8%80%85%E4%B9%8B%E5%90%8E%E6%8D%A2%E8%A1%8C%EF%BC%9F">应该在二进制操作符之前或者之后换行？</a></li><li><a href="#%E7%A9%BA%E8%A1%8C">空行</a></li><li><a href="#%E5%8E%9F%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81">原文件编码</a></li><li><a href="#%E5%AF%BC%E5%85%A5">导入</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E7%BA%A7%E7%9A%84%E5%91%86%E5%90%8D">模块级的呆名</a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%95%E5%8F%B7">字符串引号</a></li><li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84%E7%A9%BA%E7%99%BD">表达式和语句中的空白</a><ul><li><a href="#%E4%B8%8D%E8%83%BD%E5%BF%8D%E5%8F%97%E7%9A%84%E4%BA%8B">不能忍受的事</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%BB%BA%E8%AE%AE">其他建议</a></li></ul></li><li><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%9C%AB%E5%B0%BE%E4%B8%A2%E5%A5%BD">何时使用末尾丢好</a></li><li><a href="#%E6%B3%A8%E9%87%8A">注释</a><ul><li><a href="#%E5%9D%97%E6%B3%A8%E9%87%8A">块注释</a></li><li><a href="#%E8%A1%8C%E5%86%85%E6%B3%A8%E9%87%8A">行内注释</a></li><li><a href="#%E6%96%87%E6%A1%A3%E5%AD%97%E7%AC%A6%E4%B8%B2">文档字符串</a></li></ul></li><li><a href="#%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">命名约定</a><ul><li><a href="#%E9%A6%96%E8%A6%81%E5%8E%9F%E5%88%99">首要原则</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%EF%BC%9A%E5%91%BD%E5%90%8D%E6%A0%B7%E5%BC%8F">描述：命名样式</a></li><li><a href="%E8%A7%84%E8%8C%83%E6%80%A7%EF%BC%9A%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">规范性：命名约定</a><ul><li><a href="#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E5%90%8D%E7%A7%B0">避免使用的名称</a></li><li><a href="#ASCII%E5%85%BC%E5%AE%B9%E6%80%A7">ASCII 兼容性</a></li><li><a href="#%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97%E5%90%8D">包和模块名</a></li><li><a href="#%E7%B1%BB%E5%90%8D">类名</a> </li><li><a href="#%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E5%90%8D">类型变量名</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%90%8D">异常名</a></li><li><a href="#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%90%8D">全局变量名</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E5%90%8D">函数和变量名</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0">函数和方法的参数</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%90%8D%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">方法名和实例变量</a></li><li><a href="#%E5%B8%B8%E9%87%8F">常量</a></li><li><a href="#%E7%BB%A7%E6%89%BF%E7%9A%84%E8%AE%BE%E8%AE%A1">继承的设计</a></li></ul></li><li><a href="#%E5%85%AC%E5%85%B1%E5%92%8C%E5%86%85%E9%83%A8%E6%8E%A5%E5%8F%A3">公共和内部接口</a></li></ul></li><li><a href="#%E7%BC%96%E7%A8%8B%E5%BB%BA%E8%AE%AE">编程建议</a><ul><li><a href="#%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A">功能注释</a></li><li><a href="#%E5%8F%98%E9%87%8F%E6%B3%A8%E9%87%8A">变量注释</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li><li><a href="#%E7%89%88%E6%9D%83">版权</a></li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></h1><p>本文档给出了Python代码的编码约定，该Python代码包含主Python发行版中的标准库。请参阅随附的信息性PEP，其中描述了Python [1]的C实现中C代码的样式准则。</p><p>本文档和PEP 257（Docstring约定）是从Guido最初的Python样式指南文章中改编而来，并对Barry的样式指南[2]作了一些补充。</p><p>该样式指南会随着时间的流逝而发展，因为会发现其他约定，而过去的约定由于语言本身的更改而变得过时。</p><p>许多项目都有自己的编码风格准则。如有任何冲突，此类项目特定的指南优先于该项目。</p><h1 id="愚蠢的一致性是小头脑的妖精"><a href="#愚蠢的一致性是小头脑的妖精" class="headerlink" title="愚蠢的一致性是小头脑的妖精"></a>愚蠢的一致性是小头脑的妖精</h1><p>Guido的主要见解之一是代码被读取的次数多于其编写的次数。此处提供的指南旨在提高代码的可读性，并使其在各种Python代码中保持一致。正如PEP 20所说，“可读性至关重要”。</p><p>样式指南是关于一致性的。与该样式指南的一致性很重要。项目内的一致性更为重要。一个模块或功能内的一致性是最重要的。</p><p>但是，要知道什么时候不一致-有时样式指南的建议就不适用。如有疑问，请运用最佳判断。查看其他示例并确定最合适的方法。不要犹豫，问！</p><p>特别是：不要为了遵守本PEP而破坏向后兼容性！</p><p>其他一些忽略特定准则的充分理由：</p><ol><li>用指南时，即使对于那些习惯阅读遵循此PEP的代码的人来说，也会使代码的可读性降低。</li><li>为了与周围的代码一致（也可能是出于历史原因），该代码也会破坏它（尽管这也是清理别人的混乱的机会（采用真正的XP风格））。</li><li>由于所讨论的代码早于准则的引入，因此没有其他理由修改该代码。</li><li>当代码需要与不支持样式指南建议的功能的Python的较旧版本兼容时。</li></ol><h1 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a>代码布局</h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>每个缩进级别使用4个空格。</p><p>续行应该使用在括号，方括号和花括号内使用Python的隐式线垂直对齐包装的元素，或使用悬挂式缩进 [7]。使用悬挂式缩进时，应考虑以下几点：第一行不应包含任何参数，并且应使用进一步的缩进形式将其清楚地区分为延续行：</p><pre class="line-numbers language-none"><code class="language-none"># 正确：# 与开始的分隔符对齐。foo = long_function_name(var_one, var_two,                         var_three, var_four)# 添加4个空格（缩进的额外级别）以区分参数和其余参数。def long_function_name(        var_one, var_two, var_three,        var_four):    print(var_one)# 悬挂缩进应该增加一个层次。注意第一行不应包含参数foo = long_function_name(    var_one, var_two,    var_three, var_four)# 错误：# 当不使用垂直对齐时，禁止在第一行使用参数。foo = long_function_name(var_one, var_two,    var_three, var_four)# 由于缩进无法区分，因此需要进一步缩进。def long_function_name(    var_one, var_two, var_three,    var_four):    print(var_one)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于连续行，4空格规则是可选的。</p><p>可选的：</p><pre class="line-numbers language-none"><code class="language-none"># 悬挂缩进可以缩进不超过4个空格。foo = long_function_name(  var_one, var_two,  var_three, var_four)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当if语句的条件部分长到需要换行写的时候，注意可以在两个字符关键字的连接处（比如if），增加一个空格，再增加一个左括号来创造一个4空格缩进的多行条件。这会与if语句内同样使用4空格缩进的代码产生视觉冲突。PEP没有明确指明要如何区分i发的条件代码和内嵌代码。可使用的选项包括但不限于下面几种情况：</p><pre class="line-numbers language-none"><code class="language-none"># 没有额外的缩进。if (this_is_one_thing and    that_is_another_thing):    do_something()# 添加评论，这将在编辑器中提供一些区别# 支持语法突出显示。if (this_is_one_thing and    that_is_another_thing):    # Since both conditions are true, we can frobnicate.    do_something()# 在条件延续行上添加一些额外的缩进。if (this_is_one_thing        and that_is_another_thing):    do_something()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在多行结构中的大括号/中括号/小括号的右括号可以与内容对齐单独起一行作为最后一行的第一个字符，就像这样：</p><pre class="line-numbers language-none"><code class="language-none">my_list = [    1, 2, 3,    4, 5, 6,    ]result = some_function_that_takes_arguments(    'a', 'b', 'c',    'd', 'e', 'f',    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者也可以与多行结构的第一行第一个字符对齐，就像这样：</p><pre class="line-numbers language-none"><code class="language-none">my_list = [    1, 2, 3,    4, 5, 6,]result = some_function_that_takes_arguments(    'a', 'b', 'c',    'd', 'e', 'f',)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="制表符或空格？"><a href="#制表符或空格？" class="headerlink" title="[制表符或空格？]"></a>[制表符或空格？]</h2><p>空格是首选的缩进方法。</p><p>制表符应仅用于与已经用制表符缩进的代码保持一致。</p><p>Python 3不允许混合使用制表符和空格进行缩进。</p><p>缩进制表符和空格混合在一起的Python 2代码应转换为仅使用空格。</p><p>When invoking the Python 2 command line interpreter with the <code>-t</code> option, it issues warnings about code that illegally mixes tabs and spaces. When using <code>-tt</code> these warnings become errors. These options are highly recommended!</p><h2 id="Maximum-Line-Length"><a href="#Maximum-Line-Length" class="headerlink" title="Maximum Line Length"></a><a href="https://www.python.org/dev/peps/pep-0008/#id19">Maximum Line Length</a></h2><p>Limit all lines to a maximum of 79 characters.</p><p>For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.</p><p>Limiting the required editor window width makes it possible to have several files open side-by-side, and works well when using code review tools that present the two versions in adjacent columns.</p><p>The default wrapping in most tools disrupts the visual structure of the code, making it more difficult to understand. The limits are chosen to avoid wrapping in editors with the window width set to 80, even if the tool places a marker glyph in the final column when wrapping lines. Some web based tools may not offer dynamic line wrapping at all.</p><p>Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters.</p><p>The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72).</p><p>The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p><p>Backslashes may still be appropriate at times. For example, long, multiple <code>with</code>-statements cannot use implicit continuation, so backslashes are acceptable:</p><pre class="line-numbers language-none"><code class="language-none">with open('/path/to/some/file/you/want/to/read') as file_1, \     open('/path/to/some/file/being/written', 'w') as file_2:    file_2.write(file_1.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(See the previous discussion on <a href="https://www.python.org/dev/peps/pep-0008/#multiline-if-statements">multiline if-statements</a> for further thoughts on the indentation of such multiline <code>with</code>-statements.)</p><p>Another such case is with <code>assert</code> statements.</p><p>Make sure to indent the continued line appropriately.</p><h2 id="Should-a-Line-Break-Before-or-After-a-Binary-Operator"><a href="#Should-a-Line-Break-Before-or-After-a-Binary-Operator" class="headerlink" title="Should a Line Break Before or After a Binary Operator?"></a><a href="https://www.python.org/dev/peps/pep-0008/#id20">Should a Line Break Before or After a Binary Operator?</a></h2><p>For decades the recommended style was to break after binary operators. But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line. Here, the eye has to do extra work to tell which items are added and which are subtracted:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:# operators sit far away from their operandsincome = (gross_wages +          taxable_interest +          (dividends - qualified_dividends) -          ira_deduction -          student_loan_interest)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To solve this readability problem, mathematicians and their publishers follow the opposite convention. Donald Knuth explains the traditional rule in his <em>Computers and Typesetting</em> series: “Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations” [<a href="https://www.python.org/dev/peps/pep-0008/#id10">3]</a>.</p><p>Following the tradition from mathematics usually results in more readable code:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:# easy to match operators with operandsincome = (gross_wages          + taxable_interest          + (dividends - qualified_dividends)          - ira_deduction          - student_loan_interest)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth’s style is suggested.</p><h2 id="Blank-Lines"><a href="#Blank-Lines" class="headerlink" title="Blank Lines"></a><a href="https://www.python.org/dev/peps/pep-0008/#id21">Blank Lines</a></h2><p>Surround top-level function and class definitions with two blank lines.</p><p>Method definitions inside a class are surrounded by a single blank line.</p><p>Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).</p><p>Use blank lines in functions, sparingly, to indicate logical sections.</p><p>Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place.</p><h2 id="Source-File-Encoding"><a href="#Source-File-Encoding" class="headerlink" title="Source File Encoding"></a><a href="https://www.python.org/dev/peps/pep-0008/#id22">Source File Encoding</a></h2><p>Code in the core Python distribution should always use UTF-8 (or ASCII in Python 2).</p><p>Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have an encoding declaration.</p><p>In the standard library, non-default encodings should be used only for test purposes or when a comment or docstring needs to mention an author name that contains non-ASCII characters; otherwise, using <code>\x</code>, <code>\u</code>, <code>\U</code>, or <code>\N</code> escapes is the preferred way to include non-ASCII data in string literals.</p><p>For Python 3.0 and beyond, the following policy is prescribed for the standard library (see <a href="https://www.python.org/dev/peps/pep-3131">PEP 3131</a>): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren’t English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the Latin alphabet (latin-1, ISO/IEC 8859-1 character set) MUST provide a transliteration of their names in this character set.</p><p>Open source projects with a global audience are encouraged to adopt a similar policy.</p><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a><a href="https://www.python.org/dev/peps/pep-0008/#id23">Imports</a></h2><ul><li><p>Imports should usually be on separate lines:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:import osimport sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:import sys, os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It’s okay to say this though:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:from subprocess import Popen, PIPE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p><p>Imports should be grouped in the following order:</p><ol><li>Standard library imports.</li><li>Related third party imports.</li><li>Local application/library specific imports.</li></ol><p>You should put a blank line between each group of imports.</p></li><li><p>Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on <code>sys.path</code>):</p><pre class="line-numbers language-none"><code class="language-none">import mypkg.siblingfrom mypkg import siblingfrom mypkg.sibling import example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:</p><pre class="line-numbers language-none"><code class="language-none">from . import siblingfrom .sibling import example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Standard library code should avoid complex package layouts and always use absolute imports.</p><p>Implicit relative imports should <em>never</em> be used and have been removed in Python 3.</p></li><li><p>When importing a class from a class-containing module, it’s usually okay to spell this:</p><pre class="line-numbers language-none"><code class="language-none">from myclass import MyClassfrom foo.bar.yourclass import YourClass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If this spelling causes local name clashes, then spell them explicitly:</p><pre class="line-numbers language-none"><code class="language-none">import myclassimport foo.bar.yourclass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>and use “myclass.MyClass” and “foo.bar.yourclass.YourClass”.</p></li><li><p>Wildcard imports (<code>from  import *</code>) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn’t known in advance).</p><p>When republishing names this way, the guidelines below regarding public and internal interfaces still apply.</p></li></ul><h2 id="Module-Level-Dunder-Names"><a href="#Module-Level-Dunder-Names" class="headerlink" title="Module Level Dunder Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id24">Module Level Dunder Names</a></h2><p>Module level “dunders” (i.e. names with two leading and two trailing underscores) such as <code>__all__</code>, <code>__author__</code>, <code>__version__</code>, etc. should be placed after the module docstring but before any import statements <em>except</em> <code>from __future__</code> imports. Python mandates that future-imports must appear in the module before any other code except docstrings:</p><pre class="line-numbers language-none"><code class="language-none">"""This is the example module.This module does stuff."""from __future__ import barry_as_FLUFL__all__ = ['a', 'b', 'c']__version__ = '0.1'__author__ = 'Cardinal Biggles'import osimport sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="String-Quotes"><a href="#String-Quotes" class="headerlink" title="String Quotes"></a><a href="https://www.python.org/dev/peps/pep-0008/#id25">String Quotes</a></h1><p>In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. Pick a rule and stick to it. When a string contains single or double quote characters, however, use the other one to avoid backslashes in the string. It improves readability.</p><p>For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in <a href="https://www.python.org/dev/peps/pep-0257">PEP 257</a>.</p><h1 id="Whitespace-in-Expressions-and-Statements"><a href="#Whitespace-in-Expressions-and-Statements" class="headerlink" title="Whitespace in Expressions and Statements"></a><a href="https://www.python.org/dev/peps/pep-0008/#id26">Whitespace in Expressions and Statements</a></h1><h2 id="Pet-Peeves"><a href="#Pet-Peeves" class="headerlink" title="Pet Peeves"></a><a href="https://www.python.org/dev/peps/pep-0008/#id27">Pet Peeves</a></h2><p>Avoid extraneous whitespace in the following situations:</p><ul><li><p>Immediately inside parentheses, brackets or braces:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:spam(ham[1], {eggs: 2})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:spam( ham[ 1 ], { eggs: 2 } )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Between a trailing comma and a following close parenthesis:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:foo = (0,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:bar = (0, )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Immediately before a comma, semicolon, or colon:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if x == 4: print x, y; x, y = y, x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if x == 4 : print x , y ; x , y = y , x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]ham[lower:upper], ham[lower:upper:], ham[lower::step]ham[lower+offset : upper+offset]ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]ham[lower + offset : upper + offset]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:ham[lower + offset:upper + offset]ham[1: 9], ham[1 :9], ham[1:9 :3]ham[lower : : upper]ham[ : upper]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Immediately before the open parenthesis that starts the argument list of a function call:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:spam(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:spam (1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Immediately before the open parenthesis that starts an indexing or slicing:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:dct['key'] = lst[index]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:dct ['key'] = lst [index]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>More than one space around an assignment (or other) operator to align it with another:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:x = 1y = 2long_variable = 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:x             = 1y             = 2long_variable = 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Other-Recommendations"><a href="#Other-Recommendations" class="headerlink" title="Other Recommendations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id28">Other Recommendations</a></h2></li><li><p>Avoid trailing whitespace anywhere. Because it’s usually invisible, it can be confusing: e.g. a backslash followed by a space and a newline does not count as a line continuation marker. Some editors don’t preserve it and many projects (like CPython itself) have pre-commit hooks that reject it.</p></li><li><p>Always surround these binary operators with a single space on either side: assignment (<code>=</code>), augmented assignment (<code>+=</code>, <code>-=</code> etc.), comparisons (<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), Booleans (<code>and</code>, <code>or</code>, <code>not</code>).</p></li><li><p>If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:i = i + 1submitted += 1x = x*2 - 1hypot2 = x*x + y*yc = (a+b) * (a-b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:i=i+1submitted +=1x = x * 2 - 1hypot2 = x * x + y * yc = (a + b) * (a - b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Function annotations should use the normal rules for colons and always have spaces around the <code>-&gt;</code> arrow if present. (See <a href="https://www.python.org/dev/peps/pep-0008/#function-annotations">Function Annotations</a> below for more about function annotations.):</p><pre class="line-numbers language-none"><code class="language-none"># Correct:def munge(input: AnyStr): ...def munge() -&gt; PosInt: ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:def munge(input:AnyStr): ...def munge()-&gt;PosInt: ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Don’t use spaces around the <code>=</code> sign when used to indicate a keyword argument, or when used to indicate a default value for an <em>unannotated</em> function parameter:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:def complex(real, imag=0.0):    return magic(r=real, i=imag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:def complex(real, imag = 0.0):    return magic(r = real, i = imag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>When combining an argument annotation with a default value, however, do use spaces around the <code>=</code> sign:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:def munge(sep: AnyStr = None): ...def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:def munge(input: AnyStr=None): ...def munge(input: AnyStr, limit = 1000): ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Compound statements (multiple statements on the same line) are generally discouraged:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if foo == 'blah':    do_blah_thing()do_one()do_two()do_three()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rather not:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:if foo == 'blah': do_blah_thing()do_one(); do_two(); do_three()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>While sometimes it’s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements. Also avoid folding such long lines!</p><p>Rather not:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:if foo == 'blah': do_blah_thing()for x in lst: total += xwhile t &lt; 10: t = delay()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Definitely not:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:if foo == 'blah': do_blah_thing()else: do_non_blah_thing()try: something()finally: cleanup()do_one(); do_two(); do_three(long, argument,                             list, like, this)if foo == 'blah': one(); two(); three()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="When-to-Use-Trailing-Commas"><a href="#When-to-Use-Trailing-Commas" class="headerlink" title="When to Use Trailing Commas"></a><a href="https://www.python.org/dev/peps/pep-0008/#id29">When to Use Trailing Commas</a></h1></li></ul><p>Trailing commas are usually optional, except they are mandatory when making a tuple of one element (and in Python 2 they have semantics for the <code>print</code> statement). For clarity, it is recommended to surround the latter in (technically redundant) parentheses:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:FILES = ('setup.cfg',)# Wrong:FILES = 'setup.cfg',<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>When trailing commas are redundant, they are often helpful when a version control system is used, when a list of values, arguments or imported items is expected to be extended over time. The pattern is to put each value (etc.) on a line by itself, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line. However it does not make sense to have a trailing comma on the same line as the closing delimiter (except in the above case of singleton tuples):</p><pre class="line-numbers language-none"><code class="language-none"># Correct:FILES = [    'setup.cfg',    'tox.ini',    ]initialize(FILES,           error=True,           )# Wrong:FILES = ['setup.cfg', 'tox.ini',]initialize(FILES, error=True,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id30">Comments</a></h1><p>Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!</p><p>Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!).</p><p>Block comments generally consist of one or more paragraphs built out of complete sentences, with each sentence ending in a period.</p><p>You should use two spaces after a sentence-ending period in multi- sentence comments, except after the final sentence.</p><p>Ensure that your comments are clear and easily understandable to other speakers of the language you are writing in.</p><p>Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don’t speak your language.</p><h2 id="Block-Comments"><a href="#Block-Comments" class="headerlink" title="Block Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id31">Block Comments</a></h2><p>Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a <code>#</code> and a single space (unless it is indented text inside the comment).</p><p>Paragraphs inside a block comment are separated by a line containing a single <code>#</code>.</p><h2 id="Inline-Comments"><a href="#Inline-Comments" class="headerlink" title="Inline Comments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id32">Inline Comments</a></h2><p>Use inline comments sparingly.</p><p>An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space.</p><p>Inline comments are unnecessary and in fact distracting if they state the obvious. Don’t do this:</p><pre class="line-numbers language-none"><code class="language-none">x = x + 1                 # Increment x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>But sometimes, this is useful:</p><pre class="line-numbers language-none"><code class="language-none">x = x + 1                 # Compensate for border<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Documentation-Strings"><a href="#Documentation-Strings" class="headerlink" title="Documentation Strings"></a><a href="https://www.python.org/dev/peps/pep-0008/#id33">Documentation Strings</a></h2><p>Conventions for writing good documentation strings (a.k.a. “docstrings”) are immortalized in <a href="https://www.python.org/dev/peps/pep-0257">PEP 257</a>.</p><ul><li><p>Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the <code>def</code> line.</p></li><li><p><a href="https://www.python.org/dev/peps/pep-0257">PEP 257</a> describes good docstring conventions. Note that most importantly, the <code>"""</code> that ends a multiline docstring should be on a line by itself:</p><pre class="line-numbers language-none"><code class="language-none">"""Return a foobangOptional plotz says to frobnicate the bizbaz first."""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>For one liner docstrings, please keep the closing <code>"""</code> on the same line:</p><pre class="line-numbers language-none"><code class="language-none">"""Return an ex-parrot."""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Naming-Conventions"><a href="#Naming-Conventions" class="headerlink" title="Naming Conventions"></a><a href="https://www.python.org/dev/peps/pep-0008/#id34">Naming Conventions</a></h1></li></ul><p>The naming conventions of Python’s library are a bit of a mess, so we’ll never get this completely consistent – nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred.</p><h2 id="Overriding-Principle"><a href="#Overriding-Principle" class="headerlink" title="Overriding Principle"></a><a href="https://www.python.org/dev/peps/pep-0008/#id35">Overriding Principle</a></h2><p>Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.</p><h2 id="Descriptive-Naming-Styles"><a href="#Descriptive-Naming-Styles" class="headerlink" title="Descriptive: Naming Styles"></a><a href="https://www.python.org/dev/peps/pep-0008/#id36">Descriptive: Naming Styles</a></h2><p>There are a lot of different naming styles. It helps to be able to recognize what naming style is being used, independently from what they are used for.</p><p>The following naming styles are commonly distinguished:</p><ul><li><p><code>b</code> (single lowercase letter)</p></li><li><p><code>B</code> (single uppercase letter)</p></li><li><p><code>lowercase</code></p></li><li><p><code>lower_case_with_underscores</code></p></li><li><p><code>UPPERCASE</code></p></li><li><p><code>UPPER_CASE_WITH_UNDERSCORES</code></p></li><li><p><code>CapitalizedWords</code> (or CapWords, or CamelCase – so named because of the bumpy look of its letters [<a href="https://www.python.org/dev/peps/pep-0008/#id11">4]</a>). This is also sometimes known as StudlyCaps.</p><p>Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError.</p></li><li><p><code>mixedCase</code> (differs from CapitalizedWords by initial lowercase character!)</p></li><li><p><code>Capitalized_Words_With_Underscores</code> (ugly!)</p></li></ul><p>There’s also the style of using a short unique prefix to group related names together. This is not used much in Python, but it is mentioned for completeness. For example, the <code>os.stat()</code> function returns a tuple whose items traditionally have names like <code>st_mode</code>, <code>st_size</code>, <code>st_mtime</code> and so on. (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)</p><p>The X11 library uses a leading X for all its public functions. In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name.</p><p>In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):</p><ul><li><p><code>_single_leading_underscore</code>: weak “internal use” indicator. E.g. <code>from M import *</code> does not import objects whose names start with an underscore.</p></li><li><p><code>single_trailing_underscore_</code>: used by convention to avoid conflicts with Python keyword, e.g.</p><pre class="line-numbers language-none"><code class="language-none">tkinter.Toplevel(master, class_='ClassName')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>__double_leading_underscore</code>: when naming a class attribute, invokes name mangling (inside class FooBar, <code>__boo</code> becomes <code>_FooBar__boo</code>; see below).</p></li><li><p><code>__double_leading_and_trailing_underscore__</code>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>, <code>__import__</code> or <code>__file__</code>. Never invent such names; only use them as documented.</p></li></ul><h2 id="Prescriptive-Naming-Conventions"><a href="#Prescriptive-Naming-Conventions" class="headerlink" title="Prescriptive: Naming Conventions"></a><a href="https://www.python.org/dev/peps/pep-0008/#id37">Prescriptive: Naming Conventions</a></h2><h3 id="Names-to-Avoid"><a href="#Names-to-Avoid" class="headerlink" title="Names to Avoid"></a><a href="https://www.python.org/dev/peps/pep-0008/#id38">Names to Avoid</a></h3><p>Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names.</p><p>In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use ‘l’, use ‘L’ instead.</p><h3 id="ASCII-Compatibility"><a href="#ASCII-Compatibility" class="headerlink" title="ASCII Compatibility"></a><a href="https://www.python.org/dev/peps/pep-0008/#id39">ASCII Compatibility</a></h3><p>Identifiers used in the standard library must be ASCII compatible as described in the <a href="https://www.python.org/dev/peps/pep-3131/#policy-specification">policy section</a> of <a href="https://www.python.org/dev/peps/pep-3131">PEP 3131</a>.</p><h3 id="Package-and-Module-Names"><a href="#Package-and-Module-Names" class="headerlink" title="Package and Module Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id40">Package and Module Names</a></h3><p>Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.</p><p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. <code>_socket</code>).</p><h3 id="Class-Names"><a href="#Class-Names" class="headerlink" title="Class Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id41">Class Names</a></h3><p>Class names should normally use the CapWords convention.</p><p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p><p>Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants.</p><h3 id="Type-Variable-Names"><a href="#Type-Variable-Names" class="headerlink" title="Type Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id42">Type Variable Names</a></h3><p>Names of type variables introduced in <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> should normally use CapWords preferring short names: <code>T</code>, <code>AnyStr</code>, <code>Num</code>. It is recommended to add suffixes <code>_co</code> or <code>_contra</code> to the variables used to declare covariant or contravariant behavior correspondingly:</p><pre class="line-numbers language-none"><code class="language-none">from typing import TypeVarVT_co = TypeVar('VT_co', covariant=True)KT_contra = TypeVar('KT_contra', contravariant=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Exception-Names"><a href="#Exception-Names" class="headerlink" title="Exception Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id43">Exception Names</a></h3><p>Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix “Error” on your exception names (if the exception actually is an error).</p><h3 id="Global-Variable-Names"><a href="#Global-Variable-Names" class="headerlink" title="Global Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id44">Global Variable Names</a></h3><p>(Let’s hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions.</p><p>Modules that are designed for use via <code>from M import *</code> should use the <code>__all__</code> mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are “module non-public”).</p><h3 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a><a href="https://www.python.org/dev/peps/pep-0008/#id45">Function and Variable Names</a></h3><p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p><p>Variable names follow the same convention as function names.</p><p>mixedCase is allowed only in contexts where that’s already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p><h3 id="Function-and-Method-Arguments"><a href="#Function-and-Method-Arguments" class="headerlink" title="Function and Method Arguments"></a><a href="https://www.python.org/dev/peps/pep-0008/#id46">Function and Method Arguments</a></h3><p>Always use <code>self</code> for the first argument to instance methods.</p><p>Always use <code>cls</code> for the first argument to class methods.</p><p>If a function argument’s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p><h3 id="Method-Names-and-Instance-Variables"><a href="#Method-Names-and-Instance-Variables" class="headerlink" title="Method Names and Instance Variables"></a><a href="https://www.python.org/dev/peps/pep-0008/#id47">Method Names and Instance Variables</a></h3><p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.</p><p>Use one leading underscore only for non-public methods and instance variables.</p><p>To avoid name clashes with subclasses, use two leading underscores to invoke Python’s name mangling rules.</p><p>Python mangles these names with the class name: if class Foo has an attribute named <code>__a</code>, it cannot be accessed by <code>Foo.__a</code>. (An insistent user could still gain access by calling <code>Foo._Foo__a</code>.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed.</p><p>Note: there is some controversy about the use of __names (see below).</p><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a><a href="https://www.python.org/dev/peps/pep-0008/#id48">Constants</a></h3><p>Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p><h3 id="Designing-for-Inheritance"><a href="#Designing-for-Inheritance" class="headerlink" title="Designing for Inheritance"></a><a href="https://www.python.org/dev/peps/pep-0008/#id49">Designing for Inheritance</a></h3><p>Always decide whether a class’s methods and instance variables (collectively: “attributes”) should be public or non-public. If in doubt, choose non-public; it’s easier to make it public later than to make a public attribute non-public.</p><p>Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backwards incompatible changes. Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won’t change or even be removed.</p><p>We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work).</p><p>Another category of attributes are those that are part of the “subclass API” (often called “protected” in other languages). Some classes are designed to be inherited from, either to extend or modify aspects of the class’s behavior. When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class.</p><p>With this in mind, here are the Pythonic guidelines:</p><ul><li><p>Public attributes should have no leading underscores.</p></li><li><p>If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name. This is preferable to an abbreviation or corrupted spelling. (However, notwithstanding this rule, ‘cls’ is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)</p><p>Note 1: See the argument name recommendation above for class methods.</p></li><li><p>For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods. Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior. In that case, use properties to hide functional implementation behind simple data attribute access syntax.</p><p>Note 1: Properties only work on new-style classes.</p><p>Note 2: Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine.</p><p>Note 3: Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap.</p></li><li><p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name.</p><p>Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions.</p><p>Note 2: Name mangling can make certain uses, such as debugging and <code>__getattr__()</code>, less convenient. However the name mangling algorithm is well documented and easy to perform manually.</p><p>Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p></li></ul><h2 id="Public-and-Internal-Interfaces"><a href="#Public-and-Internal-Interfaces" class="headerlink" title="Public and Internal Interfaces"></a><a href="https://www.python.org/dev/peps/pep-0008/#id50">Public and Internal Interfaces</a></h2><p>Any backwards compatibility guarantees apply only to public interfaces. Accordingly, it is important that users be able to clearly distinguish between public and internal interfaces.</p><p>Documented interfaces are considered public, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. All undocumented interfaces should be assumed to be internal.</p><p>To better support introspection, modules should explicitly declare the names in their public API using the <code>__all__</code> attribute. Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p><p>Even with <code>__all__</code> set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still be prefixed with a single leading underscore.</p><p>An interface is also considered internal if any containing namespace (package, module or class) is considered internal.</p><p>Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module’s API, such as <code>os.path</code> or a package’s <code>__init__</code> module that exposes functionality from submodules.</p><h1 id="Programming-Recommendations"><a href="#Programming-Recommendations" class="headerlink" title="Programming Recommendations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id51">Programming Recommendations</a></h1><ul><li><p>Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such).</p><p>For example, do not rely on CPython’s efficient implementation of in-place string concatenation for statements in the form <code>a += b</code> or <code>a = a + b</code>. This optimization is fragile even in CPython (it only works for some types) and isn’t present at all in implementations that don’t use refcounting. In performance sensitive parts of the library, the <code>''.join()</code> form should be used instead. This will ensure that concatenation occurs in linear time across various implementations.</p></li><li><p>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</p><p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> – e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context!</p></li><li><p>Use <code>is not</code> operator rather than <code>not ... is</code>. While both expressions are functionally identical, the former is more readable and preferred:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if foo is not None:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if not foo is None:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>When implementing ordering operations with rich comparisons, it is best to implement all six operations (<code>__eq__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, <code>__ge__</code>) rather than relying on other code to only exercise a particular comparison.</p><p>To minimize the effort involved, the <code>functools.total_ordering()</code> decorator provides a tool to generate missing comparison methods.</p><p><a href="https://www.python.org/dev/peps/pep-0207">PEP 207</a> indicates that reflexivity rules <em>are</em> assumed by Python. Thus, the interpreter may swap <code>y &gt; x</code> with <code>x &lt; y</code>, <code>y &gt;= x</code> with <code>x &lt;= y</code>, and may swap the arguments of <code>x == y</code> and <code>x != y</code>. The <code>sort()</code> and <code>min()</code> operations are guaranteed to use the <code>&lt;</code> operator and the <code>max()</code> function uses the <code>&gt;</code> operator. However, it is best to implement all six operations so that confusion doesn’t arise in other contexts.</p></li><li><p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:def f(x): return 2*x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:f = lambda x: 2*x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The first form means that the name of the resulting function object is specifically ‘f’ instead of the generic ‘<lambda>‘. This is more useful for tracebacks and string representations in general. The use of the assignment statement eliminates the sole benefit a lambda expression can offer over an explicit def statement (i.e. that it can be embedded inside a larger expression)</lambda></p></li><li><p>Derive exceptions from <code>Exception</code> rather than <code>BaseException</code>. Direct inheritance from <code>BaseException</code> is reserved for exceptions where catching them is almost always the wrong thing to do.</p><p>Design exception hierarchies based on the distinctions that code <em>catching</em> the exceptions is likely to need, rather than the locations where the exceptions are raised. Aim to answer the question “What went wrong?” programmatically, rather than only stating that “A problem occurred” (see <a href="https://www.python.org/dev/peps/pep-3151">PEP 3151</a> for an example of this lesson being learned for the builtin exception hierarchy)</p><p>Class naming conventions apply here, although you should add the suffix “Error” to your exception classes if the exception is an error. Non-error exceptions that are used for non-local flow control or other forms of signaling need no special suffix.</p></li><li><p>Use exception chaining appropriately. In Python 3, “raise X from Y” should be used to indicate explicit replacement without losing the original traceback.</p><p>When deliberately replacing an inner exception (using “raise X” in Python 2 or “raise X from None” in Python 3.3+), ensure that relevant details are transferred to the new exception (such as preserving the attribute name when converting KeyError to AttributeError, or embedding the text of the original exception in the new exception message).</p></li><li><p>When raising an exception in Python 2, use <code>raise ValueError('message')</code> instead of the older form <code>raise ValueError, 'message'</code>.</p><p>The latter form is not legal Python 3 syntax.</p><p>The paren-using form also means that when the exception arguments are long or include string formatting, you don’t need to use line continuation characters thanks to the containing parentheses.</p></li><li><p>When catching exceptions, mention specific exceptions whenever possible instead of using a bare <code>except:</code> clause:</p><pre class="line-numbers language-none"><code class="language-none">try:    import platform_specific_moduleexcept ImportError:    platform_specific_module = None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>A bare <code>except:</code> clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use <code>except Exception:</code> (bare except is equivalent to <code>except BaseException:</code>).</p><p>A good rule of thumb is to limit use of bare ‘except’ clauses to two cases:</p><ol><li>If the exception handler will be printing out or logging the traceback; at least the user will be aware that an error has occurred.</li><li>If the code needs to do some cleanup work, but then lets the exception propagate upwards with <code>raise</code>. <code>try...finally</code> can be a better way to handle this case.</li></ol></li><li><p>When binding caught exceptions to a name, prefer the explicit name binding syntax added in Python 2.6:</p><pre class="line-numbers language-none"><code class="language-none">try:    process_data()except Exception as exc:    raise DataProcessingFailedError(str(exc))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This is the only syntax supported in Python 3, and avoids the ambiguity problems associated with the older comma-based syntax.</p></li><li><p>When catching operating system errors, prefer the explicit exception hierarchy introduced in Python 3.3 over introspection of <code>errno</code> values.</p></li><li><p>Additionally, for all try/except clauses, limit the <code>try</code> clause to the absolute minimum amount of code necessary. Again, this avoids masking bugs:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:try:    value = collection[key]except KeyError:    return key_not_found(key)else:    return handle_value(value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:try:    # Too broad!    return handle_value(collection[key])except KeyError:    # Will also catch KeyError raised by handle_value()    return key_not_found(key)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>When a resource is local to a particular section of code, use a <code>with</code> statement to ensure it is cleaned up promptly and reliably after use. A try/finally statement is also acceptable.</p></li><li><p>Context managers should be invoked through separate functions or methods whenever they do something other than acquire and release resources:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:with conn.begin_transaction():    do_stuff_in_transaction(conn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:with conn:    do_stuff_in_transaction(conn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The latter example doesn’t provide any information to indicate that the <code>__enter__</code> and <code>__exit__</code> methods are doing something other than closing the connection after a transaction. Being explicit is important in this case.</p></li><li><p>Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as <code>return None</code>, and an explicit return statement should be present at the end of the function (if reachable):</p><pre class="line-numbers language-none"><code class="language-none"># Correct:def foo(x):    if x &gt;= 0:        return math.sqrt(x)    else:        return Nonedef bar(x):    if x &lt; 0:        return None    return math.sqrt(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:def foo(x):    if x &gt;= 0:        return math.sqrt(x)def bar(x):    if x &lt; 0:        return    return math.sqrt(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Use string methods instead of the string module.</p><p>String methods are always much faster and share the same API with unicode strings. Override this rule if backwards compatibility with Pythons older than 2.0 is required.</p></li><li><p>Use <code>''.startswith()</code> and <code>''.endswith()</code> instead of string slicing to check for prefixes or suffixes.</p><p>startswith() and endswith() are cleaner and less error prone:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if foo.startswith('bar'):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if foo[:3] == 'bar':<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Object type comparisons should always use isinstance() instead of comparing types directly:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if isinstance(obj, int):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if type(obj) is type(1):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>When checking if an object is a string, keep in mind that it might be a unicode string too! In Python 2, str and unicode have a common base class, basestring, so you can do:</p></li></ul><pre class="line-numbers language-none"><code class="language-none">if isinstance(obj, basestring):<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Note that in Python 3, <code>unicode</code> and <code>basestring</code> no longer exist (there is only <code>str</code>) and a bytes object is no longer a kind of string (it is a sequence of integers instead).</p><ul><li><p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if not seq:if seq:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if len(seq):if not len(seq):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Don’t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them.</p></li><li><p>Don’t compare boolean values to True or False using <code>==</code>:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:if greeting:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:if greeting == True:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Worse:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:if greeting is True:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Use of the flow control statements <code>return</code>/<code>break</code>/<code>continue</code> within the finally suite of a <code>try...finally</code>, where the flow control statement would jump outside the finally suite, is discouraged. This is because such statements will implicitly cancel any active exception that is propagating through the finally suite:</p><pre class="line-numbers language-none"><code class="language-none"># Wrong:def foo():    try:        1 / 0    finally:        return 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id52">Function Annotations</a></h2></li></ul><p>With the acceptance of <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a>, the style rules for function annotations are changing.</p><ul><li><p>In order to be forward compatible, function annotations in Python 3 code should preferably use <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> syntax. (There are some formatting recommendations for annotations in the previous section.)</p></li><li><p>The experimentation with annotation styles that was recommended previously in this PEP is no longer encouraged.</p></li><li><p>However, outside the stdlib, experiments within the rules of <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> are now encouraged. For example, marking up a large third party library or application with <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> style type annotations, reviewing how easy it was to add those annotations, and observing whether their presence increases code understandability.</p></li><li><p>The Python standard library should be conservative in adopting such annotations, but their use is allowed for new code and for big refactorings.</p></li><li><p>For code that wants to make a different use of function annotations it is recommended to put a comment of the form:</p><pre class="line-numbers language-none"><code class="language-none"># type: ignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>near the top of the file; this tells type checker to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a>.)</p></li><li><p>Like linters, type checkers are optional, separate tools. Python interpreters by default should not issue any messages due to type checking and should not alter their behavior based on annotations.</p></li><li><p>Users who don’t want to use type checkers are free to ignore them. However, it is expected that users of third party library packages may want to run type checkers over those packages. For this purpose <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> recommends the use of stub files: .pyi files that are read by the type checker in preference of the corresponding .py files. Stub files can be distributed with a library, or separately (with the library author’s permission) through the typeshed repo [<a href="https://www.python.org/dev/peps/pep-0008/#id12">5]</a>.</p></li><li><p>For code that needs to be backwards compatible, type annotations can be added in the form of comments. See the relevant section of <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> [<a href="https://www.python.org/dev/peps/pep-0008/#id13">6]</a>.</p></li></ul><h2 id="Variable-Annotations"><a href="#Variable-Annotations" class="headerlink" title="Variable Annotations"></a><a href="https://www.python.org/dev/peps/pep-0008/#id53">Variable Annotations</a></h2><p><a href="https://www.python.org/dev/peps/pep-0526">PEP 526</a> introduced variable annotations. The style recommendations for them are similar to those on function annotations described above:</p><ul><li><p>Annotations for module level variables, class and instance variables, and local variables should have a single space after the colon.</p></li><li><p>There should be no space before the colon.</p></li><li><p>If an assignment has a right hand side, then the equality sign should have exactly one space on both sides:</p><pre class="line-numbers language-none"><code class="language-none"># Correct:code: intclass Point:    coords: Tuple[int, int]    label: str = '&lt;unknown&gt;'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># Wrong:code:int  # No space after coloncode : int  # Space before colonclass Test:    result: int=0  # No spaces around equality sign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Although the <a href="https://www.python.org/dev/peps/pep-0526">PEP 526</a> is accepted for Python 3.6, the variable annotation syntax is the preferred syntax for stub files on all versions of Python (see <a href="https://www.python.org/dev/peps/pep-0484">PEP 484</a> for details).</p></li></ul><p>Footnotes</p><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id3">7]</a></th><th><em>Hanging indentation</em> is a type-setting style where all the lines in a paragraph are indented except the first line. In the context of Python, the term is used to describe a style where the opening parenthesis of a parenthesized statement is the last non-whitespace character of the line, with subsequent lines being indented until the closing parenthesis.</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a><a href="https://www.python.org/dev/peps/pep-0008/#id54">References</a></h1><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id1">1]</a></th><th><a href="https://www.python.org/dev/peps/pep-0007">PEP 7</a>, Style Guide for C Code, van Rossum</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id2">2]</a></th><th>Barry’s GNU Mailman style guide <a href="http://barry.warsaw.us/software/STYLEGUIDE.txt">http://barry.warsaw.us/software/STYLEGUIDE.txt</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id4">3]</a></th><th>Donald Knuth’s <em>The TeXBook</em>, pages 195 and 196.</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id5">4]</a></th><th><a href="http://www.wikipedia.com/wiki/CamelCase">http://www.wikipedia.com/wiki/CamelCase</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id6">5]</a></th><th>Typeshed repo <a href="https://github.com/python/typeshed">https://github.com/python/typeshed</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>[<a href="https://www.python.org/dev/peps/pep-0008/#id7">6]</a></th><th>Suggested syntax for Python 2.7 and straddling code <a href="https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code">https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h1 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a><a href="https://www.python.org/dev/peps/pep-0008/#id55">Copyright</a></h1><p>This document has been placed in the public domain.</p><p>Source: <a href="https://github.com/python/peps/blob/master/pep-0008.txt">https://github.com/python/peps/blob/master/pep-0008.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定风波</title>
      <link href="/myhexo/2021/07/04/xue-xi/essay/ding-feng-bo/"/>
      <url>/myhexo/2021/07/04/xue-xi/essay/ding-feng-bo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定风波·莫听穿林打叶声"><a href="#定风波·莫听穿林打叶声" class="headerlink" title="定风波·莫听穿林打叶声"></a>定风波·莫听穿林打叶声</h1><p><a href="https://so.gushiwen.cn/authorv_3b99a16ff2dd.aspx">苏轼</a> <a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%AE%8B%E4%BB%A3">〔宋代〕</a></p><p>三月七日，沙湖道中遇雨，雨具先去，同行皆狼狈，余独不觉。已而遂晴，故作此。</p><p>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。<br>料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</p><p><strong>译文及注释</strong></p><p><strong>译文</strong><br>三月七日，在沙湖道上赶上了下雨，拿着雨具的仆人先前离开了，同行的人都觉得很狼狈，只有我不这么觉得。过了一会儿天晴了，就做了这首词。</p><p>不用注意那穿林打叶的雨声，何妨放开喉咙吟咏长啸从容而行。拄竹杖、穿芒鞋，走得比骑马还轻便，一身蓑衣任凭风吹雨打，照样过我的一生！<br>春风微凉吹醒我的酒意，微微有些冷，山头初晴的斜阳却应时相迎。回头望一眼走过来的风雨萧瑟的地方，我信步归去，不管它是风雨还是放晴。</p><p><strong>注释</strong><br>定风波：词牌名。<br>沙湖：在今湖北黄冈东南三十里，又名螺丝店。<br>狼狈：进退皆难的困顿窘迫之状。<br>已而：过了一会儿。<br>穿林打叶声：指大雨点透过树林打在树叶上的声音。<br>吟啸：吟咏长啸。<br>芒鞋：草鞋。<br>一蓑烟雨任平生：披着蓑衣在风雨里过一辈子也处之泰然。一蓑（suō）：蓑衣，用棕制成的雨披。<br>料峭：微寒的样子。<br>斜照：偏西的阳光。<br>向来：方才。萧瑟：风雨吹打树叶声。<br>也无风雨也无晴：意谓既不怕雨，也不喜晴。</p><p>此词作于<a href="https://so.gushiwen.cn/authorv_3b99a16ff2dd.aspx">苏轼</a>黄州之贬后的第三个春天。读罢全词，人生的沉浮、情感的忧乐，我们的理念中自会有一番全新的体悟。只要坚守自己的精神世界，顺境不骄，逆境不惧，就会少些烦恼，多些宁静和快乐。作者以风趣幽默的笔调写出途中遇雨所感所思，表达了乐观旷达的生活态度。</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitcoin</title>
      <link href="/myhexo/2021/05/31/sheng-huo/iknow/bitcoin/"/>
      <url>/myhexo/2021/05/31/sheng-huo/iknow/bitcoin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bitcoin"><a href="#Bitcoin" class="headerlink" title="Bitcoin"></a>Bitcoin</h1><iframe src="bitcoin.pdf" width="100%" height="900" frameborder="0" loading="lazy" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计思维</title>
      <link href="/myhexo/2021/05/26/ji-lu/she-ji-si-wei/"/>
      <url>/myhexo/2021/05/26/ji-lu/she-ji-si-wei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="设计思维"><a href="#设计思维" class="headerlink" title="设计思维"></a>设计思维</h2><p>设计思维是一种以人为本的创新方法，灵感来自设计师的方法和工具，它整合人的需求、技术的可能性以及实现商业成功所需的条件。</p><h4 id="—TIM-BROWN-IDEO董事长"><a href="#—TIM-BROWN-IDEO董事长" class="headerlink" title="—TIM BROWN, IDEO董事长"></a>—TIM BROWN, IDEO董事长</h4><p>像设计师一样思考可以转变企业组织开发产品、服务、流程和战略的方式。这套方法就是为人所知的设计思维，它把人的需求与技术的可行性和商业的永续性相整合。不仅如此，它还能让非设计出身的人们也能运用创新工具来解决各种挑战。</p><iframe src="https://static1.squarespace.com/static/57c6b79629687fde090a0fdd/t/5b19b2f2aa4a99e99b26b6bb/1528410876119/dschool_bootleg_deck_2018_final_sm+%282%29.pdf" width="100%" height="900" frameborder="0" loading="lazy" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> 设计思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why Explore Space?？</title>
      <link href="/myhexo/2021/05/24/xue-xi/essay/why-explore-space/"/>
      <url>/myhexo/2021/05/24/xue-xi/essay/why-explore-space/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Why-Explore-Space"><a href="#Why-Explore-Space" class="headerlink" title="Why Explore Space?"></a>Why Explore Space?</h1><p>In 1970, a <a href="http://en.wikipedia.org/wiki/Zambia">Zambia</a>-based nun named Sister Mary Jucunda wrote to <a href="http://en.wikipedia.org/wiki/Ernst_Stuhlinger">Dr. Ernst Stuhlinger</a>, then-associate director of science at NASA’s <a href="http://en.wikipedia.org/wiki/Marshall_Space_Flight_Center">Marshall Space Flight Center</a>, in response to his <a href="http://en.wikipedia.org/wiki/NERVA">ongoing research</a> into a piloted mission to <a href="http://en.wikipedia.org/wiki/Mars">Mars</a>. Specifically, she asked how he could suggest spending billions of dollars on such a project at a time when so many children were starving on Earth.</p><p>Stuhlinger soon sent the following letter of explanation to Sister Jucunda, along with a copy of “<a href="http://en.wikipedia.org/wiki/Earthrise">Earthrise</a>,” the iconic photograph of Earth taken in 1968 by astronaut William Anders, from the Moon (also embedded in the transcript). His thoughtful reply was later published by NASA, and titled, “Why Explore Space?”</p><p><em>(If</em> <em>you’d</em> <em>like to regularly receive these letters in your inbox, sign up</em> <em>for the</em> <em>Letters of Note</em> <em>newsletter</em> <em><a href="http://news.lettersofnote.com/">here</a>. Photo above: The surface of Mars, taken by <a href="http://en.wikipedia.org/wiki/Curiosity_rover">Curiosity</a> today, August 6th, 2012. Via <a href="http://www.nasa.gov/mission_pages/msl/multimedia/msl5.html">NASA</a>.</em>)</p><blockquote><p>May 6, 1970</p><p>Dear Sister Mary Jucunda:</p><p>Your letter was one of many which are reaching me every day, but it has touched me more deeply than all the others because it came so much from the depths of a searching mind and a compassionate heart. I will try to answer your question as best as I possibly can.</p><p>First, however, I would like to express my great admiration for you, and for all your many brave sisters, because you are dedicating your lives to the noblest cause of man: help for his fellowmen who are in need.</p><p>You asked in your letter how I could suggest the expenditures of billions of dollars for a voyage to Mars, at a time when many children on this Earth are starving to death. I know that you do not expect an answer such as “Oh, I did not know that there are children dying from hunger, but from now on I will desist from any kind of space research until mankind has solved that problem!” In fact, I have known of famined children long before I knew that a voyage to the planet Mars is technically feasible. However, I believe, like many of my friends, that travelling to the Moon and eventually to Mars and to other planets is a venture which we should undertake now, and I even believe that this project, in the long run, will contribute more to the solution of these grave problems we are facing here on Earth than many other potential projects of help which are debated and discussed year after year, and which are so extremely slow in yielding tangible results.</p><p>Before trying to describe in more detail how our space program is contributing to the solution of our Earthly problems, I would like to relate briefly a supposedly true story, which may help support the argument. About 400 years ago, there lived a count in a small town in Germany. He was one of the benign counts, and he gave a large part of his income to the poor in his town. This was much appreciated, because poverty was abundant during medieval times, and there were epidemics of the plague which ravaged the country frequently. One day, the count met a strange man. He had a workbench and little laboratory in his house, and he labored hard during the daytime so that he could afford a few hours every evening to work in his laboratory. He ground small lenses from pieces of glass; he mounted the lenses in tubes, and he used these gadgets to look at very small objects. The count was particularly fascinated by the tiny creatures that could be observed with the strong magnification, and which he had never seen before. He invited the man to move with his laboratory to the castle, to become a member of the count’s household, and to devote henceforth all his time to the development and perfection of his optical gadgets as a special employee of the count.</p><p>The townspeople, however, became angry when they realized that the count was wasting his money, as they thought, on a stunt without purpose. “We are suffering from this plague,” they said, “while he is paying that man for a useless hobby!” But the count remained firm. “I give you as much as I can afford,” he said, “but I will also support this man and his work, because I know that someday something will come out of it!”</p><p>Indeed, something very good came out of this work, and also out of similar work done by others at other places: the microscope. It is well known that the microscope has contributed more than any other invention to the progress of medicine, and that the elimination of the plague and many other contagious diseases from most parts of the world is largely a result of studies which the microscope made possible.</p><p>The count, by retaining some of his spending money for research and discovery, contributed far more to the relief of human suffering than he could have contributed by giving all he could possibly spare to his plague-ridden community.</p><p>The situation which we are facing today is similar in many respects. The President of the United States is spending about 200 billion dollars in his yearly budget. This money goes to health, education, welfare, urban renewal, highways, transportation, foreign aid, defense, conservation, science, agriculture and many installations inside and outside the country. About 1.6 percent of this national budget was allocated to space exploration this year. The space program includes Project Apollo, and many other smaller projects in space physics, space astronomy, space biology, planetary projects, Earth resources projects, and space engineering. To make this expenditure for the space program possible, the average American taxpayer with 10,000 dollars income per year is paying about 30 tax dollars for space. The rest of his income, 9,970 dollars, remains for his subsistence, his recreation, his savings, his other taxes, and all his other expenditures.</p><p>You will probably ask now: “Why don’t you take 5 or 3 or 1 dollar out of the 30 space dollars which the average American taxpayer is paying, and send these dollars to the hungry children?” To answer this question, I have to explain briefly how the economy of this country works. The situation is very similar in other countries. The government consists of a number of departments (Interior, Justice, Health, Education and Welfare, Transportation, Defense, and others) and the bureaus (National Science Foundation, National Aeronautics and Space Administration, and others). All of them prepare their yearly budgets according to their assigned missions, and each of them must defend its budget against extremely severe screening by congressional committees, and against heavy pressure for economy from the Bureau of the Budget and the President. When the funds are finally appropriated by Congress, they can be spent only for the line items specified and approved in the budget.</p><p>The budget of the National Aeronautics and Space Administration, naturally, can contain only items directly related to aeronautics and space. If this budget were not approved by Congress, the funds proposed for it would not be available for something else; they would simply not be levied from the taxpayer, unless one of the other budgets had obtained approval for a specific increase which would then absorb the funds not spent for space. You realize from this brief discourse that support for hungry children, or rather a support in addition to what the United States is already contributing to this very worthy cause in the form of foreign aid, can be obtained only if the appropriate department submits a budget line item for this purpose, and if this line item is then approved by Congress.</p><p>You may ask now whether I personally would be in favor of such a move by our government. My answer is an emphatic yes. Indeed, I would not mind at all if my annual taxes were increased by a number of dollars for the purpose of feeding hungry children, wherever they may live.</p><p>I know that all of my friends feel the same way. However, we could not bring such a program to life merely by desisting from making plans for voyages to Mars. On the contrary, I even believe that by working for the space program I can make some contribution to the relief and eventual solution of such grave problems as poverty and hunger on Earth. Basic to the hunger problem are two functions: the production of food and the distribution of food. Food production by agriculture, cattle ranching, ocean fishing and other large-scale operations is efficient in some parts of the world, but drastically deficient in many others. For example, large areas of land could be utilized far better if efficient methods of watershed control, fertilizer use, weather forecasting, fertility assessment, plantation programming, field selection, planting habits, timing of cultivation, crop survey and harvest planning were applied.</p><p>The best tool for the improvement of all these functions, undoubtedly, is the artificial Earth satellite. Circling the globe at a high altitude, it can screen wide areas of land within a short time; it can observe and measure a large variety of factors indicating the status and condition of crops, soil, droughts, rainfall, snow cover, etc., and it can radio this information to ground stations for appropriate use. It has been estimated that even a modest system of Earth satellites equipped with Earth resources, sensors, working within a program for worldwide agricultural improvements, will increase the yearly crops by an equivalent of many billions of dollars.</p><p>The distribution of the food to the needy is a completely different problem. The question is not so much one of shipping volume, it is one of international cooperation. The ruler of a small nation may feel very uneasy about the prospect of having large quantities of food shipped into his country by a large nation, simply because he fears that along with the food there may also be an import of influence and foreign power. Efficient relief from hunger, I am afraid, will not come before the boundaries between nations have become less divisive than they are today. I do not believe that space flight will accomplish this miracle over night. However, the space program is certainly among the most promising and powerful agents working in this direction.</p><p>Let me only remind you of the recent near-tragedy of Apollo 13. When the time of the crucial reentry of the astronauts approached, the Soviet Union discontinued all Russian radio transmissions in the frequency bands used by the Apollo Project in order to avoid any possible interference, and Russian ships stationed themselves in the Pacific and the Atlantic Oceans in case an emergency rescue would become necessary. Had the astronaut capsule touched down near a Russian ship, the Russians would undoubtedly have expended as much care and effort in their rescue as if Russian cosmonauts had returned from a space trip. If Russian space travelers should ever be in a similar emergency situation, Americans would do the same without any doubt.</p><p>Higher food production through survey and assessment from orbit, and better food distribution through improved international relations, are only two examples of how profoundly the space program will impact life on Earth. I would like to quote two other examples: stimulation of technological development, and generation of scientific knowledge.</p><p>The requirements for high precision and for extreme reliability which must be imposed upon the components of a moon-travelling spacecraft are entirely unprecedented in the history of engineering. The development of systems which meet these severe requirements has provided us a unique opportunity to find new material and methods, to invent better technical systems, to manufacturing procedures, to lengthen the lifetimes of instruments, and even to discover new laws of nature.</p><p>All this newly acquired technical knowledge is also available for application to Earth-bound technologies. Every year, about a thousand technical innovations generated in the space program find their ways into our Earthly technology where they lead to better kitchen appliances and farm equipment, better sewing machines and radios, better ships and airplanes, better weather forecasting and storm warning, better communications, better medical instruments, better utensils and tools for everyday life. Presumably, you will ask now why we must develop first a life support system for our moon-travelling astronauts, before we can build a remote-reading sensor system for heart patients. The answer is simple: significant progress in the solutions of technical problems is frequently made not by a direct approach, but by first setting a goal of high challenge which offers a strong motivation for innovative work, which fires the imagination and spurs men to expend their best efforts, and which acts as a catalyst by including chains of other reactions.</p><p>Spaceflight without any doubt is playing exactly this role. The voyage to Mars will certainly not be a direct source of food for the hungry. However, it will lead to so many new technologies and capabilities that the spin-offs from this project alone will be worth many times the cost of its implementation.</p><p>Besides the need for new technologies, there is a continuing great need for new basic knowledge in the sciences if we wish to improve the conditions of human life on Earth. We need more knowledge in physics and chemistry, in biology and physiology, and very particularly in medicine to cope with all these problems which threaten man’s life: hunger, disease, contamination of food and water, pollution of the environment.</p><p>We need more young men and women who choose science as a career and we need better support for those scientists who have the talent and the determination to engage in fruitful research work. Challenging research objectives must be available, and sufficient support for research projects must be provided. Again, the space program with its wonderful opportunities to engage in truly magnificent research studies of moons and planets, of physics and astronomy, of biology and medicine is an almost ideal catalyst which induces the reaction between the motivation for scientific work, opportunities to observe exciting phenomena of nature, and material support needed to carry out the research effort.</p><p>Among all the activities which are directed, controlled, and funded by the American government, the space program is certainly the most visible and probably the most debated activity, although it consumes only 1.6 percent of the total national budget, and 3 per mille (less than one-third of 1 percent) of the gross national product. As a stimulant and catalyst for the development of new technologies, and for research in the basic sciences, it is unparalleled by any other activity. In this respect, we may even say that the space program is taking over a function which for three or four thousand years has been the sad prerogative of wars.</p><p>How much human suffering can be avoided if nations, instead of competing with their bomb-dropping fleets of airplanes and rockets, compete with their moon-travelling space ships! This competition is full of promise for brilliant victories, but it leaves no room for the bitter fate of the vanquished, which breeds nothing but revenge and new wars.</p><p>Although our space program seems to lead us away from our Earth and out toward the moon, the sun, the planets, and the stars, I believe that none of these celestial objects will find as much attention and study by space scientists as our Earth. It will become a better Earth, not only because of all the new technological and scientific knowledge which we will apply to the betterment of life, but also because we are developing a far deeper appreciation of our Earth, of life, and of man.</p><p><img src="https://i2.wp.com/lettersofnote.com/wp-content/uploads/2012/08/7724458444_0e91f569b3_o.jpg?resize=300,217&amp;ssl=1" alt="img"></p><p>The photograph which I enclose with this letter shows a view of our Earth as seen from Apollo 8 when it orbited the moon at Christmas, 1968. Of all the many wonderful results of the space program so far, this picture may be the most important one. It opened our eyes to the fact that our Earth is a beautiful and most precious island in an unlimited void, and that there is no other place for us to live but the thin surface layer of our planet, bordered by the bleak nothingness of space. Never before did so many people recognize how limited our Earth really is, and how perilous it would be to tamper with its ecological balance. Ever since this picture was first published, voices have become louder and louder warning of the grave problems that confront man in our times: pollution, hunger, poverty, urban living, food production, water control, overpopulation. It is certainly not by accident that we begin to see the tremendous tasks waiting for us at a time when the young space age has provided us the first good look at our own planet.</p><p>Very fortunately though, the space age not only holds out a mirror in which we can see ourselves, it also provides us with the technologies, the challenge, the motivation, and even with the optimism to attack these tasks with confidence. What we learn in our space program, I believe, is fully supporting what Albert Schweitzer had in mind when he said: “I am looking at the future with concern, but with good hope.”</p><p>My very best wishes will always be with you, and with your children.</p><p>Very sincerely yours,</p><p>Ernst Stuhlinger</p><p>Associate Director for Science</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> NASA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NASA：为什么要探索宇宙？</title>
      <link href="/myhexo/2021/05/24/xue-xi/essay/nasa-wei-shi-me-yao-tan-suo-yu-zhou/"/>
      <url>/myhexo/2021/05/24/xue-xi/essay/nasa-wei-shi-me-yao-tan-suo-yu-zhou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NASA：为什么要探索宇宙？"><a href="#NASA：为什么要探索宇宙？" class="headerlink" title="NASA：为什么要探索宇宙？"></a>NASA：为什么要探索宇宙？</h2><p>1970年，赞比亚修女 Mary Jucunda 给 Ernst Stuhlinger 博士写了一封信，他因在火星之旅工程中的原创性研究，成为 NASA(美国航空航天局)Marshall 太空航行中心的科学副总监。信中，Mary Jucunda 修女问道：目前地球上还有这么多小孩子吃不上饭，他怎么能舍得为远在火星的项目花费数十亿美元。<br>　　Stuhlinger 很快给Jucunda 修女回了信，同时还附带了一张题为”升起的地球”的照片，这张标志性的照片是宇航员 William Anders 于1968年在月球轨道上拍摄的(照片中可以看到月球的地面)。他这封真挚的回信随后由 NASA 以《为什么要探索宇宙》为标题发表。</p><p>　　亲爱的Mary Jucunda修女：<br>　　每天，我都会收到很多类似的来信，但这封对我的触动最深，因为它来自一颗慈悲的饱含探求精神的心灵。我会尽自己所能来回答你这个问题。<br>　　首先，请允许我向你以及你勇敢的姐妹们表达深深的敬意，你们献身于人类最崇高的事业：帮助身处困境的同胞。<br>　　在来信中，你问我在目前地球上还有儿童由于饥饿面临死亡威胁的情况下，为什么还要花费数十亿美元来进行飞向火星的航行。我清楚你肯定不希望这样的答案：”哦，我之前不知道还有小孩子快饿死了，好吧，从现在开始，暂停所有的太空项目，直到孩子们都吃上饭再说。”事实上，早在人类的技术水平可以畅想火星之旅之前，我已经对儿童的饥荒问题有所了解。而且，同我很多朋友的看法一样，我认为此时此刻，我们就应该开始通往月球、火星乃至其他行星的伟大探险。从长远来看，相对于那些要么只有年复一年的辩论和争吵，要么连妥协之后也迟迟无法落实的各种援助计划来说，我甚至觉得探索太空的工程给更有助于解决人类目前所面临的种种危机。<br>　　在详细说明我们的太空项目如何帮助解决地面上的危机之前，我想先简短讲一个真实的故事。那是在400年前，德国某小镇里有一位伯爵。他是个心地善良的人，他将自己收入的一大部分捐给了镇子上的穷人。这十分令人钦佩，因为中世纪时穷人很多，而且那时经常爆发席卷全国的瘟疫。一天，伯爵碰到了一个奇怪的人，他家中有一个工作台和一个小实验室，他白天卖力工作，每天晚上的几小时的时间专心进行研究。他把小玻璃片研磨成镜片，然后把研磨好的镜片装到镜筒里，用此来观察细小的物件。伯爵被这个前所未见的可以把东西放大观察的小发明迷住了。他邀请这个怪人住到了他的城堡里，作为伯爵的门客，此后他可以专心投入所有的时间来研究这些光学器件。<br>　　然而，镇子上的人得知伯爵在这么一个怪人和他那些无用的玩意儿上花费金钱之后，都很生气。”我们还在受瘟疫的苦，”他们抱怨道，”而他却为那个闲人和他没用的爱好乱花钱！”伯爵听到后不为所动。”我会尽可能地接济大家，”他表示，”但我会继续资助这个人和他的工作，我确信终有一天会有回报。”<br>　　果不其然，他的工作(以及同时期其他人的努力)赢来了丰厚的回报：显微镜。显微镜的发明给医学带来了前所未有的发展，由此展开的研究及其成果，消除了世界上大部分地区肆虐的瘟疫和其他一些传染性疾病。<br>　　伯爵为支持这项研究发明所花费的金钱，其最终结果大大减轻了人类所遭受的苦难，这回报远远超过单纯将这些钱用来救济那些遭受瘟疫的人。<br>　　我们目前面临类似的问题。美国总统的年度预算共有2000亿美元，这些钱将用于医疗、教育、福利、城市建设、高速公路、交通运输、海外援助、国防、环保、科技、农业以及其他多项国内外的工程。今年，预算中的1.6%将用于探索宇宙，这些花销将用于阿波罗以计划、其他一些涵盖了天体物理学、深空天文学、空间生物学、行星探测工程、地球资源工程的小项目以及空间工程技术。为担负这些太空项目的支出，平均每个年收入10,000美元的美国纳税人需要支付约30美元给太空，剩下的9,970美元则可用于一般生活开支、休闲娱乐、储蓄、别的税项等花销。<br>　　也许你会问：”为什么不从纳税人为太空支付的30美元里抽出5美元或3美元或是1美元来救济饥饿的儿童呢？”为了回答这个问题，我需要先简单解释一下我们国家的经济是如何运行的，其他国家也是类似的情形。政府由几个部门(如内政部、司法部、卫生部与公众福利部、教育部、运输部、国防部等)和几个机构(国家科学基金会、国家航空航天局等)组成，这些部门和机构根据自己的职能制定相应的年度预算，并严格执行以应对国务委员会的监督，同时还要应付来自预算部门和总统对于其经济效益的压力。当资金最终由国会拨出后，将严格用于经预算批准的计划中的项目。<br>　　显然，NASA的预算中所包含的项目都是和航空航天有关的。未经国会批准的预算项目，是不会得到资金支持的，自然也不会被课税，除非有其他部门的预算涵盖了该项目，借此花掉没有分配给太空项目的资金。由这段简短的说明可以看出，要想援助饥饿的儿童，或在美国已有的对外援助项目上增加援助金额，需要首先由相关部门提出预算，然后由国会批准才行。<br>　　要问是否同意政府实施类似的政策，我个人的意见是绝对赞成。我完全不介意每年多付出一点点税款来帮助饥饿的儿童，无论他们身在何处。<br>　　我相信我的朋友们也会持相同的态度。然而，事情并不是仅靠把去往火星航行的计划取消就能轻易实现的。相对的，我甚至认为可以通过太空项目，来为缓解乃至最终解决地球上的贫穷和饥饿问题作出贡献。解决饥饿问题的关键有两部分：食物的生产和食物的发放。食物的生产所涉及的农业、畜牧业、渔业及其他大规模生产活动在世界上的一些地区高效高产，而在有的地区则产量严重不足。通过高科技手段，如灌溉管理，肥料的使用，天气预报，产量评估，程序化种植，农田优选，作物的习性与耕作时间选择，农作物调查及收割计划，可以显著提高土地的生产效率。<br>　　人造地球卫星无疑是改进这两个关键问题最有力的工具。在远离地面的运行轨道上，卫星能够在很短的时间里扫描大片的陆地，可以同时观察计算农作物生长所需要的多项指标，土壤、旱情、雨雪天气等等，并且可以将这些信息广播至地面接收站以便做进一步处理。事实证明，配备有土地资源传感器及相应的农业程序的人造卫星系统，即便是最简单的型号，也能给农作物的年产量带来数以十亿美元计的提升。<br>　　如何将食品发放给需要的人则是另外一个全新的问题，关键不在于轮船的容量，而在于国际间的合作。小国统治者对于来自大国的大量食品的输入会感到很困扰，他们害怕伴随着食物一同而来的还有外国势力对其统治地位的影响。恐怕在国与国之间消除隔阂之前，饥饿问题无法得以高效解决了。我不认为太空计划能一夜之间创造奇迹，然而，探索宇宙有助于促使问题向着良好的方向发展。<br>　　以最近发生的阿波罗13号事故为例。当宇航员处于关键的大气层再入期时，为了保证通讯畅通，苏联关闭了境内与阿波罗飞船所用频带相同的所有广播通信。同时派出舰艇到太平洋和大西洋海域以备第一时间进行搜救工作。如果宇航员的救生舱降落到俄方舰船附近，俄方人员会像对待从太空返回的本国宇航员一样对他们进行救助。同样，如果俄方的宇宙飞船遇到了类似的紧急情况，美国也一定会毫不犹豫地提供援助。<br>　　通过卫星进行监测与分析来提高食品产量，以及通过改善国际关系提高食品发放的效率，只是通过太空项目提高人类生活质量的两个方面。下面我想介绍另外两个重要作用：促进科学技术的发展和提高一代人的科学素养。<br>　　登月工程需要历史上前所未有的高精度和高可靠性。面对如此严苛的要求，我们要寻找新材料，新方法；开发出更好的工程系统；用更可靠的制作流程；让仪器的工作寿命更长久；甚至需要探索全新的自然规律。<br>　　这些为登月发明的新技术同样可以用于地面上的工程项目。每年，都有大概一千项从太空项目中发展出来的新技术被用于日常生活中，这些技术打造出更好的厨房用具和农场设备，更好的缝纫机和收音机，更好的轮船和飞机，更精确的天气预报和风暴预警，更好的通讯设施，更好的医疗设备，乃至更好的日常小工具。你可能会问，为什么先设计出宇航员登月舱的维生系统，而不是先为心脏病患者造出远程体征监测设备呢。答案很简单：解决工程问题时，重要的技术突破往往并不是按部就班直接得到的，而是来自能够激发出强大创新精神，能够燃起的想象力和坚定的行动力，以及能够整合好所有资源的充满挑战的目标。<br>　　太空旅行无可置疑地是一项充满挑战的事业。通往火星的航行并不能直接提供食物解决饥荒问题。然而，它所带来大量的新技术和新方法可以用在火星项目之外，这将产生数倍于原始花费的收益。<br>　　若希望人类生活得越来越好，除了需要新的技术，我们还需要基础科学不断有新的进展。包括物理学和化学，生物学和生理学，特别是医学，用来照看人类的健康，应对饥饿、疾病、食物和水的污染以及环境污染等问题。<br>　　我们需要更多的年轻人投入到科学事业中来，我们需要给予那些投身科研事业的有天分的科学家更多的帮助。随时要有富于挑战的研究项目，同时要保证对项目给予充分的资源支持。在此我要重申，太空项目是科技进步的催化剂，它为学术研究工作提供了绝佳和实践机会，包括对月球和其他行星的研究、物理学和天文学、生物学和医学科学等学科，有它，科学界源源不断出现令人激动不已研究课题，人类得以窥见宇宙无比瑰丽的景象；为了它，新技术新方法不断涌现。<br>　　由美国政府控制并提供资金支持的所有活动中，太空项目无疑最引人瞩目也最容易引起争议，尽管其仅占全部预算的1.6%，不到全民生产总值的千分之三。作为新技术的驱动者和催化剂，太空项目开展了多项基础科学的研究，它的地位注定不同于其他活动。从某种意义上来说，以太空项目的对社会的影响，其地位相当于3-4千年前的战争活动。<br>　　如果国家之间不再比拼轰炸机和远程导弹，取而代之比拼月球飞船的性能，那将避免多少战乱之苦！聪慧的胜利者将满怀希望，失败者也不用饱尝痛苦，不再埋下仇恨的种子，不再带来复仇的战争。<br>　　尽管我们开展的太空项目研究的东西离地球很遥远，已经将人类的视野延伸至月亮、至太阳、至星球、直至那遥远的星辰，但天文学家对地球的关注，超过以上所有天外之物。太空项目带来的不仅有那些新技术所提供的生活品质的提升，随着对宇宙研究的深入，我们对地球，对生命，对人类自身的感激之情将越深。太空探索让地球更美好。</p><p>　　随信一块寄出的这张照片，是1968年圣诞节那天阿波罗8号在环月球轨道上拍摄的地球的景象。太空项目所能带来的各种结果中，这张照片也许是其中最可贵的一项。它开阔了人类的视野，让我们如此直观地感受到地球是广阔无垠的宇宙中如此美丽而又珍贵的孤岛，同时让我们认识到地球是我们唯一的家园，离开地球就是荒芜阴冷的外太空。无论在此之前人们对地球的了解是多么的有限，对于破坏生态平衡的严重后果的认识是多么的不充分。在这张照片公开发表之后，面对人类目前所面临的种种严峻形势，如环境污染、饥饿、贫穷、过度城市化、粮食问题、水资源问题、人口问题等等，号召大家正视这些严重问题的呼声越来越多。人们突然表示出对自身问题的关注，不能说和目前正在进行的这些初期太空探索项目，以及它所带来的对于人类自身家园的全新视角无关。<br>　　太空探索不仅仅给人类提供一面审视自己的镜子，它还能给我们带来全新的技术，全新的挑战和进取精神，以及面对严峻现实问题时依然乐观自信的心态。我相信，人类从宇宙中学到的，充分印证了Albert Schweitzer那句名言：”我忧心忡忡地看待未来，但仍满怀美好的希望。”<br>　　向您和您的孩子们致以我最真挚的敬意！<br>　　您诚挚的，<br>　　恩斯特·史都林格<br>　　科学副总监</p><p>　　1970年5月6日</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> NASA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平凡的日子需要一束光，在有趣的地方和可爱的人。—2021年5月15日房山片区活动总结</title>
      <link href="/myhexo/2021/05/15/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-5-yue-15-ri-fang-shan/"/>
      <url>/myhexo/2021/05/15/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-5-yue-15-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老义工： 丽、川姐姐、E3，戏浪小生、胖龙、金蟾格格、安羽、翠小花、梅子、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>五一假期暂停了几次活动，这周又重启，周末没有其他安排的义工们又积极地报名了，或者本来的安排就是参加义工联的活动，每周有一个可以用来调节生活节奏的事情去做是很特别的，尤其是很有意义的事情更值得坚持。</p><p>报了名的义工们陆续到了活动点，聚在一起谈天说地，说到地发现院子里很有必要打扫一下，胖龙和小生就立即行动起来，没用多久就把院子的几个分区打扫了一遍。</p><p>前段时间来得比较少的胖龙这周来了，还给大家带来了他的喜糖，又一位好义工成家了，恭喜恭喜，百年好合。胖龙脸上洋溢着满满的幸福，义工们也送上最诚挚的祝福，喜糖很甜。</p><p>接下来说一下活动的情况，义工和孩子的人数相当，所以每位小朋友都有小哥哥或者小姐姐陪伴左右，这次活动主要是玩积木，偶尔会做一些小游戏，孩子们的世界总是很简单，一个简单的游戏就可以玩一下午，并且玩得还不亦乐乎，忘乎所以，甚至呼朋引伴地一起来玩。孩子们各有各的特点，有的能动性特别强，根本坐不下来，时不时地跑到旁边的桌子抢几块积木回来。有的孩子就比较安静，对事物看得很淡，即使有人过来拿他的积木也不争不抢，来去自然。</p><p>时间过得很快，两个小时不知不觉在欢笑声度过了，这次的活动也该结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随手抓住一阵风，便是整个春天！——2021年3月27日房山活动总结</title>
      <link href="/myhexo/2021/03/30/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-27-ri-fang-shan/"/>
      <url>/myhexo/2021/03/30/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-27-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>义工： 丽、九方墀、川姐姐、田喜悦的巧克力、金蟾格格、梅子、安羽、刘丽波、E3、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>天气渐渐暖起来了，也该去户外踏青了，春暖花开的季节，到处充满着生命的力量。在去康复训练中心的路上能看到好几处公园的人都前几周多了不少，有些是一家老小在公园里悠闲地散步，有些是三五好友结伴而逛，也有些是团体组织的各种活动，春天是个活动筋骨的时光，从冬天的寒冷到夏天的炎热这是一个舒适的过渡期，尽管过渡期很短，但有些事你用心去做，用心记录下来，你便拥有了整个春天。</p><p>房山片区的活动点路途比较远，有些义工还没吃中午饭就出发了，但还是可能会迟到，尤其是坐错车就更慢了。去活动点有一趟公交车是快901，如果坐成901就会慢很长时间，也就等于迟到了。所幸的是义工们都是老义工，不用出多大差错，最多就是慢慢欣赏一下路上的风光。</p><p>这次活动主要是和小孩子们搭积木了，其中也有些大孩子和义工们一起玩纸牌游戏，孩子们对义工们都很熟悉，所以也不拘束，直来直去，配合默契，玩得不亦乐乎。纸牌的规则我是没搞懂，可能这规则比较复杂，也可能规则是根据孩子们的心情变换的。孩子们搭积木也有高手，不一会儿就组合了一个又一个形状。拼的积木中有一个像是头文字D的场景，爱车的小男孩儿们争着拼，义工们也帮忙拼，折腾了好长时间没拼好。最后还是孩子们拿着包装盒指挥着拼完成。</p><p>时间过得很快，E3姐用相机记录着整个活动过程，照片很棒，义工和孩子们的笑脸是最直接的体现。一个充实的下午，一次欢乐的活动，一场美好的相聚。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六顶思考帽</title>
      <link href="/myhexo/2021/03/28/xue-xi/reading/liu-ding-si-kao-mao/"/>
      <url>/myhexo/2021/03/28/xue-xi/reading/liu-ding-si-kao-mao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>六顶思考帽</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：[英] 爱德华 德博诺 著    马睿 译<br>出版社：中信出版集团</p><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><p>30年前，全球顶尖创新思维训练法的开创者–爱德华 德博诺提出“六顶思考帽”思维方法，用六顶不同颜色的帽子，代表六种创新思维方式。</p><ul><li>蓝色： 象征着思维中的控制与组织</li><li>白色： 客观、全面收集信息</li><li>红色： 从感情、直觉感性地看问题</li><li>黄色： 寻找事物的优点及光明面</li><li>黑色： 从事物的缺点、隐患看待问题</li><li>绿色： 用创新思维考虑问题</li></ul><p>“六顶思考帽”强调的是一个非常简单的概念，它只允许思考者在同一时间做一件事情。思考者要学会将逻辑与感情、创造与信息等区分开来。这一概念就是“六顶思考帽”的方法。任意一顶帽子都代表着一种特定类型的思维方式。</p><p>优秀团队和普通团队在集体智慧方面差异并不大，但在如何引导和激发集体智慧方面却是天差地别。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021第一份美好如约而至，请查收！</title>
      <link href="/myhexo/2021/03/09/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-6-ri-fang-shan/"/>
      <url>/myhexo/2021/03/09/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-6-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老义工： 丽、上校、鸿德、妙涵、素素、翠小花、南山南、安羽、梅子、蛋清、暗香、金蟾格格、川姐姐、冬雪儿、戏浪小生、田喜悦的巧克力、杜海、小鱼儿、天堂燕蝶、E3、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>开年第一次活动，热闹非凡，也许是大家好久不见啦，所以见面后显得格外亲切，这么多人一起约定来参加活动就更多了一丝丝激动，总觉得这么长时间不见，应该会有不一样的变化，见面后却又发现还是原来的样子，未曾改变，熟悉的背影，熟悉的笑脸，熟悉的声音，熟悉的眼神。</p><p>赶上孩子们刚开学不久，小孩们绝大多数都已经到校，孩子人数和义工们也正相当，所以活动起来也不用担心相互照顾不到。这次活动主要是陪孩子们画画和搭积木，也许确实也想不到有什么更好的活动内容了，这两项活动的好处就是不用费多少体力，不用跑来跑去你争我抢，当然也不用担心孩子们磕磕碰碰，尤其是对一些比较喜欢安静的小孩那就更好了，展开想象力天马行空地画，画出多彩的世界万物。</p><p>还有几位在一楼活动，主要是在厨房做饭，在库房整理东西，红红火火干劲十足。干得都是体力活，一大锅的鸡翅翻来炒去，一袋袋大米码得整整齐齐，这些功夫都不是一天两天可以炼成的，在家里肯定也个个都是一把好手。</p><p>每年各片区的开年活动都会制造一些特别，今年的特别之处是会长给参加活动的义工们每人准备了一个印有北京义工联LOGO的手提布袋，好珍贵的纪念物，值得一生典藏。手提袋具体是什么样子的大家翻看一下论坛的活动照片贴就清楚了。另外为了照顾义工们的口福，有一位义工特意从康复中心买了一些孩子们做的牛轧糖给义工们分享，这位义工是人称涛哥的李雪涛老义工，一个甜甜的开年活动。</p><p>心存善良，一切美好如约而至。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猎户星座</title>
      <link href="/myhexo/2021/03/02/sheng-huo/iknow/xi-hu-xing-zuo/"/>
      <url>/myhexo/2021/03/02/sheng-huo/iknow/xi-hu-xing-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="猎户星座"><a href="#猎户星座" class="headerlink" title="猎户星座"></a>猎户星座</h1><h2 id="星座神话"><a href="#星座神话" class="headerlink" title="星座神话"></a>星座神话</h2><h3 id="罗马神话"><a href="#罗马神话" class="headerlink" title="罗马神话"></a>罗马神话</h3><p>罗马神话中，海神尼普顿（Neptune）有个儿子名叫奥瑞恩（Orion）。奥瑞恩生来就像他的父亲一样，长得魁梧强壮。可他并不喜欢生活在海里，而总是来到山野间，攀岩、捕猎。不过，他毕竟是海神的儿子，所以即使是在海面上也能行走如飞。整日陪伴他的是一条名叫西立乌斯（Laelaps）的猎犬，它和主人一样勇猛，打猎时总是冲在最前面，遇到猛兽也总是挡在奥瑞恩身前。日子久了，奥赖温经常在打猎时碰到月亮女神狄安娜（Diana）。两人很快就被对方的高雅潇洒和出神入化的猎技深深吸引住了，后来，他们经常一起在山间漫步，登绝壁，攀险峰，无话不谈。这一切，却使太阳神阿波罗（Apollo）很生气，他怕妹妹狄安娜像月桂女神达芙妮（Daphne）一样。他知道狄安娜是个性格倔强的女孩，劝说根本不会打动她。阿波罗一狠心，想出了一条毒计。 </p><p>一天，奥瑞恩像往常一样，在海面上“飞行”，准备上岸去捕猎。他的全身都浸在水里，只有头部露出水面。阿波罗和狄安娜“正巧”从海面上飞过，阿波罗引诱狄安娜比试射术。狄安娜射中海上的目标，心里十分得意，降落到海上，想看看被射中的目标。可她看到的却是头部中箭的奥瑞恩，静静地躺在水面上，来不及和他的心上人说一句话，就已经气绝身亡了。最心爱的人竟然死在自己的箭下，狄安娜一下昏倒了。西立乌斯听到主人惨死的消息，悲痛得整夜哀号，绝食几天便随奥瑞恩而去了。这幕惨剧使众神之王朱庇特（Jupiter）也唏嘘不已。他收殓了奥瑞恩的尸首，把他升到天上化作猎户座。生前不能常相守，死后和心上人月神狄安娜永远在一起了。西立乌斯也以自己的忠诚赢得了朱庇特的同情，被提升到天界，继续陪伴在主人身旁，这就是大犬座。为了不使西立乌斯寂寞，朱庇特还特意给它找了个伙伴——小犬座。朱庇特知道奥瑞恩生前最喜欢打猎，就在他身边放了一只小小的猎物——天兔座。 </p><h3 id="希腊神话"><a href="#希腊神话" class="headerlink" title="希腊神话"></a>希腊神话</h3><p>希腊神话中，俄里翁（Orion）是神界中有名的狩猎者，他不但擅长打猎，而且力大无穷，外表更是高大健壮又英俊，因此变得骄傲自大，他到处向人吹嘘，自己是世界上最伟大的狩猎专家，没有一种动物见到他不害怕的，因此得罪了天后赫拉（Hele）。为了要惩罚这个狂妄的猎人，赫拉派了一只毒蝎子，在俄里翁每天会经过的路上埋伏，想趁著他不注意时袭击他。当俄里翁发现毒蝎子时，为时已晚，他一不留神，竟被毒蝎子给螫了一下，没多久便毒发身亡。就在他倒下的同时，身体恰巧压在来不及闪避的毒蝎子上，毒蝎子也就这样被活活压死了。赫拉因为这只毒蝎子尽忠职守，于是便将它升到天上，成了天蝎座。俄里翁则被主神宙斯（Zeus）升到天上，成为了猎户座。据说，俄里翁仍然在逃避毒蝎子的追击，因此夜晚的星空上，只要天蝎座出现，猎户座就会从另外一边消失的无影无踪，等到天蝎座落下，猎户座才又会高高升起。这两个星座就这么永远的在天空中追逐，彼此互不相见。</p><h2 id="猎户星座-（朴树演唱歌曲）"><a href="#猎户星座-（朴树演唱歌曲）" class="headerlink" title="猎户星座 （朴树演唱歌曲）"></a>猎户星座 （朴树演唱歌曲）</h2><h3 id="歌曲歌词"><a href="#歌曲歌词" class="headerlink" title="歌曲歌词"></a>歌曲歌词</h3><p>你还记得吗 那时的夜晚<br>是如何降临的<br>什么都不说 像来自天空<br>轻如指尖的触痛<br>你是否得到了 期待的人生<br>梦里的海潮声<br>他们又如何从 指缝中滑过<br>像吹在旷野里的风<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿<br>世界在雾中 那些人说着<br>来吧 就不见了<br>从未看清过 这一座迷宫<br>所有走错的路口<br>那些死去的人 停留在夜空<br>为你点起了灯<br>有时你乘起风 有时你沉没<br>有时午夜有彩虹<br>有时你唱起歌 有时你沉默<br>有时你望着天空<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=532776436&amp;auto=1&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猎户星座 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>销售冠军是如何炼成的课读书笔记</title>
      <link href="/myhexo/2021/02/27/xue-xi/reading/xiao-shou-guan-jun-shi-ru-he-lian-cheng-de/"/>
      <url>/myhexo/2021/02/27/xue-xi/reading/xiao-shou-guan-jun-shi-ru-he-lian-cheng-de/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>销售冠军是如何炼成的</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：贺学友<br>出版社：四川人民出版社</p><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><ul><li>销售是一个伟大的职业，也是一份充满挑战的工作。</li></ul><p>普通销售员和Top Sales在心态上的区别</p><p>永不言败，永不放弃</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">不自信</td><td align="center">非常自信</td></tr><tr><td align="center">不乐观</td><td align="center">乐观主义</td></tr><tr><td align="center">不积极</td><td align="center">积极向上</td></tr><tr><td align="center">谁都可以取代我</td><td align="center">舍我其谁</td></tr></tbody></table><p>普通销售员和Top Sales在状态上的区别</p><p>努力到感动自己，拼搏到无能为力</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">努力了不后悔</td><td align="center">全力以赴战斗</td></tr><tr><td align="center">差不多就得了</td><td align="center">达目标才甘心</td></tr><tr><td align="center">觉得自己在给别人打工</td><td align="center">为了自己的现在和未来拼搏</td></tr></tbody></table><p>普通销售员和Top Sales在效率上的区别</p><p>普通销售员与冠军的3-5倍效率差</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">为开发而开发</td><td align="center">只为精准开发</td></tr><tr><td align="center">为拜访而拜访</td><td align="center">只为目标拜访</td></tr><tr><td align="center">尝试性地签单</td><td align="center">为帮助客户创造价值而签单</td></tr></tbody></table><h2 id="理论联系实践，养成十大高效习惯"><a href="#理论联系实践，养成十大高效习惯" class="headerlink" title="理论联系实践，养成十大高效习惯"></a>理论联系实践，养成十大高效习惯</h2><p>好的习惯促进好的行为，好的行为成就好的结果。而所有的好习惯，都必须在实践中养成。</p><h3 id="思考的习惯"><a href="#思考的习惯" class="headerlink" title="思考的习惯"></a>思考的习惯</h3><h3 id="总结的习惯"><a href="#总结的习惯" class="headerlink" title="总结的习惯"></a>总结的习惯</h3><h3 id="早起的习惯"><a href="#早起的习惯" class="headerlink" title="早起的习惯"></a>早起的习惯</h3><h3 id="勤奋的习惯"><a href="#勤奋的习惯" class="headerlink" title="勤奋的习惯"></a>勤奋的习惯</h3><h3 id="做笔记的习惯"><a href="#做笔记的习惯" class="headerlink" title="做笔记的习惯"></a>做笔记的习惯</h3><h3 id="进步的习惯"><a href="#进步的习惯" class="headerlink" title="进步的习惯"></a>进步的习惯</h3><h3 id="失败的习惯"><a href="#失败的习惯" class="headerlink" title="失败的习惯"></a>失败的习惯</h3><h3 id="倾听的习惯"><a href="#倾听的习惯" class="headerlink" title="倾听的习惯"></a>倾听的习惯</h3><h3 id="分享的习惯"><a href="#分享的习惯" class="headerlink" title="分享的习惯"></a>分享的习惯</h3><h3 id="成交的习惯"><a href="#成交的习惯" class="headerlink" title="成交的习惯"></a>成交的习惯</h3>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Look at ... 看。。。。。。</title>
      <link href="/myhexo/2021/02/17/xue-xi/english/new-concept/lesson10/"/>
      <url>/myhexo/2021/02/17/xue-xi/english/new-concept/lesson10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>that man! (fat)</p><p>that woman!(thin)</p><p>that policeman!(tall)</p><p>that policewoman!(short)</p><p>that mechanic!(dirty)</p><p>that nurse!(clean)</p><p>Steven!(hot)</p><p>Emma!(cold)</p><p>that milkman!(old)</p><p>that air hostess!(young)</p><p>that hairdresser!(busy)</p><p>that housewife!(lazy)</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>fat</td><td>胖的</td></tr><tr><td>woman</td><td>女人</td></tr><tr><td>thin</td><td>瘦的</td></tr><tr><td>tall</td><td>高的</td></tr><tr><td>short</td><td>矮的</td></tr><tr><td>dirty</td><td>脏的</td></tr><tr><td>clean</td><td>干净的</td></tr><tr><td>hot</td><td>热的</td></tr><tr><td>cold</td><td>冷的</td></tr><tr><td>old</td><td>老的</td></tr><tr><td>young</td><td>年轻的</td></tr><tr><td>busy</td><td>忙的</td></tr><tr><td>lazy</td><td>懒的</td></tr></tbody></table><h2 id="Written-exercises"><a href="#Written-exercises" class="headerlink" title="Written exercises"></a>Written exercises</h2><p>Complete these sentences using He’s, She’s or It’s.</p><p>Example:<br>Robert isn’t a teacher.He’s an engineer.</p><p>Mr.Blake isn’t a student. He’s a teacher.</p><p>This isn’t my umbrella. It’s your umbrella.</p><p>Sophie isn’t a teacher. She’s a keyboard operator.</p><p>Steven isn’t cold. He’s hot.</p><p>Naoko isn’t Chinese. He’s Japanese.</p><p>This isn’t a German car. It’s a Swedish car.</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斯坦福大学人生设计课读书笔记</title>
      <link href="/myhexo/2021/02/06/xue-xi/reading/si-tan-fu-da-xue-ren-sheng-she-ji-ke/"/>
      <url>/myhexo/2021/02/06/xue-xi/reading/si-tan-fu-da-xue-ren-sheng-she-ji-ke/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>斯坦福大学人生设计课</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：[美] 比尔.博内特  [美] 戴夫.伊万斯  著    周芳芳 译<br>出版社：中信出版集团</p><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><p>在人生设计的过程中，你需要：</p><ul><li><p>保持好奇</p><ul><li>激发你的探索欲，发现自己的兴趣所在。</li></ul></li><li><p>不断尝试</p><ul><li>将目标付诸行动，不断尝试，切忌空想。  </li></ul></li><li><p>重新定义问题</p><ul><li>重新审视目前的状况，转换思维模式。 </li></ul></li><li><p>保持专注</p><ul><li>学会放手，专注于过程。 </li></ul></li><li><p>深度合作</p><ul><li>与他人合作，适度求助。 </li></ul></li></ul><p>你的人生是工业品，还是艺术品？</p><p>思维误区： 你的学位决定你的职业生涯。<br>重新定义： 3/4 的大学毕业生最后从事的工作都与他们所学的专业无关。</p><p>思维误区： 获得成功就会感到幸福。<br>重新定义：真正的幸福源于设计有意义的人生。</p><p>思维误区： 太晚了。<br>重新定义： 设计一种自己热爱的生活，合适都不晚。</p><p>发现问题+解决问题=精心设计的人生</p><p>重力问题： 在设计人生的过程中，如果一个问题不能被解决，那么他就不是真正的问题。 如果一个问题不能被解决，那么它就不是一个问题。它只是一种情况，一种环境，一种生活现实；它像重力一样，是一个无法解决的问题。</p><p>思维误区： 我应该已经知道自己的目的地了。<br>重新定义：只有你了解了自己现在的位置，你才能指导如何到达目的地。</p><p>人生设计评估：</p><ul><li><p>健康</p></li><li><p>工作</p></li><li><p>娱乐</p></li><li><p>爱</p></li></ul><p>如果你不知道自己当下的位置，就无法指导自己未来的方向。</p><p>工作观和人生观</p><p>思维误区： 我应该知道前进的目标。<br>重新定义：我不可能一直知道自己前进的目标，但是我会清楚自己的方向是否正确。</p><p>思维误区： 工作不应该有乐趣，因此它才被称为工作。<br>重新定义：乐趣会指引你找到适合你的工作。</p><p>美好时光日志</p><p>心流体验是指全身心投入的一种心理转台，心流产生的同时伴有兴奋感。</p><p>你唯一犯的错误就是什么也不做。</p><p>头脑风暴规则：</p><ol><li>重量不重质</li><li>不要对他人提出的想法立即做出评判，也不需要进行修改。</li><li>在其他人的想法进行创新。</li><li>鼓励大家说出大胆疯狂的想法。</li></ol><p>思维误区：关系网就是一群虚伪的人。<br>重新定义： 关系网只是为了咨询方向。</p><p>思维误区：幸福就是拥有一切。<br>重新定义：幸福就是断舍离。</p><p>思维误区： 我们以结果评判我们的人生。<br>重新定义：人生是一个过程，而不是一个结果。</p><p>失败只是人生的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯环</title>
      <link href="/myhexo/2021/02/06/xue-xi/essay/mo-bi-wu-si-huan/"/>
      <url>/myhexo/2021/02/06/xue-xi/essay/mo-bi-wu-si-huan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="莫比乌斯环"><a href="#莫比乌斯环" class="headerlink" title="莫比乌斯环"></a>莫比乌斯环</h2><p>在这个世界上有很多神奇的存在，莫比乌斯带就十分有趣，虽然看似简单，却包含了很多物理、数学等方面的信息。把一根纸条扭转180°后，两头再粘接起来做成的纸带圈，称作莫比乌斯带。</p><p>一般来讲，人们在观察某个图形时，往往会产生一些固定不变的“边界意识”，而且绝大多数人会下意识地顺从这些“边界”，而莫比乌斯带恰恰超出了人们的认知，莫比乌斯带圈没有所谓的边界，没有所谓的内外之分，是一个真正的无限循环的圈。</p><p>你可以设想一只蜘蛛开始沿着莫比乌斯带爬，那么它能够爬遍整条带子而无须跨越带的边缘。如果你想要验证这一点，可以拿一支铅笔不离纸地连续画线。那么，你会发现线条转了一圈，又返回了起点。</p><p>莫比乌斯带还有另一个有趣的性质，当你沿着带子的中央剪开，把这个圈一分为二，照理应得到两个圈儿，可奇怪的是，剪开后竟然是一个大圈儿。如果在纸条上画两条线，把纸条三等分，再粘成“莫比乌斯圈”，用剪刀沿画线剪开，剪刀绕两个圈竟然又回到原出发点。而且，纸带不仅没有一分为二，反而剪出一个两倍长的纸圈，更令人惊奇的是，新得到的这个较长的纸圈，本身却是一个双侧曲面，它的两条边界自身虽不打结，但却相互套在一起。</p><p>1882年，一位德国数学家菲利克斯·克莱因提出了“克莱因瓶”。“克莱因瓶”是一个平面，没有边界、没有定向性，随着表面前进，方向在不断变化；更有趣的是，这是一个不存在内部和外部的奇特形状。将一个“克莱因瓶”适当剪开，我们就能得到两条莫比乌斯带。莫比乌斯带于19世纪由数学家莫比乌斯发现，这种奇特的形状使之在工业中大放异彩，比如电阻器就被设计为莫比乌斯带的形状，以便更为充分地利用更多的表面，增强产品的耐用性。用皮带传送的动力机械的皮带也可以做成莫比乌斯带状，这样皮带有了更长的磨损面积，就不会只磨损一面了。</p><p><strong>莫比乌斯带原理可以运用到什么地方?</strong><br><strong>“莫比乌斯带”在生活和生产中已经有了一些用途。</strong></p><p>　　1. 用皮带传送的动力机械的皮带就可以做成“莫比乌斯带”状，这样皮带可以磨损的面积就变大了。</p><p>　　2. 如果把录音机的磁带做成“莫比乌斯带”状，就不存在正反两面的问题了，磁带就只有一个面了。</p><p>　　3. 它还能平坦的嵌入三维空间。简易的“莫比乌斯圈”可通过一张长方形纸任何一面反转粘贴。</p><p>　　传送带、减缓橡胶老化、针式打印机的色带。<br>用皮带传送的动力机械的皮带就可以做成“莫比乌斯带”状，这样皮带可以磨损的面积就变大了。如果把录音机的磁带做成“莫比乌斯带”状，就不存在正反两面的问题了，磁带就只有一个面了。它还能平坦的嵌入三维空间。</p><p>　　简易的“莫比乌斯圈”可通过一张长方形纸任何一面反转粘贴。</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
            <tag> 博客 </tag>
            
            <tag> 莫比乌斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《围城》读书笔记</title>
      <link href="/myhexo/2021/02/06/xue-xi/reading/wei-cheng/"/>
      <url>/myhexo/2021/02/06/xue-xi/reading/wei-cheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>围城</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：钱钟书<br>出版社：人民文学出版社</p><h2 id="阅读心得"><a href="#阅读心得" class="headerlink" title="阅读心得"></a>阅读心得</h2><ol><li>以前看过有些文章用清高来形容主人公方鸿渐，我特意查了一下清高这个词的含义，1.指人品纯洁高尚，不同流合污。2.指人孤高，不合群。看完了书后发现“清高”这个词有点不妥，书中赵辛楣对方鸿渐的评价是“你不讨厌，可是全无用处”。每位读者都有自己的理解和看待问题和人物的角度，给出不同的描述也很正常，这本书中的人物各有各的特点，钱老用犀利的笔法对人物形象刻画的太深刻了，大多人物都算是文人，这也正是钱老作为中国文学大家最和大学教授最手到擒来的素材来源。钱老在前言中说，《围城》写完就对它很不满。但仍然不失为一本现代名著。</li><li> 从整体上看这本书的基调比较轻松，里边有各种人物穿插其间，恰到好处的表达，让读者不得不赞叹钱老的文笔。</li><li>。。。 。。。</li></ol><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><ol><li>围在城里的人想逃出去，城外的人想冲进去，对婚姻也罢，职业也罢，人生的愿望大多如此。</li><li>叔本华 ：  世间哪有恋爱？压根儿是生殖冲动。            另一说法：所有的两情相悦都不过本能而已。</li><li>葡萄牙人有句谚语说：“运气好的人生的孩子，第一胎准是女的。” 因为女孩子长大了，可以打杂，看护弟弟妹妹，在未嫁之前，她父母省得下一个女佣人的工钱。</li><li>苏小姐理想的自己是：“艳若桃李，冷若冰霜。”</li><li>保持实力，做战略上的撤退。</li><li>不必去求诗的意义，诗有意义是诗的不幸。</li><li>他觉得用文言比较妥当，词意简约含混，是文过饰非轻描淡写的好工具。</li><li>小胖子大诗人曹元朗是不是也请在里面？有他，菜可以省一点，看见他那个四喜丸子的脸，人就饱了。</li><li>我知道她难看，可是因为她是我们的恩人，我不忍细看她。对于丑人，细看是一种残忍–除非他是坏人，你要惩罚他。</li><li>你不讨厌，可是全无用处。</li><li>大学校长份文科出身和理科出身两类。文科出身的人轻易做不到这位子，做到了也不以为荣，准是干政治碰壁下野，仕而不优则学，借诗书之泽、弦诵之声来修养身心。理科出身的人呢，就全然不同了。中国是世界上最提倡科学的国家，没有旁的国家肯给科学家大官做的。外国科学进步，中国科学家进爵。</li><li>假惊异的表情做得惟妙惟肖，比方鸿渐的真惊惶自然得多；他没演话剧，是话剧的不幸，而是演员们的大幸。</li><li>叫花子只能讨到什么吃什么，点菜时轮他不着的。</li><li>不识抬举，不敢高攀。</li><li>伊索寓言里那只没尾巴的狐狸。    </li><li>天下只有两种人。譬如一串葡萄到手，一种人挑最好吃的先吃。另一种人把最好的留在最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里面最坏的。不过事实上适得其反，缘故是第二种人还有希望，第一种人只有回忆。</li><li>拥挤里的孤寂，热闹里的凄凉。</li><li>这只钟走得非常准，我昨天试过的，每点钟只走慢七分，记好，要走慢七分。</li><li>喜事不比丧事，礼是可以补送的。</li><li>人生最原始的睡，同时也是死的样品。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How are you today? 你今天好吗？</title>
      <link href="/myhexo/2021/02/04/xue-xi/english/new-concept/lesson9/"/>
      <url>/myhexo/2021/02/04/xue-xi/english/new-concept/lesson9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-How-is-Emma"><a href="#Listen-to-the-tape-then-answer-this-question-How-is-Emma" class="headerlink" title="Listen to the tape then answer this question.  How is Emma?"></a>Listen to the tape then answer this question.  How is Emma?</h2><p>STEVEN: Hello,Helen.</p><p>HELEN: Hi,Steven.</p><p>STEVEN: How are you today?</p><p>HELEN: I’m very well,thank you. And you?</p><p>STEVEN: I’m fine,thanks.</p><p>STEVEN: How is Tony?</p><p>HELEN: He’s fine,thanks.</p><p>​                How’s Emma?</p><p>STEVEN: She’s very well,too,Helen.</p><p>Steven: Goodbye,Helen.</p><p>​                Nice to see you.</p><p>EHLEN: Nice to see you,too,Steven.Goodbye.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>hello</th><th>喂（表示问候）</th></tr></thead><tbody><tr><td>hi</td><td>喂，嗨</td></tr><tr><td>how</td><td>怎样</td></tr><tr><td>today</td><td>今天</td></tr><tr><td>well</td><td>身体好</td></tr><tr><td>fine</td><td>美好的</td></tr><tr><td>thanks</td><td>谢谢</td></tr><tr><td>goodbye</td><td>再见</td></tr><tr><td>see</td><td>见</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Are you a teacher? 你是教师吗？</title>
      <link href="/myhexo/2021/02/01/xue-xi/english/new-concept/lesson7/"/>
      <url>/myhexo/2021/02/01/xue-xi/english/new-concept/lesson7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-What-is-Robert’s-job"><a href="#Listen-to-the-tape-then-answer-this-question-What-is-Robert’s-job" class="headerlink" title="Listen to the tape then answer this question.  What is Robert’s job?"></a>Listen to the tape then answer this question.  What is Robert’s job?</h2><p>ROBERT: I am a new student. My name ‘s Robert.</p><p>SOPHIE: Nice to meet you. My name’s Sophie.</p><p>ROBERT: Are you French?</p><p>SOPHIE: Yes,I am.</p><p>SOPHIE: Are you French,too?</p><p>ROBERT: No,I am not.</p><p>SOPHIE: What nationality are you?</p><p>ROBERT: I’m Italian.</p><p>ROBERT: Are you a teacher?</p><p>SOPHIE: No, I’m not.</p><p>ROBERT: What’s your job?</p><p>SOPHIE: I’m a keyboard operator.</p><p>SOPHIE: What’s your job?</p><p>ROBERT: I’m an engineer.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>I</th><th>我</th></tr></thead><tbody><tr><td>nationality</td><td>国籍</td></tr><tr><td>am</td><td>be动词现在时第一人称单数</td></tr><tr><td>job</td><td>工作</td></tr><tr><td>are</td><td>be动词现在时复数</td></tr><tr><td>keyboard</td><td>电脑键盘</td></tr><tr><td>name</td><td>名字</td></tr><tr><td>operator</td><td>操作人员</td></tr><tr><td>what</td><td>什么</td></tr><tr><td>engineer</td><td>工程师</td></tr></tbody></table><h2 id="Notes-on-the-text"><a href="#Notes-on-the-text" class="headerlink" title="Notes on the text."></a>Notes on the text.</h2><ol><li>My name’s = My name is.</li><li>I’m = I am</li><li>What’s your job?</li><li>What’s  = What is</li><li>What nationality are you? 用来询问对方国籍。也可以问Where are you frome?</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What&#39;s your job? 你是做什么工作的？</title>
      <link href="/myhexo/2021/01/31/xue-xi/english/new-concept/lesson8/"/>
      <url>/myhexo/2021/01/31/xue-xi/english/new-concept/lesson8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>I’m a policeman.</p><p>I’m a policewoman.</p><p>I’m a taxi driver.</p><p>I’m an air hostess.</p><p>I’m a postman.</p><p>I’m a nurse.</p><p>I’m a mechanic.</p><p>I’m a hairdresser.</p><p>I’m a housewife.</p><p>I’m a milkman.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>policeman</th><th>警察</th></tr></thead><tbody><tr><td>nurse</td><td>护士</td></tr><tr><td>policewoman</td><td>女警察</td></tr><tr><td>mechanic</td><td>机械师</td></tr><tr><td>taxi driver</td><td>出租汽车司机</td></tr><tr><td>hairdresser</td><td>理发师</td></tr><tr><td>air hostess</td><td>空中小姐</td></tr><tr><td>housewife</td><td>家庭妇女</td></tr><tr><td>postman</td><td>邮递员</td></tr><tr><td>milkman</td><td>送牛奶的人</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What make is it. 他是什么牌子？</title>
      <link href="/myhexo/2021/01/26/xue-xi/english/new-concept/lesson6/"/>
      <url>/myhexo/2021/01/26/xue-xi/english/new-concept/lesson6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>It’s a Volvo.(Swedish)</p><p>It’s a Peugeot.(French)</p><p>It’s a Mercedes.(German)</p><p>It’s a Toyota.(Japanese)</p><p>It’s a Daewoo.(Korean)</p><p>It’s a Mini.(English)</p><p>It’s a Ford.(American)</p><p>It’s a Fiat.(Italian)</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><p>make /meik/ n (产品的)牌号        Mercedes   梅赛德斯</p><p>Swedish      瑞典的        Toyota   丰田</p><p>English   英国的        Daewoo   大宇</p><p>American    美国的    Mini  迷你</p><p>Volvo   沃尔沃        Fiat   菲亚特</p><p>peugeot  标志</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nice to meet you. 很高兴见到你。</title>
      <link href="/myhexo/2021/01/25/xue-xi/english/new-concept/lesson5/"/>
      <url>/myhexo/2021/01/25/xue-xi/english/new-concept/lesson5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Is-Chang-woo-Chinese"><a href="#Listen-to-the-tape-then-answer-this-question-Is-Chang-woo-Chinese" class="headerlink" title="Listen to the tape then answer this question. Is Chang-woo Chinese?"></a>Listen to the tape then answer this question. Is Chang-woo Chinese?</h2><p>MR. BLAKE: Good morning.</p><p>STUDENTS: Good morning,Mr.Blake.</p><p> MR. BLAKE:  This is Miss Sophie Dupont.</p><p>​                        Sophie is a new student.</p><p>​                        She is French.</p><p>MR. BLAKE:  Sophie,this is Hans. He is German.</p><p>HANS: Nice to meet you.</p><p>MR.BLAKE: And this is Naoko. She is Japanese.</p><p>NAOKO: Nice to meet you.</p><p>MR. BLAKE: And this is Chang-woo. He’s Korean.</p><p>CHANG-WOO: Nice to meet you.</p><p>MR. BLAKE: And this is Luming. He’s Chinese.</p><p>LUMING: Nice to meet you.</p><p>MR. BLAKE: And this is Xiaohui,She’s Chinese,too.</p><p>XIAOHUI: Nice to meet you.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>Mr.     German</p><p>good    nice</p><p>morning    meet</p><p>Miss    Japanese</p><p>new    Korean</p><p>student Chinese</p><p>French    too</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is this your ...? 这是你的。。。。。。吗？</title>
      <link href="/myhexo/2021/01/25/xue-xi/english/new-concept/lesson4/"/>
      <url>/myhexo/2021/01/25/xue-xi/english/new-concept/lesson4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>Is this your pen?</p><p>Is this your pencil?</p><p>Is this your book?</p><p>Is this your watch?</p><p>Is this your coat?</p><p>Is this your dress?</p><p>Is this your skirt?</p><p>Is this your shirt?</p><p>Is this your car?</p><p>Is this your house?</p><p>Is this your suit?</p><p>Is this your school?</p><p>Is this your teacher?</p><p>Is this your son?</p><p>Is this your daughter?</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>suit /su:t/n          son<br>school    daughter<br>teacher    </p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sorry,sir. 对不起，先生。</title>
      <link href="/myhexo/2021/01/24/xue-xi/english/new-concept/lesson3/"/>
      <url>/myhexo/2021/01/24/xue-xi/english/new-concept/lesson3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Does-the-man-get-his-umbrella-back"><a href="#Listen-to-the-tape-then-answer-this-question-Does-the-man-get-his-umbrella-back" class="headerlink" title="Listen to the tape then answer this question. Does the man get his umbrella back?"></a>Listen to the tape then answer this question. Does the man get his umbrella back?</h2><p>My coat and my umbrella please.</p><p>Here is my ticket.</p><p>Thank you,sir.<br>Number five.</p><p>Here’s your umbrella and your coat.</p><p>This is not my umbrella.<br>Sorry,sir.</p><p>Is this your umbrella?<br>No,it isn’t.</p><p>Is this it?<br>Yes,it is.<br>Thank you very much.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>umbrella    number<br>please    five<br>here    sorry<br>my    sir<br>ticket    cloakroom</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is this your ...? 这是你的。。。。。。吗？</title>
      <link href="/myhexo/2021/01/21/xue-xi/english/new-concept/lesson2/"/>
      <url>/myhexo/2021/01/21/xue-xi/english/new-concept/lesson2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>-Is this your …?<br>-Is this your book?</p><ul><li>Is this your car?</li><li>Is this your coat?</li><li>Is this your dress?</li><li>Is this your house?</li><li>Is this your pen?</li><li>Is this your pencil?</li><li>Is this your shirt?</li><li>Is this your skirt?</li><li>Is this your watch?</li></ul><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>pen        dress<br>pencil    skirt<br>book    shirt<br>watch    car<br>coat    house</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excuse me!</title>
      <link href="/myhexo/2021/01/20/xue-xi/english/new-concept/lesson1/"/>
      <url>/myhexo/2021/01/20/xue-xi/english/new-concept/lesson1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Whose-handbag-is-it"><a href="#Listen-to-the-tape-then-answer-this-question-Whose-handbag-is-it" class="headerlink" title="Listen to the tape then answer this question. Whose handbag is it?"></a>Listen to the tape then answer this question. Whose handbag is it?</h2><p>-Excuse me!<br>-Yes?<br>-Is this your handbag?<br>-Pardon?<br>-Is this your handbag?<br>-Yes,it is.<br>-Thank you very much.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>excuse        handbag<br>me        pardon<br>yes         it<br>is         thank you<br>this        very much<br>your</p><h2 id="Notes-on-the-text"><a href="#Notes-on-the-text" class="headerlink" title="Notes on the text"></a>Notes on the text</h2><ol><li>Excuse me.<br>这个短语常用于与陌生人搭话，打断别人的说活或从别人身边挤过。在课文中，男士为了吸引女       士的注意力而用了这个表示客套的短语。</li><li>Pardon?<br>全句为 I beg your pardon. 意思是请求对方把刚才讲过的话重复一遍。</li></ol><h3 id="参考译文"><a href="#参考译文" class="headerlink" title="参考译文"></a>参考译文</h3><p>-对不起！<br>-什么事？<br>-这是您的手提包吗？<br>-对不起，请再说一遍。<br>-这是您的手提包吗？<br>-是的，是我的。<br>-非常感谢！</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外语的课堂教学</title>
      <link href="/myhexo/2021/01/20/xue-xi/english/new-concept/about/"/>
      <url>/myhexo/2021/01/20/xue-xi/english/new-concept/about/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>衡量是否掌握一门语言，最终是要看他运用如何，而不是懂多少。学习语言和学习乐器十分相似。学生做的操练和练习都是为了达到一个明确的目标：使他成为一个熟练的操作者。一个学生学了许多语法知识却不会运用语言，就像弹钢琴的学了许多关于和声的知识却不会弹钢琴一样。因此衡量学生是否掌握语言并不看他懂了多少，而要看他在众人面前语言运用的如何。</p><hr><audio controls="">  <source src="about.mp3" type="audio/mpeg">  您的浏览器不支持 audio 元素。</audio><hr><audio controls="">  <source src="/myhexo/2021/01/20/xue-xi/english/new-concept/about/about.mp3" type="audio/mpeg">  您的浏览器不支持 audio 元素。</audio>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之禅</title>
      <link href="/myhexo/2021/01/12/xue-xi/python/python-zhi-shan/"/>
      <url>/myhexo/2021/01/12/xue-xi/python/python-zhi-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>又名 <a href="https://www.python.org/dev/peps/pep-0020"><strong>PEP 20</strong></a>, Python设计的指导原则。</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!Python之禅 by Tim Peters优美胜于丑陋（Python以编写优美的代码为目标）明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）可读性很重要（优美的代码是可读的）即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）当存在多种可能，不要尝试去猜测而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京义工联2019年年会照片贴--在这个世界相遇</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/nian-hui/bei-jing-yi-gong-lian-2019-nian-nian-hui-zhao-pian-tie/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/nian-hui/bei-jing-yi-gong-lian-2019-nian-nian-hui-zhao-pian-tie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在这个世界相遇</p><p>北京义工联2019年年会照片贴</p><p><img src="0.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 年会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心路，义工路</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/xin-lu-yi-gong-lu/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/xin-lu-yi-gong-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>**既然是写心路还是从开始说起吧，没来义工联之前，周六日无所事事，在消耗中度过休息日，觉得日子过得很可惜，深夜再一想，还有很多事情还没做，台湾还没解放，我也很着急，台湾同胞还生活在水深火热中，每当想到这里我都惆怅不已。忽然有一天在网上看到了北京义工联，把解放台湾的事儿先放一放，周六日参加一下义工活动应该不错。<br>**</p><p>  <strong>提交申请后等了不多久就通过了，组织领导效率这么高，让我很诧异。按照地点和时间来到海淀活动点看到了很多新的面孔和笑脸，第一次是蓝晶海豚带队，带队来得很早，仅仅比我晚了一步，觉得此人面相不凡走位娴熟，定当是特别人物，互相一交流果然不出我所料。活动在带队的安排下开始了，这么多义工，那么多孩子，好不热闹，我第一次来参加活动，感觉很茫然，不知所措，不过还是有信心能和孩子们玩到一起的，接着继续参加了多次活动，就逐渐认识了几个小孩儿，并且记住了他们的名字，同时也认识了更多友好的义工朋友们。</strong></p><p>  <strong>刚开始做义工可能就仅仅是为了消遣，慢慢认识了很多义工朋友们，觉得在一起能开心，并且能做一些力所能及的事情会创造出很多欢乐。刚开始认识的人中，鸿德应该算是印象比较深刻的，当年的年会上，鸿德伴着《江南Style》神曲秀了一段马式舞步，惊艳全场，这样的鸟叔他怎能不惹人醉。以前一直怀疑鸿德和芒果台主持人杜海涛一定有关系，现在终于真相大白了，原来是异父异母的亲兄弟。清新姐和旅程姐认识的也比较早，在活动中清新姐办事利落雷厉风行，旅程姐面面俱到关怀备至，逸然也是认识比较早的带队，在活动中总是事无巨细地忙前忙后，尽管由于工作原因不能经常参加活动，但是一有机会来参加，大哥风范犹存。</strong></p><p>  <strong>接下来主要写一下海淀片区的人们吧，毕竟我的根据地在海淀片区，认识的义工们相对比较多，先说一下四大（ ）吧，雪涛兄，为什么你是之首呢？我现在都没弄明白，一直觉得你既是个斯文人，博学多才，又是个硬人，宁折不弯，不料世事无常，人间正道是沧桑，逗比路上多奇葩。</strong></p><p>**天堂燕蝶、蝶姐、蝶妹、小蝶，这几个名字为什么怎么叫都无比娘气呢？你就认了吧，人缘好是被叫出来的，天气预报哪家强，小蝶是个好姑娘。曹贼，九零后，山西人士，逗比界的杰出代表，在海淀片区逗比领域有突出贡献，因为帅，所以逗比。青岛小哥，自称九零后，谁信？作为逗比领导者，你不要拿年龄和长相逗大家，中国梦，你的梦，逗比梦。<br>**</p><p>  <strong>再从另一个角度说一下四位吧，涛哥是一个很关心孩子和义工的大哥，最近涛哥在忙大事，所以没出现在活动片区，大家应该恭喜一下，送上美好的祝福。蝶姐每天发天气预报这份坚持，值得所有人学习，还有每次在常规活动或者其他活动都积极参与，并给予义工和服务对象贴心的帮助，让带队们感到队伍中有这样的义工很欣慰，很值得自豪。曹贼除了帅，也很热心，在去年春运期间帮帮忙活动中表现的很好，活动组织者给了很高的评价，棒棒的。小哥，进入义工联以来，我一步一步看着小哥长大，猛然间发现小哥已经太成熟了，小哥和海淀片区的各个老师都很谈得来，和孩子们也能玩成一片，活动后每次的总结写得也很细致，带队的小哥已经很有魅力了，向小哥学习。为逗比而生，义联更懂你，如果不逗比，生活多无趣。</strong></p><p>**<br>  皮小奇，我第一次参加活动就对小奇印象比较深，那天小奇来得很早，感觉萌萌哒，像一个高中生。小奇担任带队后才逐渐了解小奇，但有一点一直不了解，小奇你的饭量到底有多大？梅子是和小哥一起开始担任带队，一路成长，从开始的手足无措到现在熟练把握活动全局，每一次组织活动都能很好地完成，活动总结写得那么仔细那么用心，记得去年圣诞节为孩子们安排的活动非常棒，欢乐和幸福洋溢在每一个孩子和义工的脸上，多么开心的一段时光。这篇心路写到这里我也不知道该怎么继续描述下一位义工了，在义工联里有很多很多的义工都在用心做着每一件事，我熟悉的或者不熟悉的一些义工，在某一个瞬间给过我一些温暖的感觉,都值得记录下来，或许是点滴微小的一个动作，也或许是一个问候式的笑脸。**</p><p>  <strong>这篇心路主要写了一下海淀片区的一些义工，还有很多义工我都想一一写下来，海淀暖男罗刹，热心的小鱼儿，端庄的安羽，丽姐男朋友Davy，好摄影师幻龙，漫步阳光里，川姐姐、星星。。。。。。。很感激北京义工联这个组织，让这么多义工朋友们在一起开心，一起欢乐。</strong></p><p>  <strong>感谢有你，北京义工联！有你真好，北京义工联！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>太阳升起的地方就是希望</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>太阳升起的地方就是希望</p><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/1.jpg" class="" title="桃花小学大合影"><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/2.jpg" class="" title="王庄子完小大合影">]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 走访 </tag>
            
            <tag> 助学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋天有你陪伴，真好！</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2019-nian-10-yue-26-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2019-nian-10-yue-26-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>秋天有你陪伴，真好</p><p>新义工： 王欢欢<br>老义工： 池文馨、胖龙、E3、暗香、饭团掌柜、老六、南山南、Sara214、李佳丽、鸿德、弘毅正兴<br>摄影：暗香<br>带队：弘毅正兴</p><p>​    秋高气爽，天高云淡，色彩斑斓的季节，在这样的天气参加义工活动别有一番风味，从市里的热闹到房山的闲静，除了欣赏一路的风景，更多的是一颗颗热切的义工心。</p><p>活动断断续续地停了几次，有些老义工也隔了段时间又回来啦，有变化的也有不变的，有孩子们熟悉的面孔，也有新来的小朋友，万事万物都在随着时间变换，春去秋来，新义工成了老义工，陌生到熟悉，相识到相知，一切都是这么自然。</p><p>​    担心迟到没吃午饭的义工胖龙，早早地来到活动点，时间足够，就再附近的小面馆吃了一顿，吃饱后悠哉悠哉地进了学校等着其他义工。这次的房山大当家鸿德叔叔忙里偷闲不用加班，还不到下午一点就到了，有这样积极的大带队坐镇活动也不用担心组织不起来了。</p><p>   E3这次不用负责摄影工作，可以专心陪孩子们了，这个过程和孩子一起拼图，一起画画写字，默默地配合，静静地依偎，时不时伸出大拇指鼓励。Sara214还是那个哪里需要去哪里的义工，时不时地去厨房一起做饭，陪孩子也是个能手，总能找到好方法去应对各种性格的小朋友。</p><p>​    这次唯一的新义工是老六推荐的，老六对义工联的传播和普及很好，让身边的人对义工很更多的认识。这次的新义工王欢欢可能提前了解了一下情况，所以新人培训中提到的注意事项都遵守的很好，和孩子们玩的时候也游刃有余，没有一丝拘谨。暗香这次负责摄影，抓拍的每一张照片都非常到位，各种表情，各种姿势，各种欢乐。</p><p>​    南山南协助着组织活动，她认识的孩子们多，孩子们相当配合，尽管中间也有抢玩具的现象，但还是很快轻松化解。</p><p>   小生这次还是在厨房里做美食，饭团一起配合着，炸带鱼、清炒胡萝卜还有一道不知道是什么，反正是色香味俱全，进了厨房的人们都想尝尝。饭团的厨艺也相当了得，赞一个吧。</p><p>​    活动结束总结的时候有一个意外惊喜，有小朋友把送了一束花给池文馨，不一会儿又有很多的小朋友给其他的义工们送上了鲜花，义工们都好开心，和孩子们拥抱。原来是大班的孩子们下午学习插花,把亲手做的成果送给了义工们，意外的收获，以惊喜的方式结束了活动。</p><p>星火相承，义路同行。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档</title>
      <link href="/myhexo/2020/12/24/xue-xi/hexo/index/"/>
      <url>/myhexo/2020/12/24/xue-xi/hexo/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 <a href="troubleshooting.html">问题解答</a> 中的解答，或者在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>、<a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。</p><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请<a href="https://github.com/hexojs/hexo/issues">提交问题</a>，我们会尽力解决您的问题。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><p>Mac 用户<br>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p><p>Windows 用户<br>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><p>Windows 用户<br>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p><p>Mac / Linux 用户<br>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h3><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="<span class="token environment constant">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h3></li></ol><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们的时光，义工的过往</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/wo-men-de-shi-guang-yi-gong-de-guo-wang/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/wo-men-de-shi-guang-yi-gong-de-guo-wang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们的时光，义工的过往</p><p>头顶的太阳<br>燃烧着青春的余热<br>大海的波浪<br>翻滚着我们的向往<br>我们的时光<br>是无忧的时光<br>—–赵雷</p><p>​    五四青年节B站推出的《后浪》短视频在朋友圈刷屏，看完了何冰极富感染力的演讲才发现原来浪也分前后，以前只觉得一个人浪就是浪，不分前后左右。 其中说到的年轻人凭着相同的爱好就能结交千万个值得干杯的朋友，对于我来说多少也有点感触，在这个偌大的城市可以释怀干杯的朋友很多就是在北京义工联里相识的，但我们属不属于视频中所说的后浪我也不敢确定，毕竟每个人浪的程度和时期都不一样。联里的义工们年龄差距比较大，应该是前浪后浪都有，也有中间浪。这些浪是怎么成千上万在一起的？视频中也给了答案，因为热爱，因为善良，因为心里有火，眼里有光。君子美美与共，和而不同。</p><p>​    做一名义工对社会的影响有多大？总觉得年轻人在社会上，应该有一分热，发一分光。和尔盖茨和扎克伯格这样有影响力的大人物做慈善相比，我们每一个人的光和热都是很有限的，但这些就足以影响身边的人，影响你我自己的人生经历。放手去拥抱这个世界，热爱身边的人，热爱生活，不负青春！</p><p>​    马克吐温说:“善良,是一种世界通用的语言。” 与人为善,就是为自己积攒福气和运气…，<br>世界上所有的惊喜和好运，都是你积累的人品和善良。有善意之举的人，看似笨拙的付出了时间和精力，但其实是一种惊喜和好运的积累。善待整个世界，整个世界也会善待着你。你所有选择的善良里面，都会藏着你未来的道路上的惊喜和运气。</p><p>​    在义工联里活动的时候总是能看到身边人脸上带着笑，时间一长就发现原来笑是可以传递的，初加入的新义工看到这样的笑会觉得这里有暖，有爱，热情活力。老义工看到这样的笑会更加坚定自己当初所做行动和付出。这就是微笑的力量，给自己一个微笑，让生活多一份热爱。微笑可以化解陌生，也可以递增情义，可以向前浪致敬，也可以和后浪干杯。</p><p>给我一个微笑就够了<br>如薄酒一杯，像柔风一缕<br>这就是一篇最动人的宣言呵<br>仿佛春天　温馨又飘逸<br>—–汪国真</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微风细雨，岁月静好</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-8-yue-15-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-8-yue-15-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>微风细雨，岁月静好</p><p>老义工： 丽、金蟾格格、川姐姐、胖龙、杨涵妈、小鱼儿、冬雪儿、不点、E3、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>​    几天前断断续续的暴雨过去后，空气自然好了很多，凉爽的天气给人好心情，没有燥热，没有热汗，有的是义工们热切的心。<br>​<br>​    周五义工们就三五人约好结伴同行，又都是老义工，所以不用担心找不到活动地点，一起同行也有了更多的时间聊一聊八卦，谈一谈人生。 由于今年的特殊情况，活动最近才开始，所以义工们很长时间没见面，会有更多的话可以说，还是原来熟悉的面孔，还是往日一样的热情。</p><p>​    好久不带队流程都不熟悉了，去了活动片区只顾着领任务，接着就去干，忘了活动后还要写总结，所以这篇总结一定不会记录细节，确实没有去各小组转一转看一看义工们活动得怎么样，玩得嗨不嗨。从活动后的照片来看小伙伴们都笑脸盈盈，不亦乐乎，想必一定都没玩够。</p><p>   厨房里小鱼儿，杨涵妈和格格在热火朝天地忙着做饭，活动最后部分义工以各种理由进厨房检查了一下菜的质量和口味。</p><p>​    男女洗澡小组一定更忙，做的都是流水线上的活儿，孩子们排着队进来，洗好了一个又来一个，义工们是持续不断地操作，再加上有的小孩儿洗澡比较闹腾，就更够义工们手忙脚乱的了，胖龙鞋和口罩都湿了，想一想就知道这工作量有多大了。</p><p>​    还有些义工在教室里陪孩子们一起看电视，好像看的是《海贼王》，孩子们的童年都是用一部部动画片连起来的，也正是动画片给了孩子们最纯真的欢笑。</p><p>   不知不觉时间就过去了，义工们要集合了，院子里各种孩子们的玩具义工们趁着空隙玩一玩，感受一下童年的美好时代。</p><p>星火相承，义路同行。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你只管善良，美好正在路上</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你只管善良，美好正在路上</p><p><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/0.jpg"></p><p>老义工： 丽、金蟾格格、戏浪小生、上校、蛋清、幻龙、小鱼儿、冬雪儿、E3、天堂燕蝶、李畅、弘毅正兴<br>摄影：小鱼儿<br>带队：弘毅正兴</p><p>​    首先这么优雅的标题肯定不是带队写的，也不是摄影写的，那是谁写的呢？还是大家猜一下吧。</p><p>每周的活动内容都差不多，但每周都有不一样的新鲜感，新鲜感或许是来自好久不见得义工，也或许是因为新接触了一个很好玩的小朋友，也可能是到厨房帮厨的时候了解到了一种菜的新做法，还可能是听到了一些义工们的新八卦段子。反正每次都觉得义工活动像是和老朋友见面，既是一份挂念，又是一次畅聊。</p><p>​    义工分了两部分，一部分在楼上陪孩子一起拼积木，另一部分在楼下的厨房里大展厨艺。这次的男义工比较多，和女义工人数相当。男同学扎堆都跑到了厨房里，有些可能是担心陪不了孩子吧。不过活动后出锅的鱼确实做得不错，馋坏了其他的其他的义工们，只恨没能到厨房里品味一下。</p><p>​    陪孩子们的义工这次拼积木不知效果怎么样，孩子们的世界总是会给成人很多启发，各个小孩都有自己的性格，也能让我们想起自己的小时候。陪孩子多一些耐心，试着去体会和了解他们的想法，这样就能更好地与孩子们一起玩，一起成长。</p><p>​    这次的摄影师是小鱼儿，另外还有三姐做幕后指导，两两配合，把这次的照片拍得很美，抓拍到很多美好瞬间。</p><p>​    最后，大家猜到这次的题目出自谁手了吗？可以翻翻当天活动义工的朋友圈。我给大家四个字的提示“温婉恬静”。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>善良遇见善良，是世间最美的邂逅!</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>善良遇见善良，是世间最美的邂逅！</p><p><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/1.jpg"></p><p>老义工： 丽、翠小花、蛋清、E3、金蟾格格、川姐姐、冬雪儿、戏浪小生、田喜悦的巧克力、马小靖、杜海、小鱼儿、天堂燕蝶、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>​    这次来活动的义工真不少，孩子们都快不够分了，来的是老义工所以很快都进入了活动状态，没有陌生和拘束，有的是笑声和热闹。带队组织活动根本不用担心义工们对孩子照顾不周，和孩子们玩时放不开，毕竟都是从孩子们过来的，孩子们的小心思，孩子们的调皮捣蛋一个眼神一个动作就心领神会。</p><p>​    没有新鲜多样的游戏，还是一如既往地搭积木，实在也是没有更好玩的啦，每次义工和孩子们配合都会搭出不一样的模型，同样的东西玩得方式也各有各的不同，各个阶段完成的结果也不一样，变幻莫测，意想不到，开始是一个一串连起来的小火车，后来就变成了一座围起来的城堡，开始还是一个即将起飞的火箭，后来再一组合就变成一把冲锋枪了。孩子们把长条的积木挑出来当多米诺骨牌来玩也很有意思，每次摆得足够长了的时候总有一个捣蛋的孩子过来看似很不小心地推到第一块，一连串就都倒下了，继续重新摆把。</p><p>​    只要小生参加活动，每次都会在厨房看到他的身影，学校这样的厨房最能体现厨师的水平，同时也更考验厨师的体力。同样每次的摄影除了拍照技术还要考虑到每位义工都能上镜，更要考虑上镜后的高矮胖瘦，不能太写实也不能太抽象。</p><p>​    双十二来参加活动，遇见美好，传递善良。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 Git 命令清单</title>
      <link href="/myhexo/2020/10/26/xue-xi/git/chang-yong-git-ming-ling-qing-dan/"/>
      <url>/myhexo/2020/10/26/xue-xi/git/chang-yong-git-ming-ling-qing-dan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-命令清单。几个专用名词的译名如下。"><a href="#Git-命令清单。几个专用名词的译名如下。" class="headerlink" title="Git 命令清单。几个专用名词的译名如下。"></a>Git 命令清单。几个专用名词的译名如下。</h2><ul><li>Workspace：工作区 Index </li><li>Stage：暂存区 </li><li>Repository：仓库区（或本地仓库） </li><li>Remote：远程仓库</li></ul><p><img src="git.png"></p> <a id="more"></a><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 在当前目录新建一个Git代码库$ git init 新建一个目录，将其初始化为Git代码库$ git init [project-name] 下载一个项目和它的整个代码历史$ git clone [url]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><blockquote><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 显示当前的Git配置$ git config --list 编辑Git配置文件$ git config -e [--global] 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 添加指定文件到暂存区$ git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录$ git add [dir] 添加当前目录的所有文件到暂存区$ git add . 添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现分次提交$ git add -p 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ... 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file] 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 提交暂存区到仓库区$ git commit -m [message] 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message] 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a 提交时显示所有diff信息$ git commit -v 使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message] 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 列出所有本地分支$ git branch 列出所有远程分支$ git branch -r 列出所有本地分支和远程分支$ git branch -a 新建一个分支，但依然停留在当前分支$ git branch [branch-name] 新建一个分支，并切换到该分支$ git checkout -b [branch] 新建一个分支，指向指定commit$ git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区$ git checkout [branch-name] 切换到上一个分支$ git checkout - 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支$ git merge [branch] 选择一个commit，合并进当前分支$ git cherry-pick [commit] 删除分支$ git branch -d [branch-name] 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 列出所有tag$ git tag 新建一个tag在当前commit$ git tag [tag] 新建一个tag在指定commit$ git tag [tag] [commit] 删除本地tag$ git tag -d [tag] 删除远程tag$ git push origin :refs/tags/[tagName] 查看tag信息$ git show [tag] 提交指定tag$ git push [remote] [tag] 提交所有tag$ git push [remote] --tags 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 显示有变更的文件$ git status 显示当前分支的版本历史$ git log 显示commit历史，以及每次commit发生变更的文件$ git log --stat 搜索提交历史，根据关键词$ git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file] 显示指定文件相关的每一次diff$ git log -p [file] 显示过去5次提交$ git log -5 --pretty --oneline 显示所有提交过的用户，按提交次数排序$ git shortlog -sn 显示指定文件是什么人在什么时间修改过$ git blame [file] 显示暂存区和工作区的差异$ git diff 显示暂存区和上一个commit的差异$ git diff --cached [file] 显示工作区与当前分支最新commit之间的差异$ git diff HEAD 显示两次提交之间的差异$ git diff [first-branch]...[second-branch] 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}" 显示某次提交的元数据和内容变化$ git show [commit] 显示某次提交发生变化的文件$ git show --name-only [commit] 显示某次提交时，某个文件的内容$ git show [commit]:[filename] 显示当前分支的最近几次提交$ git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 下载远程仓库的所有变动$ git fetch [remote] 显示所有远程仓库$ git remote -v 显示某个远程仓库的信息$ git remote show [remote] 增加一个新的远程仓库，并命名$ git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch] 上传本地指定分支到远程仓库$ git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force 推送所有分支到远程仓库$ git push [remote] --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 恢复暂存区的指定文件到工作区$ git checkout [file] 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file] 恢复暂存区的所有文件到工作区$ git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file] 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit] 新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit] 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 生成一个可供发布的压缩包$ git archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">来自阮一峰的网络日志，列出了 Git 最常用的命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高效编程技巧</title>
      <link href="/myhexo/2020/10/24/xue-xi/python/python-gao-xiao-bian-cheng-ji-qiao/"/>
      <url>/myhexo/2020/10/24/xue-xi/python/python-gao-xiao-bian-cheng-ji-qiao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>工作中经常要处理各种各样的数据，遇到项目赶进度的时候自己写函数容易浪费时间。<br>Python 中有很多内置函数帮你提高工作效率！<br>一：在列表，字典中根据条件筛选数据</p><p>1.假设有一个数字列表 data, 过滤列表中的负数<br>列表推导式</p><pre class="line-numbers language-none"><code class="language-none">result = [i for i in data if i &gt;= 0]filterresult = filter(lambda x: x&gt;= 0, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.学生的数学分数以字典形式存储，筛选其中分数大于 80 分的同学</p><pre class="line-numbers language-none"><code class="language-none">d = {x:randint(50, 100) for x in range(1, 21)}{k: v for k, v in d.items() if v &gt; 80}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二：对字典的键值对进行翻转</p><p>使用 zip() 函数</p><pre><code>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; s1 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s1{'b': 1, 'f': 4, 'g': 3, 'r': 1}&gt;&gt;&gt; d = {k:v for k, v in zip(s1.values(), s1.keys())}&gt;&gt;&gt; d{1: 'r', 4: 'f', 3: 'g'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二. 统计序列中元素出现的频度<br>1.某随机序列中，找到出现次数最高的3个元素，它们出现的次数是多少？</p><p>随机序列如下：</p><pre class="line-numbers language-none"><code class="language-none">data = [randint(0,20) for _ in range(20)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法1: 可以使用字典来统计，以列表中的数据为键，以出现的次数为值</p><pre class="line-numbers language-none"><code class="language-none">from random import randintdef demo():    data = [randint(0, 20) for _ in range(30)]    # 列表中出现数字出现的次数    d = dict.fromkeys(data, 0)    for v in li:        d[v] += 1    return d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2：直接使用 collections 模块下面的 Counter 对象</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data = [randint(0, 20) for _ in range(30)]&gt;&gt;&gt; data[7, 8, 5, 16, 10, 16, 8, 17, 11, 18, 11, 17, 15, 7, 2, 19, 5, 16, 17, 17, 12, 19, 9, 10, 0, 20, 11, 2, 11, 10]&gt;&gt;&gt; c2 = Counter(data)&gt;&gt;&gt; c2Counter({17: 4, 11: 4, 16: 3, 10: 3, 7: 2, 8: 2, 5: 2, 2: 2, 19: 2, 18: 1, 15: 1, 12: 1, 9: 1, 0: 1, 20: 1})&gt;&gt;&gt; c2[14]4&gt;&gt;&gt; c2.most_common(3)  # 统计频度出现最高的3个数[(17, 4), (11, 4), (16, 3)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对某英文文章单词进行统计，找到出现次数最高的单词以及出现的次数</li></ol><p>通过上面的练习，我们知道可以用 Counter 来解决</p><pre class="line-numbers language-none"><code class="language-none">import refrom collections import Counter# 统计某个文章中英文单词的词频with open('test.txt', 'r', encoding='utf-8')as f:    d = f.read()total = re.split('\W+', d)  # 所有的单词列表result = Counter(total)print(result.most_common(10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.根据字典中值的大小，对字典中的项进行排序</p><p>比如班级中学生的数学成绩以字典的形式存储：</p><pre class="line-numbers language-none"><code class="language-none">{"Lnad": 88, "Jim", 71...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请按数学成绩从高到底进行排序！</p><p>方法1: 利用 zip 将字典转化为元祖，再用 sorted 进行排序</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data = {x: randint(60, 100) for x in "xyzfafs"}&gt;&gt;&gt; data{'x': 73, 'y': 69, 'z': 76, 'f': 61, 'a': 64, 's': 100}&gt;&gt;&gt; sorted(data)['a', 'f', 's', 'x', 'y', 'z']&gt;&gt;&gt; data = sorted(zip(data.values(), data.keys()))&gt;&gt;&gt; data[(61, 'f'), (64, 'a'), (69, 'y'), (73, 'x'), (76, 'z'), (100, 's')]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2: 利用 sorted 函数的 key 参数</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data.items()&gt;&gt;&gt; dict_items([('x', 64), ('y', 74), ('z', 66), ('f', 62), ('a', 80), ('s', 72)])&gt;&gt;&gt; sorted(data.items(), key=lambda x: x[1])[('f', 62), ('x', 64), ('z', 66), ('s', 72), ('y', 74), ('a', 80)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>四. 在多个字典中找到公共键</p><p>实际场景：在足球联赛中，统计每轮比赛都有进球的球员</p><pre><code>第一轮： {"C罗": 1, "苏亚雷斯":2, "托雷斯": 1..}第二轮： {"内马尔": 1, "梅西":2, "姆巴佩": 3..}第三轮： {"姆巴佩": 2, "C罗":2, "内马尔": 1..}</code></pre><p>模拟随机的进球球员和进球数</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; s1 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s1{'d': 3, 'g': 2}&gt;&gt;&gt; s2 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s2{'b': 4, 'g': 1, 'f': 1, 'r': 4, 'd': 3}&gt;&gt;&gt; s3 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s3{'b': 4, 'r': 4, 'a': 2, 'g': 3, 'c': 4}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取字典的 keys，然后取每轮比赛 key 的交集<br>由于比赛轮次数是不定的，所以使用 map 来批量操作</p><pre class="line-numbers language-none"><code class="language-none">map(dict.keys, [s1, s2, s3])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一直累积取其交集， 使用 reduce 函数</p><pre class="line-numbers language-none"><code class="language-none">reduce(lambda x,y: x &amp; y, map(dict.keys, [s1, s2, s3]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一行代码搞定！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Cheatsheet 中文版</title>
      <link href="/myhexo/2020/10/24/xue-xi/python/python-cheatsheet-zh-cn/"/>
      <url>/myhexo/2020/10/24/xue-xi/python/python-cheatsheet-zh-cn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python-备忘录"><a href="#Python-备忘录" class="headerlink" title="Python 备忘录"></a>Python 备忘录</h2><ul><li><a href="#about-">About</a><ul><li><a href="#contribute">Contribute</a></li><li><a href="#read-it">Read It</a></li><li>[Python Cheatsheet](#Python 备忘录)</li><li><a href="#the-zen-of-python">The Zen of Python</a></li><li><a href="#python-basics">Python Basics</a><ul><li><a href="#math-operators">Math Operators</a></li><li><a href="#data-types">Data Types</a></li><li><a href="#string-concatenation-and-replication">String Concatenation and Replication</a></li><li><a href="#variables">Variables</a></li><li><a href="#comments">Comments</a></li><li><a href="#the-print-function">The print() Function</a></li><li><a href="#the-input-function">The input() Function</a></li><li><a href="#the-len-function">The len() Function</a></li><li><a href="#the-str-int-and-float-functions">The str(), int(), and float() Functions</a></li></ul></li><li><a href="#flow-control">Flow Control</a><ul><li><a href="#comparison-operators">Comparison Operators</a></li><li><a href="#boolean-evaluation">Boolean evaluation</a></li><li><a href="#boolean-operators">Boolean Operators</a></li><li><a href="#mixing-boolean-and-comparison-operators">Mixing Boolean and Comparison Operators</a></li><li><a href="#if-statements">if Statements</a></li><li><a href="#else-statements">else Statements</a></li><li><a href="#elif-statements">elif Statements</a></li><li><a href="#while-loop-statements">while Loop Statements</a></li><li><a href="#break-statements">break Statements</a></li><li><a href="#continue-statements">continue Statements</a></li><li><a href="#for-loops-and-the-range-function">for Loops and the range() Function</a></li><li><a href="#for-else-statement">For else statement</a></li><li><a href="#importing-modules">Importing Modules</a></li><li><a href="#ending-a-program-early-with-sysexit">Ending a Program Early with sys.exit()</a></li></ul></li><li><a href="#functions">Functions</a><ul><li><a href="#return-values-and-return-statements">Return Values and return Statements</a></li><li><a href="#the-none-value">The None Value</a></li><li><a href="#keyword-arguments-and-print">Keyword Arguments and print()</a></li><li><a href="#local-and-global-scope">Local and Global Scope</a></li><li><a href="#the-global-statement">The global Statement</a></li></ul></li><li><a href="#exception-handling">Exception Handling</a><ul><li><a href="#basic-exception-handling">Basic exception handling</a></li><li><a href="#final-code-in-exception-handling">Final code in exception handling</a></li></ul></li><li><a href="#lists">Lists</a><ul><li><a href="#getting-individual-values-in-a-list-with-indexes">Getting Individual Values in a List with Indexes</a></li><li><a href="#negative-indexes">Negative Indexes</a></li><li><a href="#getting-sublists-with-slices">Getting Sublists with Slices</a></li><li><a href="#getting-a-lists-length-with-len">Getting a List’s Length with len()</a></li><li><a href="#changing-values-in-a-list-with-indexes">Changing Values in a List with Indexes</a></li><li><a href="#list-concatenation-and-list-replication">List Concatenation and List Replication</a></li><li><a href="#removing-values-from-lists-with-del-statements">Removing Values from Lists with del Statements</a></li><li><a href="#using-for-loops-with-lists">Using for Loops with Lists</a></li><li><a href="#looping-through-multiple-lists-with-zip">Looping Through Multiple Lists with zip()</a></li><li><a href="#the-in-and-not-in-operators">The in and not in Operators</a></li><li><a href="#the-multiple-assignment-trick">The Multiple Assignment Trick</a></li><li><a href="#augmented-assignment-operators">Augmented Assignment Operators</a></li><li><a href="#finding-a-value-in-a-list-with-the-index-method">Finding a Value in a List with the index() Method</a></li><li><a href="#adding-values-to-lists-with-the-append-and-insert-methods">Adding Values to Lists with the append() and insert() Methods</a></li><li><a href="#removing-values-from-lists-with-remove">Removing Values from Lists with remove()</a></li><li><a href="#removing-values-from-lists-with-pop">Removing Values from Lists with pop()</a></li><li><a href="#sorting-the-values-in-a-list-with-the-sort-method">Sorting the Values in a List with the sort() Method</a></li><li><a href="#tuple-data-type">Tuple Data Type</a></li><li><a href="#converting-types-with-the-list-and-tuple-functions">Converting Types with the list() and tuple() Functions</a></li></ul></li><li><a href="#dictionaries-and-structuring-data">Dictionaries and Structuring Data</a><ul><li><a href="#the-keys-values-and-items-methods">The keys(), values(), and items() Methods</a></li><li><a href="#checking-whether-a-key-or-value-exists-in-a-dictionary">Checking Whether a Key or Value Exists in a Dictionary</a></li><li><a href="#the-get-method">The get() Method</a></li><li><a href="#the-setdefault-method">The setdefault() Method</a></li><li><a href="#pretty-printing">Pretty Printing</a></li><li><a href="#merge-two-dictionaries">Merge two dictionaries</a></li></ul></li><li><a href="#sets">sets</a><ul><li><a href="#initializing-a-set">Initializing a set</a></li><li><a href="#sets-unordered-collections-of-unique-elements">sets: unordered collections of unique elements</a></li><li><a href="#set-add-and-update">set add() and update()</a></li><li><a href="#set-remove-and-discard">set remove() and discard()</a></li><li><a href="#set-union">set union()</a></li><li><a href="#set-intersection">set intersection</a></li><li><a href="#set-difference">set difference</a></li><li><a href="#set-symetric_difference">set symetric_difference</a></li></ul></li><li><a href="#itertools-module">itertools Module</a><ul><li><a href="#accumulate">accumulate()</a></li><li><a href="#combinations">combinations()</a></li><li><a href="#combinations_with_replacement">combinations_with_replacement()</a></li><li><a href="#count">count()</a></li><li><a href="#cycle">cycle()</a></li><li><a href="#chain">chain()</a></li><li><a href="#compress">compress()</a></li><li><a href="#dropwhile">dropwhile()</a></li><li><a href="#filterfalse">filterfalse()</a></li><li><a href="#groupby">groupby()</a></li><li><a href="#islice">islice()</a></li><li><a href="#permutations">permutations()</a></li><li><a href="#product">product()</a></li><li><a href="#repeat">repeat()</a></li><li><a href="#starmap">starmap()</a></li><li><a href="#takewhile">takewhile()</a></li><li><a href="#tee">tee()</a></li><li><a href="#zip_longest">zip_longest()</a></li></ul></li><li><a href="#comprehensions">Comprehensions</a><ul><li><a href="#list-comprehension">List comprehension</a></li><li><a href="#set-comprehension">Set comprehension</a></li><li><a href="#dict-comprehension">Dict comprehension</a></li></ul></li><li><a href="#manipulating-strings">Manipulating Strings</a><ul><li><a href="#escape-characters">Escape Characters</a></li><li><a href="#raw-strings">Raw Strings</a></li><li><a href="#multiline-strings-with-triple-quotes">Multiline Strings with Triple Quotes</a></li><li><a href="#indexing-and-slicing-strings">Indexing and Slicing Strings</a></li><li><a href="#the-in-and-not-in-operators-with-strings">The in and not in Operators with Strings</a></li><li><a href="#the-in-and-not-in-operators-with-list">The in and not in Operators with list</a></li><li><a href="#the-upper-lower-isupper-and-islower-string-methods">The upper(), lower(), isupper(), and islower() String Methods</a></li><li><a href="#the-isx-string-methods">The isX String Methods</a></li><li><a href="#the-startswith-and-endswith-string-methods">The startswith() and endswith() String Methods</a></li><li><a href="#the-join-and-split-string-methods">The join() and split() String Methods</a></li><li><a href="#justifying-text-with-rjust-ljust-and-center">Justifying Text with rjust(), ljust(), and center()</a></li><li><a href="#removing-whitespace-with-strip-rstrip-and-lstrip">Removing Whitespace with strip(), rstrip(), and lstrip()</a></li><li><a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install">Copying and Pasting Strings with the pyperclip Module (need pip install)</a></li></ul></li><li><a href="#string-formatting">String Formatting</a><ul><li><a href="#-operator">% operator</a></li><li><a href="#string-formatting-strformat">String Formatting (str.format)</a></li><li><a href="#lazy-string-formatting">Lazy string formatting</a></li><li><a href="#formatted-string-literals-or-f-strings-python-36">Formatted String Literals or f-strings (Python 3.6+)</a></li><li><a href="#template-strings">Template Strings</a></li></ul></li><li><a href="#regular-expressions">Regular Expressions</a><ul><li><a href="#matching-regex-objects">Matching Regex Objects</a></li><li><a href="#grouping-with-parentheses">Grouping with Parentheses</a></li><li><a href="#matching-multiple-groups-with-the-pipe">Matching Multiple Groups with the Pipe</a></li><li><a href="#optional-matching-with-the-question-mark">Optional Matching with the Question Mark</a></li><li><a href="#matching-zero-or-more-with-the-star">Matching Zero or More with the Star</a></li><li><a href="#matching-one-or-more-with-the-plus">Matching One or More with the Plus</a></li><li><a href="#matching-specific-repetitions-with-curly-brackets">Matching Specific Repetitions with Curly Brackets</a></li><li><a href="#greedy-and-nongreedy-matching">Greedy and Nongreedy Matching</a></li><li><a href="#the-findall-method">The findall() Method</a></li><li><a href="#making-your-own-character-classes">Making Your Own Character Classes</a></li><li><a href="#the-caret-and-dollar-sign-characters">The Caret and Dollar Sign Characters</a></li><li><a href="#the-wildcard-character">The Wildcard Character</a></li><li><a href="#matching-everything-with-dot-star">Matching Everything with Dot-Star</a></li><li><a href="#matching-newlines-with-the-dot-character">Matching Newlines with the Dot Character</a></li><li><a href="#review-of-regex-symbols">Review of Regex Symbols</a></li><li><a href="#case-insensitive-matching">Case-Insensitive Matching</a></li><li><a href="#substituting-strings-with-the-sub-method">Substituting Strings with the sub() Method</a></li><li><a href="#managing-complex-regexes">Managing Complex Regexes</a></li></ul></li><li><a href="#handling-file-and-directory-paths">Handling File and Directory Paths</a><ul><li><a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux">Backslash on Windows and Forward Slash on OS X and Linux</a></li><li><a href="#the-current-working-directory">The Current Working Directory</a></li><li><a href="#creating-new-folders">Creating New Folders</a></li><li><a href="#absolute-vs-relative-paths">Absolute vs. Relative Paths</a></li><li><a href="#handling-absolute-and-relative-paths">Handling Absolute and Relative Paths</a></li><li><a href="#checking-path-validity">Checking Path Validity</a></li><li><a href="#finding-file-sizes-and-folder-contents">Finding File Sizes and Folder Contents</a></li><li><a href="#copying-files-and-folders">Copying Files and Folders</a></li><li><a href="#moving-and-renaming-files-and-folders">Moving and Renaming Files and Folders</a></li><li><a href="#permanently-deleting-files-and-folders">Permanently Deleting Files and Folders</a></li><li><a href="#safe-deletes-with-the-send2trash-module">Safe Deletes with the send2trash Module</a></li><li><a href="#walking-a-directory-tree">Walking a Directory Tree</a></li></ul></li><li><a href="#reading-and-writing-files">Reading and Writing Files</a><ul><li><a href="#the-file-readingwriting-process">The File Reading/Writing Process</a></li><li><a href="#opening-and-reading-files-with-the-open-function">Opening and reading files with the open() function</a></li><li><a href="#writing-to-files">Writing to Files</a></li><li><a href="#saving-variables-with-the-shelve-module">Saving Variables with the shelve Module</a></li><li><a href="#saving-variables-with-the-pprintpformat-function">Saving Variables with the pprint.pformat() Function</a></li><li><a href="#reading-zip-files">Reading ZIP Files</a></li><li><a href="#extracting-from-zip-files">Extracting from ZIP Files</a></li><li><a href="#creating-and-adding-to-zip-files">Creating and Adding to ZIP Files</a></li></ul></li><li><a href="#json-yaml-and-configuration-files">JSON, YAML and configuration files</a><ul><li><a href="#json">JSON</a></li><li><a href="#yaml">YAML</a></li><li><a href="#anyconfig">Anyconfig</a></li></ul></li><li><a href="#debugging">Debugging</a><ul><li><a href="#raising-exceptions">Raising Exceptions</a></li><li><a href="#getting-the-traceback-as-a-string">Getting the Traceback as a String</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#logging">Logging</a></li><li><a href="#logging-levels">Logging Levels</a></li><li><a href="#disabling-logging">Disabling Logging</a></li><li><a href="#logging-to-a-file">Logging to a File</a></li></ul></li><li><a href="#lambda-functions">Lambda Functions</a></li><li><a href="#ternary-conditional-operator">Ternary Conditional Operator</a></li><li><a href="#args-and-kwargs">args and kwargs</a><ul><li><a href="#things-to-rememberargs">Things to Remember(args)</a></li><li><a href="#things-to-rememberkwargs">Things to Remember(kwargs)</a></li></ul></li><li><a href="#context-manager">Context Manager</a><ul><li><a href="#with-statement">with statement</a></li><li><a href="#writing-your-own-contextmanager-using-generator-syntax">Writing your own contextmanager using generator syntax</a></li></ul></li><li><a href="#__main__-top-level-script-environment"><code>__main__</code> Top-level script environment</a><ul><li><a href="#advantages">Advantages</a></li></ul></li><li><a href="#setuppy">setup.py</a></li><li><a href="#dataclasses">Dataclasses</a><ul><li><a href="#features">Features</a></li><li><a href="#default-values">Default values</a></li><li><a href="#type-hints">Type hints</a></li></ul></li><li><a href="#virtual-environment">Virtual Environment</a><ul><li><a href="#virtualenv">virtualenv</a></li><li><a href="#poetry">poetry</a></li><li><a href="#pipenv">pipenv</a></li><li><a href="#anaconda">anaconda</a></li></ul></li></ul></li></ul><h2 id="Python-之禅"><a href="#Python-之禅" class="headerlink" title="Python 之禅"></a>Python 之禅</h2><p>来自 <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>:</p><blockquote><p>Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.</p><p>很长时间 Python 工程师 Tim Peters 简洁地输出了 BDFL 指南原则共20条格言用于Python的设计，其中有19条已经被记录下来。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> thisThe Zen of Python<span class="token punctuation">,</span> by Tim PetersBeautiful <span class="token keyword">is</span> better than ugly<span class="token punctuation">.</span>Explicit <span class="token keyword">is</span> better than implicit<span class="token punctuation">.</span>Simple <span class="token keyword">is</span> better than <span class="token builtin">complex</span><span class="token punctuation">.</span>Complex <span class="token keyword">is</span> better than complicated<span class="token punctuation">.</span>Flat <span class="token keyword">is</span> better than nested<span class="token punctuation">.</span>Sparse <span class="token keyword">is</span> better than dense<span class="token punctuation">.</span>Readability counts<span class="token punctuation">.</span>Special cases aren't special enough to <span class="token keyword">break</span> the rules<span class="token punctuation">.</span>Although practicality beats purity<span class="token punctuation">.</span>Errors should never <span class="token keyword">pass</span> silently<span class="token punctuation">.</span>Unless explicitly silenced<span class="token punctuation">.</span>In the face of ambiguity<span class="token punctuation">,</span> refuse the temptation to guess<span class="token punctuation">.</span>There should be one<span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">and</span> preferably only one <span class="token operator">-</span><span class="token operator">-</span>obvious way to do it<span class="token punctuation">.</span>Although that way may <span class="token keyword">not</span> be obvious at first unless you're Dutch<span class="token punctuation">.</span>Now <span class="token keyword">is</span> better than never<span class="token punctuation">.</span>Although never <span class="token keyword">is</span> often better than <span class="token operator">*</span>right<span class="token operator">*</span> now<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> hard to explain<span class="token punctuation">,</span> it's a bad idea<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> easy to explain<span class="token punctuation">,</span> it may be a good idea<span class="token punctuation">.</span>Namespaces are one honking great idea <span class="token operator">-</span><span class="token operator">-</span> let's do more of those!Python 之禅，由Tim Peters编写优美胜于丑陋（Python以编写优美的代码为目标）明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）可读性很重要（优美的代码是可读的）即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span> 风格的代码）当存在多种可能，不要尝试去猜测而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h2><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><p>从 <strong>最高</strong> 到 <strong>最低</strong> 的优先级:</p><table><thead><tr><th align="center">操作符</th><th>操作</th><th>示例</th></tr></thead><tbody><tr><td align="center">**</td><td>指数</td><td><code>2 ** 3 = 8</code></td></tr><tr><td align="center">%</td><td>取模/取余</td><td><code>22 % 8 = 6</code></td></tr><tr><td align="center">//</td><td>整数除法</td><td><code>22 // 8 = 2</code></td></tr><tr><td align="center">/</td><td>Division</td><td><code>22 / 8 = 2.75</code></td></tr><tr><td align="center">*</td><td>乘法</td><td><code>3 * 3 = 9</code></td></tr><tr><td align="center">-</td><td>减法</td><td><code>5 - 2 = 3</code></td></tr><tr><td align="center">+</td><td>加法</td><td><code>2 + 2 = 4</code></td></tr></tbody></table><p>在交互式shell中表达式示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">//</span> <span class="token number">7</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">16.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>数据类型</th><th>示例</th></tr></thead><tbody><tr><td>整数</td><td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td></tr><tr><td>浮点型</td><td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td></tr><tr><td>字符串</td><td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="字符串连接和重复"><a href="#字符串连接和重复" class="headerlink" title="字符串连接和重复"></a>字符串连接和重复</h3><p>字符串连接:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token string">'Bob'</span><span class="token string">'AliceBob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注释: 避免 + 操作符对字符串连接，提升格式化字符串。</p><p>字符串重复:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'AliceAliceAliceAliceAlice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>你能命名一个变量，只要符合以下规则：</p><ol><li>它只能是一个词。</li><li>它只能用字母、数字和下划线。</li><li>它不能以一个数字开头。</li><li>变量名以下划线开头可以作为特殊意义。</li></ol><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_spam</code> 不应当被再次用在代码中。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>行内注释:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># This is a comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># This is a# multiline comment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>带注释的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意注释签的的两个空格。</p><p>函数文档字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This is a function docstring    You can also use:    ''' Function Docstring '''    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print() 函数"></a>print() 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span>Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>Hello world! <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="input-函数"><a href="#input-函数" class="headerlink" title="input() 函数"></a>input() 函数</h3><p>示例代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span>   <span class="token comment"># ask for their name</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> myName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'It is good to meet you, {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">)</span>What <span class="token keyword">is</span> your name?AlIt <span class="token keyword">is</span> good to meet you<span class="token punctuation">,</span> Al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="len-函数"><a href="#len-函数" class="headerlink" title="len() 函数"></a>len() 函数</h3><p>计算出一个字符串中字符数量为整数:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：字符串、列表、字典等是否为空的测试不应当用 len,而应该直接用布尔判断。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the list is not empty!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="str-int-和-float-函数"><a href="#str-int-和-float-函数" class="headerlink" title="str(), int(), 和 float() 函数"></a>str(), int(), 和 float() 函数</h3><p>整数转字符串或浮点型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token string">'29'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am {} years old.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>I am <span class="token number">29</span> years old<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token string">'-3.14'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>浮点型转整数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><table><thead><tr><th>操作符</th><th>意义</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td></tr></tbody></table><p>这些操作结果是True或False依赖于你提供给它们的值。</p><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'Hello'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'dog'</span> <span class="token operator">!=</span> <span class="token string">'cat'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token string">'42'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔判断"><a href="#布尔判断" class="headerlink" title="布尔判断"></a>布尔判断</h3><p>绝不要用<code>==</code>或<code>!=</code>操作布尔判断。用 <code>is</code> 或 <code>is not</code>操作，或者用隐式布尔判断。</p><p>NO (即使它们是有效的Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YES (即使它们是有效的Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些语句是等效的：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有这些也一样:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if not a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><p>有三种布尔操作符： and, or, 和 not。</p><p>这是and操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>True and True</code></td><td><code>True</code></td></tr><tr><td><code>True and False</code></td><td><code>False</code></td></tr><tr><td><code>False and True</code></td><td><code>False</code></td></tr><tr><td><code>False and False</code></td><td><code>False</code></td></tr></tbody></table><p>这是 or 操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>True or True</code></td><td><code>True</code></td></tr><tr><td><code>True or False</code></td><td><code>True</code></td></tr><tr><td><code>False or True</code></td><td><code>True</code></td></tr><tr><td><code>False or False</code></td><td><code>False</code></td></tr></tbody></table><p>这是 not 操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>not True</code></td><td><code>False</code></td></tr><tr><td><code>not False</code></td><td><code>True</code></td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="混合布尔和比较操作符："><a href="#混合布尔和比较操作符：" class="headerlink" title="混合布尔和比较操作符："></a>混合布尔和比较操作符：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你也可以用多个布尔操作符在一个表达式，连同比较操作符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="elif-语句"><a href="#elif-语句" class="headerlink" title="elif 语句"></a>elif 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are neither Alice nor a little kid.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> spam <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span>    spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>如果执行到达一个 break 语句，它立即退出这个 while 循环子句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please type your name.'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'your name'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thank you!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>当程序执行到达 continue 语句，这个程序执行立即跳回这个循环的开始。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Who are you?'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">'Joe'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Joe. What is the password? (It is a fish.)'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'swordfish'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Access granted.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="for-循环和-range-函数"><a href="#for-循环和-range-函数" class="headerlink" title="for 循环和 range() 函数"></a>for 循环和 range() 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Jimmy Five Times ({})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>My name <span class="token keyword">is</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <em>range()</em> 函数也能用三个函数调用。开始的两个参数是开始和结束的值，第三个参数是步长。这个步长是每次迭代后变量增加的数量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你甚至可以用一个负数作为步长使for 循环计数递减而不是递增。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">4</span><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For-else-语句"><a href="#For-else-语句" class="headerlink" title="For else 语句"></a>For else 语句</h3><p>This allows to specify a statement to execute in case of the full loop has been executed. Only<br>useful when a <code>break</code> condition can occur in the loop:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"only executed when no item of the list is equal to 3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os<span class="token punctuation">,</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-sys-exit-提前结束一个程序"><a href="#使用-sys-exit-提前结束一个程序" class="headerlink" title="使用 sys.exit() 提前结束一个程序"></a>使用 sys.exit() 提前结束一个程序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Type exit to exit.'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You typed {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Hello AliceHello Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="返回值和返回语句"><a href="#返回值和返回语句" class="headerlink" title="返回值和返回语句"></a>返回值和返回语句</h3><p>当用 def 语句创建一个函数，你可以用 return 语句指定一个返回值。 一个 return 语句有下面的内容构成：</p><ul><li><p>return 关键字。</p></li><li><p>这个函数应当返回的值或者表达式。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>answerNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> answerNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is certain'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is decidedly so'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Yes'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Reply hazy try again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Ask again later'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Concentrate and ask again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'My reply is no'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Outlook not so good'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Very doubtful'</span>r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fortune <span class="token operator">=</span> getAnswer<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fortune<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span>Hello!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="关键字和-print"><a href="#关键字和-print" class="headerlink" title="关键字和 print()"></a>关键字和 print()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span>HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">)</span>cats dogs mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>cats<span class="token punctuation">,</span>dogs<span class="token punctuation">,</span>mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="局部和全局范围"><a href="#局部和全局范围" class="headerlink" title="局部和全局范围"></a>局部和全局范围</h3><ul><li><p>全局范围内的代码不能使用任何局部变量。</p></li><li><p>但是，一个局部作用于可以访问全局变量。</p></li><li><p>在一个函数的局部作用域的代码不能使用在任何其他局部作用域变量。</p></li><li><p>如果在不同的作用域你可以对不同的变量使用相同的名称。也就是说，可以有一个名为 spam 的局部变量和一个同样名为 spam 的全局变量。</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="一个全局语句"><a href="#一个全局语句" class="headerlink" title="一个全局语句"></a>一个全局语句</h3><p>如果你需要从一个函数中修改一个全局变量，用 global 语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">global</span> eggs<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     eggs <span class="token operator">=</span> <span class="token string">'spam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token string">'global'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有四个规则判断是否一个变量是在局部范围或全局范围：</p><ol><li><p>如果一个变量用在全局范围（即，所有函数外），那么它总是一个全局变量。</p></li><li><p>如果在一个函数中的变量前有 global 语句，它是一个全局变量。</p></li><li><p>否则，如果在函数中变量用来作为赋值语句，它是一个局部变量。</p></li><li><p>但是如果变量未在赋值语句中使用，它是一个全局变量。</p></li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="基本异常处理"><a href="#基本异常处理" class="headerlink" title="基本异常处理"></a>基本异常处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">21.0</span><span class="token number">3.5</span>Error<span class="token punctuation">:</span> Invalid argument<span class="token punctuation">:</span> division by zero<span class="token boolean">None</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="异常处理中的最终代码"><a href="#异常处理中的最终代码" class="headerlink" title="异常处理中的最终代码"></a>异常处理中的最终代码</h3><p>在 <code>finally</code> 区间的代码总是被执行，无论是否异常被抛出，即使未捕获到异常。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- division finished --"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">21.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Error<span class="token punctuation">:</span> Invalid Argument division by zero<span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="在带有索引的列表中获取特定的值"><a href="#在带有索引的列表中获取特定的值" class="headerlink" title="在带有索引的列表中获取特定的值"></a>在带有索引的列表中获取特定的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'cat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'rat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="负数的索引"><a href="#负数的索引" class="headerlink" title="负数的索引"></a>负数的索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The {} is afraid of the {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'The elephant is afraid of the bat.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="以切片的方获取子列表"><a href="#以切片的方获取子列表" class="headerlink" title="以切片的方获取子列表"></a>以切片的方获取子列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切片完整列表将执行复制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2 <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-len-获取列表的长度"><a href="#用-len-获取列表的长度" class="headerlink" title="用 len() 获取列表的长度"></a>用 len() 获取列表的长度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用索引改变列表中的值"><a href="#用索引改变列表中的值" class="headerlink" title="用索引改变列表中的值"></a>用索引改变列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aardvark'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12345</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="列表连接和列表复制"><a href="#列表连接和列表复制" class="headerlink" title="列表连接和列表复制"></a>列表连接和列表复制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-del-语句移除列表中的值"><a href="#用-del-语句移除列表中的值" class="headerlink" title="用 del 语句移除列表中的值"></a>用 del 语句移除列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-for-循环列表"><a href="#用-for-循环列表" class="headerlink" title="用 for 循环列表"></a>用 for 循环列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> supply <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Index {} in supplies is: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> supply<span class="token punctuation">)</span><span class="token punctuation">)</span>Index <span class="token number">0</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> pensIndex <span class="token number">1</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> staplersIndex <span class="token number">2</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> flame<span class="token operator">-</span>throwersIndex <span class="token number">3</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> binders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-zip-遍历多个列表"><a href="#使用-zip-遍历多个列表" class="headerlink" title="使用 zip() 遍历多个列表"></a>使用 zip() 遍历多个列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Elizabeth'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} years old'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>Pete <span class="token keyword">is</span> <span class="token number">6</span> years oldJohn <span class="token keyword">is</span> <span class="token number">23</span> years oldElizabeth <span class="token keyword">is</span> <span class="token number">44</span> years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="in-和-not-in-操作符"><a href="#in-和-not-in-操作符" class="headerlink" title="in 和 not in 操作符"></a>in 和 not in 操作符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="多重赋值技巧"><a href="#多重赋值技巧" class="headerlink" title="多重赋值技巧"></a>多重赋值技巧</h3><p>多重赋值是一种快捷方式，可让您在一行代码中为多个变量分配列表中的值。因此，不要这样做：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> color <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> disposition <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以输入以下代码行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> disposition <span class="token operator">=</span> cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多重赋值技巧也可以用来交换两个变量的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token string">'Alice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="增强赋值操作符"><a href="#增强赋值操作符" class="headerlink" title="增强赋值操作符"></a>增强赋值操作符</h3><table><thead><tr><th>操作符</th><th>相当于</th></tr></thead><tbody><tr><td><code>spam += 1</code></td><td><code>spam = spam + 1</code></td></tr><tr><td><code>spam -= 1</code></td><td><code>spam = spam - 1</code></td></tr><tr><td><code>spam *= 1</code></td><td><code>spam = spam * 1</code></td></tr><tr><td><code>spam /= 1</code></td><td><code>spam = spam / 1</code></td></tr><tr><td><code>spam %= 1</code></td><td><code>spam = spam % 1</code></td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">+=</span> <span class="token string">' world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">*=</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon<span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-index-方法在列表中查找值"><a href="#使用-index-方法在列表中查找值" class="headerlink" title="使用 index() 方法在列表中查找值"></a>使用 index() 方法在列表中查找值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Fat-tail'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Pooka'</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-append-和-insert-方法在列表中添加值"><a href="#使用-append-和-insert-方法在列表中添加值" class="headerlink" title="使用 append() 和 insert() 方法在列表中添加值"></a>使用 append() 和 insert() 方法在列表中添加值</h3><p><strong>append()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'moose'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insert()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-remove-从列表中移除值"><a href="#使用-remove-从列表中移除值" class="headerlink" title="使用 remove() 从列表中移除值"></a>使用 remove() 从列表中移除值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bat'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果该值在列表中出现多次，则只会删除该值的第一个实例。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-pop-移除列表中的值"><a href="#使用-pop-移除列表中的值" class="headerlink" title="使用 pop() 移除列表中的值"></a>使用 pop() 移除列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'elephant'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'cat'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-sort-方法排序列表中的值"><a href="#使用-sort-方法排序列表中的值" class="headerlink" title="使用 sort() 方法排序列表中的值"></a>使用 sort() 方法排序列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以为 reverse 关键字参数传递 True，以使 sort() 以相反的顺序对值进行排序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'elephants'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'ants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你需要以常规字母顺序对值进行排序，请在 sort() 方法传递 str.lower 关键字参数来调用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用内置函数 <code>sorted</code> 去返回一个新列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="元组数据类型"><a href="#元组数据类型" class="headerlink" title="元组数据类型"></a>元组数据类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>元组和列表不同的主要方式是元组像字符串一样，不可变。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-list-和-tuple-函数转变类型"><a href="#使用-list-和-tuple-函数转变类型" class="headerlink" title="使用 list() 和 tuple() 函数转变类型"></a>使用 list() 和 tuple() 函数转变类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="字典和结构化数据"><a href="#字典和结构化数据" class="headerlink" title="字典和结构化数据"></a>字典和结构化数据</h2><p>字典示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myCat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'gray'</span><span class="token punctuation">,</span> <span class="token string">'disposition'</span><span class="token punctuation">:</span> <span class="token string">'loud'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="keys-values-和-items-方法"><a href="#keys-values-和-items-方法" class="headerlink" title="keys(), values() 和 items() 方法"></a>keys(), values() 和 items() 方法</h3><p>values():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>red<span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keys():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>colorage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>items():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 keys(), values() 和 items() 方法, for循环可以分别遍历字典中的键, 值 或者 键值对。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Key: {} Value: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Key<span class="token punctuation">:</span> age Value<span class="token punctuation">:</span> <span class="token number">42</span>Key<span class="token punctuation">:</span> color Value<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="检查字典中是否存在键或值"><a href="#检查字典中是否存在键或值" class="headerlink" title="检查字典中是否存在键或值"></a>检查字典中是否存在键或值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'name'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Zophie'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can omit the call to keys() when checking for a key</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h3><p>获取具有两个参数：键和默认值（如果键不存在）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> picnic_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'cups'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} cups.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cups'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 2 cups.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} eggs.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eggs'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 0 eggs.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault() 方法"></a>setdefault() 方法</h3><p>让我们考虑下面的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token punctuation">:</span>    spam<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>setdefault</code> 我们能更简洁地写出同样的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="漂亮的打印"><a href="#漂亮的打印" class="headerlink" title="漂亮的打印"></a>漂亮的打印</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> message <span class="token operator">=</span> 'It was a bright cold day <span class="token keyword">in</span> April<span class="token punctuation">,</span> <span class="token keyword">and</span> the clocks were striking<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thirteen<span class="token punctuation">.</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> character <span class="token keyword">in</span> message<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>character<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a>合并两个字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in Python 3.5+:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">**</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment"># in Python 2.7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合sets"><a href="#集合sets" class="headerlink" title="集合sets"></a>集合sets</h2><p>来自 Python 3 <a href="https://docs.python.org/3/tutorial/datastructures.html">文档</a></p><blockquote><p>集合是由不重复的元素组成的无序容器。基本用法包括成员检测和去除重复元素。集合对象也支持像合集，交集和差集对等差数学运算。</p></blockquote><h3 id="初始化一个集合"><a href="#初始化一个集合" class="headerlink" title="初始化一个集合"></a>初始化一个集合</h3><p>有两种方式创建集合：用花括号 <code>{}</code> 和内置函数 <code>set()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当创建一个空集合，确保不要使用大花括号 <code>{}</code> 否则你将得到一个空的字典。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sets-独特元素的无需结合。"><a href="#sets-独特元素的无需结合。" class="headerlink" title="sets: 独特元素的无需结合。"></a>sets: 独特元素的无需结合。</h3><p>一个集合自动移除所有重复的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为一个无序的数据类型，他们不能被索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置add-和update"><a href="#设置add-和update" class="headerlink" title="设置add() 和update()"></a>设置add() 和update()</h3><p>用 <code>add()</code> 方法我们能增加一个元素到集合中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>update()</code>, 更新多个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>  <span class="token comment"># remember, sets automatically remove duplicates</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置-remove-和-discard"><a href="#设置-remove-和-discard" class="headerlink" title="设置 remove() 和 discard()"></a>设置 remove() 和 discard()</h3><p>这两个方法将移除一个元素从集合，但是如果key 值不存在 <code>remove()</code> 将抛出一个 <code>key error</code> 。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>discard()</code> 不会抛出任何错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置union"><a href="#设置union" class="headerlink" title="设置union()"></a>设置union()</h3><p><code>union()</code> 或<code>|</code> 将创建一个包含所提供集合中的所有元素的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 | s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h3><p><code>intersection</code> 或 <code>&amp;</code> 将返回一个仅包含两个集合共有元素的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>  <span class="token comment"># or 's1 &amp; s2 &amp; s3'</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set difference"></a>set difference</h3><p><code>difference</code> 或<code>-</code> 将返回仅有一第一个集合（调用集合）仅有的唯一元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 - s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment"># or 's2 - s1'</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-symetric-difference"><a href="#set-symetric-difference" class="headerlink" title="set symetric_difference"></a>set symetric_difference</h3><p><code>symetric_difference</code> 或 <code>^</code> 将返回他们非共有的元素集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 ^ s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="itertools-模块"><a href="#itertools-模块" class="headerlink" title="itertools 模块"></a>itertools 模块</h2><p><em>itertools</em> 模块是一个工具集合，这个工具旨在有效地快速高效使用内存当操作遍历器时（如 列表 或字典）。</p><p>来自Python3的官方文档：</p><blockquote><p>这个模块标准化了一个快速，内存高效的工具核心集，这些工具自身或者结合很有用。它们共同在纯Python中构成了一个“迭代器代数”使构建特殊的简洁高效工具成为可能。</p></blockquote><p> <em>itertools</em> 模块来自标准库，必须导入。</p><p><a href="https://docs.python.org/3/library/operator.html">operator</a> 模块也将被用到。这个模块不是必须的当用 itertools 时, 但对于下面这些例子是需要的。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h3><p>制作一个返回函数结果的迭代器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">6</span><span class="token number">24</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>operator.mul 取两个数字，并将它们相乘。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">24</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递函数是可选的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">7</span><span class="token number">13</span><span class="token number">17</span><span class="token number">22</span><span class="token number">31</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果未指定函数，则对各项相加：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">5</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token number">13</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token number">17</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token number">22</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token number">31</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><p>接受一个可迭代的整数。这个将闯将所有拥有r个成员的唯一组合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><p>就像 combinations()，但允许个别元素重复多次。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'circle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>返回以数字开始步调平稳的迭代器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token number">10</span><span class="token number">13</span><span class="token number">16</span><span class="token number">19</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle()"></a>cycle()</h3><p>此函数通过一个迭代器无限循环。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子    :</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'violet'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>redorangeyellowgreenbluevioletredorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当达到迭代器的末尾会再次从头重新开始。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="chain"><a href="#chain" class="headerlink" title="chain()"></a>chain()</h3><p>传递可迭代的一个系列并返回他们作为一个长的可迭代器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenbluecircletrianglesquarepentagon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="compress"><a href="#compress" class="headerlink" title="compress()"></a>compress()</h3><p>过滤一个可迭代对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>circlesquare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile()"></a>dropwhile()</h3><p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse()"></a>filterfalse()</h3><p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h3><p>Simply put, this function groups things together.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'faction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="islice"><a href="#islice" class="headerlink" title="islice()"></a>islice()</h3><p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><p>Creates the cartesian products from a series of iterables.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>This function will repeat an object over and over again. Unless, there is a times argument.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>spamspamspam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap()"></a>starmap()</h3><p>Makes an iterator that computes the function using arguments obtained from the iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">12</span><span class="token number">32</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile()"></a>takewhile()</h3><p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="tee"><a href="#tee" class="headerlink" title="tee()"></a>tee()</h3><p>Return n independent iterators from a single iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest()"></a>zip_longest()</h3><p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="推导式-Comprehensions"><a href="#推导式-Comprehensions" class="headerlink" title="推导式 Comprehensions"></a>推导式 Comprehensions</h2><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set-comprehension"><a href="#Set-comprehension" class="headerlink" title="Set comprehension"></a>Set comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"ABC"</span><span class="token punctuation">,</span> <span class="token string">"DEF"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Dict-comprehension"><a href="#Dict-comprehension" class="headerlink" title="Dict comprehension"></a>Dict comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'Pooka'</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A List comprehension can be generated from a dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Oooka'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'NAME:POOKA'</span><span class="token punctuation">,</span> <span class="token string">'FIRST_NAME:OOOKA'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Manipulating-Strings"><a href="#Manipulating-Strings" class="headerlink" title="Manipulating Strings"></a>Manipulating Strings</h2><h3 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h3><table><thead><tr><th>Escape character</th><th>Prints as</th></tr></thead><tbody><tr><td><code>\'</code></td><td>Single quote</td></tr><tr><td><code>\"</code></td><td>Double quote</td></tr><tr><td><code>\t</code></td><td>Tab</td></tr><tr><td><code>\n</code></td><td>Newline (line break)</td></tr><tr><td><code>\\</code></td><td>Backslash</td></tr></tbody></table><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello there!\nHow are you?\nI\'m doing fine."</span><span class="token punctuation">)</span>Hello there!How are you?I'm doing fine<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Raw-Strings"><a href="#Raw-Strings" class="headerlink" title="Raw Strings"></a>Raw Strings</h3><p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'That is Carol\'s cat.'</span><span class="token punctuation">)</span>That <span class="token keyword">is</span> Carol\'s cat<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: mostly used for regular expression definition (see <code>re</code> package)</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Multiline-Strings-with-Triple-Quotes"><a href="#Multiline-Strings-with-Triple-Quotes" class="headerlink" title="Multiline Strings with Triple Quotes"></a>Multiline Strings with Triple Quotes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt; Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,&gt;&gt;&gt; Bob'''</span><span class="token punctuation">)</span>Dear Alice<span class="token punctuation">,</span>Eve's cat has been arrested <span class="token keyword">for</span> catnapping<span class="token punctuation">,</span> cat burglary<span class="token punctuation">,</span> <span class="token keyword">and</span> extortion<span class="token punctuation">.</span>Sincerely<span class="token punctuation">,</span>Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> textwrap <span class="token keyword">import</span> dedent<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&gt;&gt;&gt;         Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt;         Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt;         Sincerely,&gt;&gt;&gt;         Bob&gt;&gt;&gt;         '''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This generates the same string than before.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Indexing-and-Slicing-Strings"><a href="#Indexing-and-Slicing-Strings" class="headerlink" title="Indexing and Slicing Strings"></a>Indexing and Slicing Strings</h3><pre><code>H   e   l   l   o       w   o   r   l   d    !0   1   2   3   4   5   6   7   8   9   10   11</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'H'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token string">'world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'Hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!dlrow olleH'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-in-and-not-in-Operators-with-Strings"><a href="#The-in-and-not-in-Operators-with-Strings" class="headerlink" title="The in and not in Operators with Strings"></a>The in and not in Operators with Strings</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">''</span> <span class="token keyword">in</span> <span class="token string">'spam'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cats'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'cats and dogs'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators-with-list"><a href="#The-in-and-not-in-Operators-with-list" class="headerlink" title="The in and not in Operators with list"></a>The in and not in Operators with list</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">in</span> a<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">in</span> a<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-upper-lower-isupper-and-islower-String-Methods"><a href="#The-upper-lower-isupper-and-islower-String-Methods" class="headerlink" title="The upper(), lower(), isupper(), and islower() String Methods"></a>The upper(), lower(), isupper(), and islower() String Methods</h3><p><code>upper()</code> and <code>lower()</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'HELLO WORLD!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>isupper() and islower():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-isX-String-Methods"><a href="#The-isX-String-Methods" class="headerlink" title="The isX String Methods"></a>The isX String Methods</h3><ul><li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li><li><strong>isalnum()</strong> returns True if the string consists only of letters and numbers and is not blank.</li><li><strong>isdecimal()</strong> returns True if the string consists only of numeric characters and is not blank.</li><li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li><li><strong>istitle()</strong> returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.</li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-startswith-and-endswith-String-Methods"><a href="#The-startswith-and-endswith-String-Methods" class="headerlink" title="The startswith() and endswith() String Methods"></a>The startswith() and endswith() String Methods</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-join-and-split-String-Methods"><a href="#The-join-and-split-String-Methods" class="headerlink" title="The join() and split() String Methods"></a>The join() and split() String Methods</h3><p>join():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'rats'</span><span class="token punctuation">,</span> <span class="token string">'bats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'cats, rats, bats'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'My name is Simon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'MyABCnameABCisABCSimon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>split():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'MyABCnameABCisABCSimon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My na'</span><span class="token punctuation">,</span> <span class="token string">'e is Si'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Justifying-Text-with-rjust-ljust-and-center"><a href="#Justifying-Text-with-rjust-ljust-and-center" class="headerlink" title="Justifying Text with rjust(), ljust(), and center()"></a>Justifying Text with rjust(), ljust(), and center()</h3><p>rjust() and ljust():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'     Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'               Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello World'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'         Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'Hello     '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token string">'***************Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token string">'Hello---------------'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>center():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'       Hello       '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token string">'=======Hello========'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Removing-Whitespace-with-strip-rstrip-and-lstrip"><a href="#Removing-Whitespace-with-strip-rstrip-and-lstrip" class="headerlink" title="Removing Whitespace with strip(), rstrip(), and lstrip()"></a>Removing Whitespace with strip(), rstrip(), and lstrip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'    Hello World     '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'    Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'SpamSpamBaconSpamEggsSpamSpam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'ampS'</span><span class="token punctuation">)</span><span class="token string">'BaconSpamEggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install"><a href="#Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install" class="headerlink" title="Copying and Pasting Strings with the pyperclip Module (need pip install)"></a>Copying and Pasting Strings with the pyperclip Module (need pip install)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pyperclip<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>paste<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a>String Formatting</h2><h3 id="operator"><a href="#operator" class="headerlink" title="% operator"></a>% operator</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Pete'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token string">"Hello Pete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I have %x apples'</span> <span class="token operator">%</span> num<span class="token string">"I have 5 apples"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note: For new code, using <a href="#string-formatting-strformat">str.format</a> or <a href="#formatted-string-literals-or-f-strings-python-36">f-strings</a> (Python 3.6+) is strongly recommended over the <code>%</code> operator.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="String-Formatting-str-format"><a href="#String-Formatting-str-format" class="headerlink" title="String Formatting (str.format)"></a>String Formatting (str.format)</h3><p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'John'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">20</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {}, my age is {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {0}, my age is {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The official <a href="https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p><blockquote><p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p></blockquote><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Lazy-string-formatting"><a href="#Lazy-string-formatting" class="headerlink" title="Lazy string formatting"></a>Lazy string formatting</h3><p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,<br>the most common being logging:</p><p>Prefer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"alice"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Over:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Formatted-String-Literals-or-f-strings-Python-3-6"><a href="#Formatted-String-Literals-or-f-strings-Python-3-6" class="headerlink" title="Formatted String Literals or f-strings (Python 3.6+)"></a>Formatted String Literals or f-strings (Python 3.6+)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!'</span></span>'Hello Elizabeth!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It is even possible to do inline arithmetic with it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Five plus ten is </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span><span class="token string">'Five plus ten is 15 and not 30.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">'Hey $name!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token string">'Hey Elizabeth!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><ol><li>Import the regex module with <code>import re</code>.</li><li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li><li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li><li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li></ol><p>All the regex functions in Python are in the re module:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Regex-Objects"><a href="#Matching-Regex-Objects" class="headerlink" title="Matching Regex Objects"></a>Matching Regex Objects</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Phone number found: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Phone number found<span class="token punctuation">:</span> <span class="token number">415</span><span class="token operator">-</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Grouping-with-Parentheses"><a href="#Grouping-with-Parentheses" class="headerlink" title="Grouping with Parentheses"></a>Grouping with Parentheses</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'415'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'415'</span><span class="token punctuation">,</span> <span class="token string">'555-4242'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> area_code<span class="token punctuation">,</span> main_number <span class="token operator">=</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>area_code<span class="token punctuation">)</span><span class="token number">415</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>main_number<span class="token punctuation">)</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Multiple-Groups-with-the-Pipe"><a href="#Matching-Multiple-Groups-with-the-Pipe" class="headerlink" title="Matching Multiple Groups with the Pipe"></a>Matching Multiple Groups with the Pipe</h3><p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r’Batman|Tina Fey’ will match either ‘Batman’ or ‘Tina Fey’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hero_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span> <span class="token punctuation">(</span><span class="token string">r'Batman|Tina Fey'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batman and Tina Fey.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Tina Fey and Batman.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Tina Fey'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also use the pipe to match one of several patterns as part of your regex:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(man|mobile|copter|bat)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batmobile lost a wheel'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batmobile'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'mobile'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Optional-Matching-with-the-Question-Mark"><a href="#Optional-Matching-with-the-Question-Mark" class="headerlink" title="Optional Matching with the Question Mark"></a>Optional Matching with the Question Mark</h3><p>The ? character flags the group that precedes it as an optional part of the pattern.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)?man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Zero-or-More-with-the-Star"><a href="#Matching-Zero-or-More-with-the-Star" class="headerlink" title="Matching Zero or More with the Star"></a>Matching Zero or More with the Star</h3><p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)*man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-One-or-More-with-the-Plus"><a href="#Matching-One-or-More-with-the-Plus" class="headerlink" title="Matching One or More with the Plus"></a>Matching One or More with the Plus</h3><p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)+man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Specific-Repetitions-with-Curly-Brackets"><a href="#Matching-Specific-Repetitions-with-Curly-Brackets" class="headerlink" title="Matching Specific Repetitions with Curly Brackets"></a>Matching Specific Repetitions with Curly Brackets</h3><p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string ‘HaHaHa’, but it will not match ‘HaHa’, since the latter has only two repeats of the (Ha) group.</p><p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match ‘HaHaHa’, ‘HaHaHaHa’, and ‘HaHaHaHaHa’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Ha'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Greedy-and-Nongreedy-Matching"><a href="#Greedy-and-Nongreedy-Matching" class="headerlink" title="Greedy and Nongreedy Matching"></a>Greedy and Nongreedy Matching</h3><p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}?'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> nongreedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-findall-Method"><a href="#The-findall-Method" class="headerlink" title="The findall() Method"></a>The findall() Method</h3><p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span> <span class="token comment"># has no groups</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Cell: 415-555-9999 Work: 212-555-0000'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'415-555-9999'</span><span class="token punctuation">,</span> <span class="token string">'212-555-0000'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To summarize what the findall() method returns, remember the following:</p><ul><li><p>When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as [‘415-555-9999’, ‘212-555-0000’].</p></li><li><p>When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [(‘415’, ‘555’, ‘9999’), (‘212’, ‘555’, ‘0000’)].</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Making-Your-Own-Character-Classes"><a href="#Making-Your-Own-Character-Classes" class="headerlink" title="Making Your Own Character Classes"></a>Making Your Own Character Classes</h3><p>There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p><p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> '<span class="token string">', '</span><span class="token string">B', '</span><span class="token string">B', '</span>Y<span class="token string">', '</span> <span class="token string">', '</span><span class="token string-interpolation"><span class="token string">F', '</span></span>D<span class="token string">', '</span><span class="token punctuation">.</span>'<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Caret-and-Dollar-Sign-Characters"><a href="#The-Caret-and-Dollar-Sign-Characters" class="headerlink" title="The Caret and Dollar Sign Characters"></a>The Caret and Dollar Sign Characters</h3><ul><li><p>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</p></li><li><p>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</p></li><li><p>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</p></li></ul><p>The r’^Hello’ regular expression string matches strings that begin with ‘Hello’:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^Hello'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'He said hello.'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The r’\d$‘ regular expression string matches strings that end with a numeric character from 0 to 9:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\d+$'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'1234567890'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12345xyz67890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12 34567890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Wildcard-Character"><a href="#The-Wildcard-Character" class="headerlink" title="The Wildcard Character"></a>The Wildcard Character</h3><p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.at'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'The cat in the hat sat on the flat mat.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'sat'</span><span class="token punctuation">,</span> <span class="token string">'lat'</span><span class="token punctuation">,</span> <span class="token string">'mat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Everything-with-Dot-Star"><a href="#Matching-Everything-with-Dot-Star" class="headerlink" title="Matching Everything with Dot-Star"></a>Matching Everything with Dot-Star</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'First Name: (.*) Last Name: (.*)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> name_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'First Name: Al Last Name: Sweigart'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'Al'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'Sweigart'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*?&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> nongreedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Newlines-with-the-Dot-Character"><a href="#Matching-Newlines-with-the-Dot-Character" class="headerlink" title="Matching Newlines with the Dot Character"></a>Matching Newlines with the Dot Character</h3><p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Review-of-Regex-Symbols"><a href="#Review-of-Regex-Symbols" class="headerlink" title="Review of Regex Symbols"></a>Review of Regex Symbols</h3><table><thead><tr><th>Symbol</th><th>Matches</th></tr></thead><tbody><tr><td><code>?</code></td><td>zero or one of the preceding group.</td></tr><tr><td><code>*</code></td><td>zero or more of the preceding group.</td></tr><tr><td><code>+</code></td><td>one or more of the preceding group.</td></tr><tr><td><code>{n}</code></td><td>exactly n of the preceding group.</td></tr><tr><td><code>{n,}</code></td><td>n or more of the preceding group.</td></tr><tr><td><code>{,m}</code></td><td>0 to m of the preceding group.</td></tr><tr><td><code>{n,m}</code></td><td>at least n and at most m of the preceding p.</td></tr><tr><td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td><td>performs a nongreedy match of the preceding p.</td></tr><tr><td><code>^spam</code></td><td>means the string must begin with spam.</td></tr><tr><td><code>spam$</code></td><td>means the string must end with spam.</td></tr><tr><td><code>.</code></td><td>any character, except newline characters.</td></tr><tr><td><code>\d</code>, <code>\w</code>, and <code>\s</code></td><td>a digit, word, or space character, respectively.</td></tr><tr><td><code>\D</code>, <code>\W</code>, and <code>\S</code></td><td>anything except a digit, word, or space, respectively.</td></tr><tr><td><code>[abc]</code></td><td>any character between the brackets (such as a, b, ).</td></tr><tr><td><code>[^abc]</code></td><td>any character that isn’t between the brackets.</td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Case-Insensitive-Matching"><a href="#Case-Insensitive-Matching" class="headerlink" title="Case-Insensitive Matching"></a>Case-Insensitive Matching</h3><p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'robocop'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Robocop is part man, part machine, all cop.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'ROBOCOP protects the innocent.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ROBOCOP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Al, why does your programming book talk about robocop so much?'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Substituting-Strings-with-the-sub-Method"><a href="#Substituting-Strings-with-the-sub-Method" class="headerlink" title="Substituting Strings with the sub() Method"></a>Substituting Strings with the sub() Method</h3><p>The sub() method for Regex objects is passed two arguments:</p><ol><li>The first argument is a string to replace any matches.</li><li>The second is the string for the regular expression.</li></ol><p>The sub() method returns a string with the substitutions applied:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent \w+'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'CENSORED'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice gave the secret documents to Agent Bob.'</span><span class="token punctuation">)</span><span class="token string">'CENSORED gave the secret documents to CENSORED.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Another example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent (\w)\w*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\1****'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'</span><span class="token punctuation">)</span>A<span class="token operator">**</span><span class="token operator">**</span> told C<span class="token operator">**</span><span class="token operator">**</span> that E<span class="token operator">**</span><span class="token operator">**</span> knew B<span class="token operator">**</span><span class="token operator">**</span> was a double agent<span class="token punctuation">.</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Managing-Complex-Regexes"><a href="#Managing-Complex-Regexes" class="headerlink" title="Managing Complex Regexes"></a>Managing Complex Regexes</h3><p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p><p>Now instead of a hard-to-read regular expression like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>you can spread the regular expression over multiple lines with comments like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r'''(    (\d{3}|\(\d{3}\))?            # area code    (\s|-|\.)?                    # separator    \d{3}                         # first 3 digits    (\s|-|\.)                     # separator    \d{4}                         # last 4 digits    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension    )'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Handling-File-and-Directory-Paths"><a href="#Handling-File-and-Directory-Paths" class="headerlink" title="Handling File and Directory Paths"></a>Handling File and Directory Paths</h2><p>There are two main modules in Python that deals with path manipulation.<br>One is the <code>os.path</code> module and the other is the <code>pathlib</code> module.<br>The <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way<br>to handle file system paths.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux"><a href="#Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux" class="headerlink" title="Backslash on Windows and Forward Slash on OS X and Linux"></a>Backslash on Windows and Forward Slash on OS X and Linux</h3><p>On Windows, paths are written using backslashes (<code>\</code>) as the separator between<br>folder names. On Unix based operating system such as macOS, Linux, and BSDs,<br>the forward slash (<code>/</code>) is used as the path separator. Joining paths can be<br>a headache if your code needs to work on different platforms.</p><p>Fortunately, Python provides easy ways to handle this. We will showcase<br>how to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token string">'usr\\bin\\spam'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">'bin'</span> <span class="token operator">/</span> <span class="token string">'spam'</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Notice the path separator is different between Windows and Unix based operating<br>system, that’s why you want to use one of the above methods instead of<br>adding strings together to join paths together.</p><p>Joining paths is helpful if you need to create different file paths under<br>the same directory.</p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Users\\asweigart'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Users\asweigart\accounts<span class="token punctuation">.</span>txtC<span class="token punctuation">:</span>\Users\asweigart\details<span class="token punctuation">.</span>csvC<span class="token punctuation">:</span>\Users\asweigart\invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> home <span class="token operator">=</span> Path<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>home <span class="token operator">/</span> filename<span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>accounts<span class="token punctuation">.</span>txt<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>details<span class="token punctuation">.</span>csv<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Current-Working-Directory"><a href="#The-Current-Working-Directory" class="headerlink" title="The Current Working Directory"></a>The Current Working Directory</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Python34'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Windows\\System32'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> os <span class="token keyword">import</span> chdir<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chdir<span class="token punctuation">(</span><span class="token string">'/usr/lib/python3.6'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Creating-New-Folders"><a href="#Creating-New-Folders" class="headerlink" title="Creating New Folders"></a>Creating New Folders</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'C:\\delicious\\walnut\\waffles'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">1226</span><span class="token punctuation">,</span> <span class="token keyword">in</span> mkdir    self<span class="token punctuation">.</span>_accessor<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">387</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapped    <span class="token keyword">return</span> strfunc<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>pathobj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory<span class="token punctuation">:</span> <span class="token string">'/home/asweigart/delicious/walnut/waffles'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oh no, we got a nasty error! The reason is that the ‘delicious’ directory does<br>not exist, so we cannot make the ‘walnut’ and the ‘waffles’ directories under<br>it. To fix this, do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And all is good :)</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Absolute-vs-Relative-Paths"><a href="#Absolute-vs-Relative-Paths" class="headerlink" title="Absolute vs. Relative Paths"></a>Absolute vs. Relative Paths</h3><p>There are two ways to specify a file path.</p><ul><li>An absolute path, which always begins with the root folder</li><li>A relative path, which is relative to the program’s current working directory</li></ul><p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Handling-Absolute-and-Relative-Paths"><a href="#Handling-Absolute-and-Relative-Paths" class="headerlink" title="Handling Absolute and Relative Paths"></a>Handling Absolute and Relative Paths</h3><p>To see if a path is an absolute path:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'/home/asweigart'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token string">'/home'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can get a relative path from a starting path to another path.</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token string">'etc/passwd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>relative_to<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>etc<span class="token operator">/</span>passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Checking-Path-Validity"><a href="#Checking-Path-Validity" class="headerlink" title="Checking Path Validity"></a>Checking Path Validity</h3><p>Checking if a file/directory exists:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a file:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a directory:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Finding-File-Sizes-and-Folder-Contents"><a href="#Finding-File-Sizes-and-Folder-Contents" class="headerlink" title="Finding File Sizes and Folder Contents"></a>Finding File Sizes and Folder Contents</h3><p>Getting a file’s size in bytes:</p><p>Using <code>os.path</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32\\calc.exe'</span><span class="token punctuation">)</span><span class="token number">776192</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> stat <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">'/bin/python3.6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span> <span class="token comment"># stat contains some other information about the file as well</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33261</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">141087</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">2051</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">10024</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1517725562</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1515119809</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1517261276</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span> <span class="token comment"># size in bytes</span><span class="token number">10024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>os.listdir</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'0409'</span><span class="token punctuation">,</span> <span class="token string">'12520437.cpx'</span><span class="token punctuation">,</span> <span class="token string">'12520850.cpx'</span><span class="token punctuation">,</span> <span class="token string">'5U877.ax'</span><span class="token punctuation">,</span> <span class="token string">'aaclient.dll'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token string">'xwtpdui.dll'</span><span class="token punctuation">,</span> <span class="token string">'xwtpw32.dll'</span><span class="token punctuation">,</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token string">'zh-HK'</span><span class="token punctuation">,</span> <span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token string">'zipfldr.dll'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>tiff2rgba<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>iconv<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>ldd<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>cache_restore<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>udiskie<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>unix2dos<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>t1reencode<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>epstopdf<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>idle3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To find the total size of all the files in this directory:</p><p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to<br>check for whether a path is a file or directory using the methods in the methods discussed in the above section!</p><p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      total_size <span class="token operator">=</span> total_size <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1117846456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> sub_path <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     total_size <span class="token operator">+=</span> sub_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1903178911</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Copying-Files-and-Folders"><a href="#Copying-Files-and-Folders" class="headerlink" title="Copying Files and Folders"></a>Copying Files and Folders</h3><p>The shutil module provides functions for copying files, as well as entire folders.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'C:\\spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\spam.txt'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'eggs.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious\\eggs2.txt'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\eggs2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'C:\\bacon'</span><span class="token punctuation">,</span> <span class="token string">'C:\\bacon_backup'</span><span class="token punctuation">)</span><span class="token string">'C:\\bacon_backup'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Moving-and-Renaming-Files-and-Folders"><a href="#Moving-and-Renaming-Files-and-Folders" class="headerlink" title="Moving and Renaming Files and Folders"></a>Moving and Renaming Files and Folders</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs\\new_bacon.txt'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\new_bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Permanently-Deleting-Files-and-Folders"><a href="#Permanently-Deleting-Files-and-Folders" class="headerlink" title="Permanently Deleting Files and Folders"></a>Permanently Deleting Files and Folders</h3><ul><li><p>Calling os.unlink(path) or Path.unlink() will delete the file at path.</p></li><li><p>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</p></li><li><p>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Safe-Deletes-with-the-send2trash-Module"><a href="#Safe-Deletes-with-the-send2trash-Module" class="headerlink" title="Safe Deletes with the send2trash Module"></a>Safe Deletes with the send2trash Module</h3><p>You can install this module by running pip install send2trash from a Terminal window.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> send2trash<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span> <span class="token comment"># creates the file</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Walking-a-Directory-Tree"><a href="#Walking-a-Directory-Tree" class="headerlink" title="Walking a Directory Tree"></a>Walking a Directory Tree</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> folder_name<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The current folder is {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> subfolder <span class="token keyword">in</span> subfolders<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SUBFOLDER OF {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> subfolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILE INSIDE {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>The current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\deliciousSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> catsSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> walnutFILE INSIDE C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> spam<span class="token punctuation">.</span>txtThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\catsFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> catnames<span class="token punctuation">.</span>txtFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> zophie<span class="token punctuation">.</span>jpgThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnutSUBFOLDER OF C<span class="token punctuation">:</span>\delicious\walnut<span class="token punctuation">:</span> wafflesThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnut\wafflesFILE INSIDE C<span class="token punctuation">:</span>\delicious\walnut\waffles<span class="token punctuation">:</span> butter<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><p><code>pathlib</code> provides a lot more functionality than the ones listed above,<br>like getting file name, getting file extension, reading/writing a file without<br>manually opening it, etc. Check out the<br><a href="https://docs.python.org/3/library/pathlib.html">official documentation</a><br>if you want to know more!</p><h2 id="Reading-and-Writing-Files"><a href="#Reading-and-Writing-Files" class="headerlink" title="Reading and Writing Files"></a>Reading and Writing Files</h2><h3 id="The-File-Reading-Writing-Process"><a href="#The-File-Reading-Writing-Process" class="headerlink" title="The File Reading/Writing Process"></a>The File Reading/Writing Process</h3><p>To read/write to a file in Python, you will want to use the <code>with</code><br>statement, which will close the file for you after you are done.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Opening-and-reading-files-with-the-open-function"><a href="#Opening-and-reading-files-with-the-open-function" class="headerlink" title="Opening and reading files with the open() function"></a>Opening and reading files with the open() function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\your_home_folder\\hello.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hello_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     hello_content <span class="token operator">=</span> hello_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello_content<span class="token string">'Hello World!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     sonnet_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men<span class="token string">'s eyes,\n'</span><span class="token punctuation">,</span> ' I <span class="token builtin">all</span> alone beweep myoutcast state<span class="token punctuation">,</span>\n<span class="token string">', And trouble deaf heaven with my bootless cries,\n'</span><span class="token punctuation">,</span> Andlook upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span>'<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can also iterate through the file line by line:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> sonnet_file<span class="token punctuation">:</span> <span class="token comment"># note the new line character will be included in the line</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men's eyes<span class="token punctuation">,</span>I <span class="token builtin">all</span> alone beweep my outcast state<span class="token punctuation">,</span>And trouble deaf heaven <span class="token keyword">with</span> my bootless cries<span class="token punctuation">,</span>And look upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Writing-to-Files"><a href="#Writing-to-Files" class="headerlink" title="Writing to Files"></a>Writing to Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello world!\n'</span><span class="token punctuation">)</span><span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     content <span class="token operator">=</span> bacon_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>Hello world!Bacon <span class="token keyword">is</span> <span class="token keyword">not</span> a vegetable<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Saving-Variables-with-the-shelve-Module"><a href="#Saving-Variables-with-the-shelve-Module" class="headerlink" title="Saving Variables with the shelve Module"></a>Saving Variables with the shelve Module</h3><p>To save variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shelve<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To open and read variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'shelve.DbfilenameShelf'</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Saving-Variables-with-the-pprint-pformat-Function"><a href="#Saving-Variables-with-the-pprint-pformat-Function" class="headerlink" title="Saving Variables with the pprint.pformat() Function"></a>Saving Variables with the pprint.pformat() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token string">"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = {}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Reading-ZIP-Files"><a href="#Reading-ZIP-Files" class="headerlink" title="Reading ZIP Files"></a>Reading ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     spam_info <span class="token operator">=</span> example_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Compressed file is %sx smaller!'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size <span class="token operator">/</span> spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/'</span><span class="token punctuation">,</span> <span class="token string">'cats/catnames.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/zophie.jpg'</span><span class="token punctuation">]</span><span class="token number">13908</span><span class="token number">3828</span><span class="token string">'Compressed file is 3.63x smaller!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Extracting-from-ZIP-Files"><a href="#Extracting-from-ZIP-Files" class="headerlink" title="Extracting from ZIP Files"></a>Extracting from ZIP Files</h3><p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     example_zip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\some\\new\\folders'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'C:\\spam.txt'</span><span class="token string">'C:\\some\\new\\folders\\spam.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Creating-and-Adding-to-ZIP-Files"><a href="#Creating-and-Adding-to-ZIP-Files" class="headerlink" title="Creating and Adding to ZIP Files"></a>Creating and Adding to ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_zip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="JSON-YAML-and-configuration-files"><a href="#JSON-YAML-and-configuration-files" class="headerlink" title="JSON, YAML and configuration files"></a>JSON, YAML and configuration files</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>Open a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Write a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsoncontent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Joe"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.<br>It is a convenient choice for configuration files where humans will have to edit it.</p><p>There are two main libraries allowing to access to YAML files:</p><ul><li><a href="https://pypi.python.org/pypi/PyYAML">PyYaml</a></li><li><a href="https://pypi.python.org/pypi/ruamel.yaml">Ruamel.yaml</a></li></ul><p>Install them using <code>pip install</code> in your virtual environment.</p><p>The first one it easier to use but the second one, Ruamel, implements much better the YAML<br>specification, and allow for example to modify a YAML content without altering comments.</p><p>Open a YAML file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ruamel<span class="token punctuation">.</span>yaml <span class="token keyword">import</span> YAML<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.yaml"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    yaml<span class="token operator">=</span>YAML<span class="token punctuation">(</span><span class="token punctuation">)</span>    yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Anyconfig"><a href="#Anyconfig" class="headerlink" title="Anyconfig"></a>Anyconfig</h3><p><a href="https://pypi.python.org/pypi/anyconfig">Anyconfig</a> is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p><p>Install it with:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> anyconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Usage:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> anyconfigconf1 <span class="token operator">=</span> anyconfig<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/path/to/foo/conf.d/a.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><h3 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h3><p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p><ul><li>The raise keyword</li><li>A call to the Exception() function</li><li>A string with a helpful error message passed to the Exception() function</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#191&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> This <span class="token keyword">is</span> the error message<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">box_print</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Symbol must be a single character string.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Width must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Height must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token keyword">for</span> sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ZZ'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        box_print<span class="token punctuation">(</span>sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception happened: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Getting-the-Traceback-as-a-String"><a href="#Getting-the-Traceback-as-a-String" class="headerlink" title="Getting the Traceback as a String"></a>Getting the Traceback as a String</h3><p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> traceback<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'errorInfo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> error_file<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>          error_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The traceback info was written to errorInfo.txt.'</span><span class="token punctuation">)</span><span class="token number">116</span>The traceback info was written to errorInfo<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p><pre><code>Traceback (most recent call last):  File "&lt;pyshell#28&gt;", line 2, in &lt;module&gt;Exception: This is the error message.</code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h3><p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p><ul><li>The assert keyword</li><li>A condition (that is, an expression that evaluates to True or False)</li><li>A comma</li><li>A string to display when the condition is False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'open'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'I\'m sorry, Dave. I\'m afraid I can\'t do that.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#10&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>AssertionError<span class="token punctuation">:</span> The pod bay doors need to be <span class="token string">"open"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p><p>Disabling Assertions</p><p>Assertions can be disabled by passing the -O option when running Python.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of program'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     total <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         total <span class="token operator">*=</span> i<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'i is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', total is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">return</span> total<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of program'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of program<span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">665</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">668</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">670</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">2</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">673</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">3</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">675</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">4</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">678</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">680</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">684</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging-Levels"><a href="#Logging-Levels" class="headerlink" title="Logging Levels"></a>Logging Levels</h3><p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p><table><thead><tr><th>Level</th><th>Logging Function</th><th>Description</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td><code>logging.debug()</code></td><td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td><code>logging.info()</code></td><td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td></tr><tr><td><code>WARNING</code></td><td><code>logging.warning()</code></td><td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td></tr><tr><td><code>ERROR</code></td><td><code>logging.error()</code></td><td>Used to record an error that caused the program to fail to do something.</td></tr><tr><td><code>CRITICAL</code></td><td><code>logging.critical()</code></td><td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Disabling-Logging"><a href="#Disabling-Logging" class="headerlink" title="Disabling Logging"></a>Disabling Logging</h3><p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s -%(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">054</span> <span class="token operator">-</span> CRITICAL <span class="token operator">-</span> Critical error! Critical error!<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error! Error!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging-to-a-File"><a href="#Logging-to-a-File" class="headerlink" title="Logging to a File"></a>Logging to a File</h3><p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'myProgramLog.txt'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h2><p>这个函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等于这个 <em>lambda</em> 函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至不需要将其绑定到像add的前边：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>像常规的嵌套函数， lambdas  也可以用作词法闭包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">make_adder</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： lambda 只能求值一个表达式，就像单行代码一样，</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Ternary-Conditional-Operator"><a href="#Ternary-Conditional-Operator" class="headerlink" title="Ternary Conditional Operator"></a>Ternary Conditional Operator</h2><p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p><pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;</code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>kid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ternary operators can be chained:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token keyword">else</span> <span class="token string">'teenager'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>teenager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The code above is equivalent to:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="args and kwargs"></a>args and kwargs</h2><p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p><ol><li><p>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&lt;name&gt;</code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</p></li><li><p>In a function call, <code>*</code> means “unpack tuple or list named <code>&lt;name&gt;</code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</p></li></ol><p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p><p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruits</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> fruit <span class="token keyword">in</span> args<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruits<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"grapes"</span><span class="token punctuation">)</span><span class="token string">"apples"</span><span class="token string">"bananas"</span><span class="token string">"grapes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruit</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0}: {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruit<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> applecolor<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> kwarg2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span><span class="token operator">*</span>data2<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token string">"python"</span><span class="token punctuation">,</span>kwarg2<span class="token operator">=</span><span class="token string">"cheatsheet"</span><span class="token punctuation">,</span><span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>pythoncheatsheet<span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># If you do not specify ** for kwargs</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">*</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Things-to-Remember-args"><a href="#Things-to-Remember-args" class="headerlink" title="Things to Remember(args)"></a>Things to Remember(args)</h3><ol><li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li><li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li><li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li><li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li></ol><h3 id="Things-to-Remember-kwargs"><a href="#Things-to-Remember-kwargs" class="headerlink" title="Things to Remember(kwargs)"></a>Things to Remember(kwargs)</h3><ol><li>Function arguments can be specified by position or by keyword.</li><li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li><li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li><li>Optional keyword arguments should always be passed by keyword instead of by position.</li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><p>While Python’s context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p><h3 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h3><p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p><p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     file_contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># the open_file object has automatically been closed.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Anything that ends execution of the block causes the context manager’s exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p><h3 id="Writing-your-own-contextmanager-using-generator-syntax"><a href="#Writing-your-own-contextmanager-using-generator-syntax" class="headerlink" title="Writing your own contextmanager using generator syntax"></a>Writing your own contextmanager using generator syntax</h3><p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> contextlib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @contextlib<span class="token punctuation">.</span>contextmanager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">context_manager</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">yield</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> context_manager<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cm<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># the following instructions are run when the 'yield' point of the context</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># manager is reached.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># 'cm' will have the value that was yielded</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Right in the middle with cm = {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span>EnterRight <span class="token keyword">in</span> the middle <span class="token keyword">with</span> cm <span class="token operator">=</span> <span class="token number">3</span>Exit<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="main-Top-level-script-environment"><a href="#main-Top-level-script-environment" class="headerlink" title="__main__ Top-level script environment"></a><code>__main__</code> Top-level script environment</h2><p><code>__main__</code> is the name of the scope in which top-level code executes.<br>A module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p><p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># execute only if run as a script</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m</p><p>For example we are developing script which is designed to be used as module, we should do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Python program to execute function directly</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># we can test it by calling the function save it as calculate.py</span><span class="token number">30</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Now if we want to use that module by importing we have to comment out our call,</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Instead we can write like this in calculate.py</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> calculate<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> calculate<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ol><li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li><li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li><li>Python files can act as either reusable modules, or as standalone programs.</li><li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p><p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p><p>This allows you to easily install Python packages. Often it’s enough to write:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and module will install itself.</p><p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setup<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token operator">=</span><span class="token string">'pythonCheatsheet'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    version<span class="token operator">=</span><span class="token string">'0.1'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'pipenv'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    license<span class="token operator">=</span><span class="token string">'MIT'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    long_description<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'README.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Find more information visit <a href="http://docs.python.org/install/index.html">http://docs.python.org/install/index.html</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Dataclasses"><a href="#Dataclasses" class="headerlink" title="Dataclasses"></a>Dataclasses</h2><p><code>Dataclasses</code> are python classes but are suited for storing data objects.<br>This module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li><p>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</p></li><li><p>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</p></li></ol><p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p><p>python 2.7</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with dataclass</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Default-values"><a href="#Default-values" class="headerlink" title="Default values"></a>Default values</h3><p>It is easy to add default values to the fields of your data class.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     count<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     price<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Product<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>namePython<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>count<span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>price<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-hints"><a href="#Type-hints" class="headerlink" title="Type hints"></a>Type hints</h3><p>It is mandatory to define the data type in dataclass. However, If you don’t want specify the datatype then, use <code>typing.Any</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">WithoutExplicitTypes</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token punctuation">:</span> Any<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    value<span class="token punctuation">:</span> Any <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h2><p>The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><ol><li><p>Install virtualenv</p><pre><code> pip install virtualenv</code></pre></li><li><p>Install virtualenvwrapper-win (Windows)</p><pre><code> pip install virtualenvwrapper-win</code></pre></li></ol><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> mkvirtualenv HelloWold</code></pre><p> Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p></li><li><p>Set Project Directory</p><p> To bind our virtualenv with our current working directory we simply enter:</p><pre><code> setprojectdir .</code></pre></li><li><p>Deactivate</p><p> To move onto something else in the command line type ‘deactivate’ to deactivate your environment.</p><pre><code> deactivate</code></pre><p> Notice how the parenthesis disappear.</p></li><li><p>Workon</p><p> Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder</p><pre><code> workon HelloWold</code></pre></li></ol><p>[_返回顶部_](#Python 备忘录)</p><h3 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a>poetry</h3><blockquote><p><a href="https://poetry.eustace.io/">Poetry</a> is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p></blockquote><ol><li><p>Install Poetry</p><pre><code> pip install --user poetry</code></pre></li><li><p>Create a new project</p><pre><code> poetry new my-project</code></pre><p> This will create a my-project directory:</p><pre><code> my-project ├── pyproject.toml ├── README.rst ├── poetry_demo │   └── __init__.py └── tests     ├── __init__.py     └── test_poetry_demo.py</code></pre><p> The pyproject.toml file will orchestrate your project and its dependencies:</p><pre><code> [tool.poetry] name = "my-project" version = "0.1.0" description = "" authors = ["your name &lt;your@mail.com&gt;"] [tool.poetry.dependencies] python = "*" [tool.poetry.dev-dependencies] pytest = "^3.4"</code></pre></li><li><p>Packages</p><p> To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p><pre><code> [tool.poetry.dependencies] pendulum = "^1.4"</code></pre><p> Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p><pre><code> $ poetry add pendulum</code></pre><p> To install the dependencies listed in the pyproject.toml:</p><pre><code> poetry install</code></pre><p> To remove dependencies:</p><pre><code> poetry remove pendulum</code></pre></li></ol><p>For more information, check the <a href="https://poetry.eustace.io/docs/">documentation</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p><a href="https://pipenv.readthedocs.io/en/latest/">Pipenv</a> is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.</p></blockquote><ol><li><p>Install pipenv</p><pre><code> pip install pipenv</code></pre></li><li><p>Enter your Project directory and install the Packages for your project</p><pre><code> cd my_project pipenv install &lt;package&gt;</code></pre><p> Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p></li><li><p>Uninstall Packages</p><pre><code> pipenv uninstall &lt;package&gt;</code></pre></li><li><p>Activate the Virtual Environment associated with your Python project</p><pre><code> pipenv shell</code></pre></li><li><p>Exit the Virtual Environment</p><pre><code> exit</code></pre></li></ol><p>Find more information and a video in <a href="https://docs.pipenv.org/">docs.pipenv.org</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h3><p><a href="https://anaconda.org/">Anaconda</a> is another popular tool to manage python packages.</p><blockquote><p>Where packages, notebooks, projects and environments are shared.<br>Your place for free public conda package hosting.</p></blockquote><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> conda create -n HelloWorld</code></pre></li><li><p>To use the Virtual Environment, activate it by:</p><pre><code> conda activate HelloWorld</code></pre><p> Anything installed now will be specific to the project HelloWorld</p></li><li><p>Exit the Virtual Environment</p><pre><code> conda deactivate</code></pre></li></ol><p>[_返回顶部_](#Python 备忘录)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Cheatsheet</title>
      <link href="/myhexo/2020/10/24/xue-xi/python/python-cheatsheet/"/>
      <url>/myhexo/2020/10/24/xue-xi/python/python-cheatsheet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="About"><a href="#About" class="headerlink" title="About "></a>About <a href="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks"><img src="https://mybinder.org/badge.svg" alt="Binder"></a></h1><p>Basic cheatsheet for Python mostly based on the book written by Al Sweigart, <a href="https://automatetheboringstuff.com/">Automate the Boring Stuff with Python</a> under the <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons license</a> and many other sources.</p><h2 id="Contribute"><a href="#Contribute" class="headerlink" title="Contribute"></a>Contribute</h2><p>All contributions are welcome:</p><ul><li>Read the issues, Fork the project and do a Pull Request.</li><li>Request a new topic creating a <code>New issue</code> with the <code>enhancement</code> tag.</li><li>Find any kind of errors in the cheat sheet and create a <code>New issue</code> with the details or fork the project and do a Pull Request.</li><li>Suggest a better or more pythonic way for existing examples.</li></ul><h2 id="Read-It"><a href="#Read-It" class="headerlink" title="Read It"></a>Read It</h2><ul><li><a href="https://www.pythoncheatsheet.org/">Website</a></li><li><a href="https://github.com/wilfredinni/python-cheatsheet">Github</a></li><li><a href="https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf">PDF</a></li><li><a href="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks">Jupyter Notebook</a></li></ul><h2 id="Python-Cheatsheet"><a href="#Python-Cheatsheet" class="headerlink" title="Python Cheatsheet"></a>Python Cheatsheet</h2><ul><li><a href="#about-">About <img src="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks" alt="Binder"></a><ul><li><a href="#contribute">Contribute</a></li><li><a href="#read-it">Read It</a></li><li><a href="#python-cheatsheet">Python Cheatsheet</a></li><li><a href="#the-zen-of-python">The Zen of Python</a></li><li><a href="#python-basics">Python Basics</a><ul><li><a href="#math-operators">Math Operators</a></li><li><a href="#data-types">Data Types</a></li><li><a href="#string-concatenation-and-replication">String Concatenation and Replication</a></li><li><a href="#variables">Variables</a></li><li><a href="#comments">Comments</a></li><li><a href="#the-print-function">The print() Function</a></li><li><a href="#the-input-function">The input() Function</a></li><li><a href="#the-len-function">The len() Function</a></li><li><a href="#the-str-int-and-float-functions">The str(), int(), and float() Functions</a></li></ul></li><li><a href="#flow-control">Flow Control</a><ul><li><a href="#comparison-operators">Comparison Operators</a></li><li><a href="#boolean-evaluation">Boolean evaluation</a></li><li><a href="#boolean-operators">Boolean Operators</a></li><li><a href="#mixing-boolean-and-comparison-operators">Mixing Boolean and Comparison Operators</a></li><li><a href="#if-statements">if Statements</a></li><li><a href="#else-statements">else Statements</a></li><li><a href="#elif-statements">elif Statements</a></li><li><a href="#while-loop-statements">while Loop Statements</a></li><li><a href="#break-statements">break Statements</a></li><li><a href="#continue-statements">continue Statements</a></li><li><a href="#for-loops-and-the-range-function">for Loops and the range() Function</a></li><li><a href="#for-else-statement">For else statement</a></li><li><a href="#importing-modules">Importing Modules</a></li><li><a href="#ending-a-program-early-with-sysexit">Ending a Program Early with sys.exit()</a></li></ul></li><li><a href="#functions">Functions</a><ul><li><a href="#return-values-and-return-statements">Return Values and return Statements</a></li><li><a href="#the-none-value">The None Value</a></li><li><a href="#keyword-arguments-and-print">Keyword Arguments and print()</a></li><li><a href="#local-and-global-scope">Local and Global Scope</a></li><li><a href="#the-global-statement">The global Statement</a></li></ul></li><li><a href="#exception-handling">Exception Handling</a><ul><li><a href="#basic-exception-handling">Basic exception handling</a></li><li><a href="#final-code-in-exception-handling">Final code in exception handling</a></li></ul></li><li><a href="#lists">Lists</a><ul><li><a href="#getting-individual-values-in-a-list-with-indexes">Getting Individual Values in a List with Indexes</a></li><li><a href="#negative-indexes">Negative Indexes</a></li><li><a href="#getting-sublists-with-slices">Getting Sublists with Slices</a></li><li><a href="#getting-a-lists-length-with-len">Getting a List’s Length with len()</a></li><li><a href="#changing-values-in-a-list-with-indexes">Changing Values in a List with Indexes</a></li><li><a href="#list-concatenation-and-list-replication">List Concatenation and List Replication</a></li><li><a href="#removing-values-from-lists-with-del-statements">Removing Values from Lists with del Statements</a></li><li><a href="#using-for-loops-with-lists">Using for Loops with Lists</a></li><li><a href="#looping-through-multiple-lists-with-zip">Looping Through Multiple Lists with zip()</a></li><li><a href="#the-in-and-not-in-operators">The in and not in Operators</a></li><li><a href="#the-multiple-assignment-trick">The Multiple Assignment Trick</a></li><li><a href="#augmented-assignment-operators">Augmented Assignment Operators</a></li><li><a href="#finding-a-value-in-a-list-with-the-index-method">Finding a Value in a List with the index() Method</a></li><li><a href="#adding-values-to-lists-with-the-append-and-insert-methods">Adding Values to Lists with the append() and insert() Methods</a></li><li><a href="#removing-values-from-lists-with-remove">Removing Values from Lists with remove()</a></li><li><a href="#removing-values-from-lists-with-pop">Removing Values from Lists with pop()</a></li><li><a href="#sorting-the-values-in-a-list-with-the-sort-method">Sorting the Values in a List with the sort() Method</a></li><li><a href="#tuple-data-type">Tuple Data Type</a></li><li><a href="#converting-types-with-the-list-and-tuple-functions">Converting Types with the list() and tuple() Functions</a></li></ul></li><li><a href="#dictionaries-and-structuring-data">Dictionaries and Structuring Data</a><ul><li><a href="#the-keys-values-and-items-methods">The keys(), values(), and items() Methods</a></li><li><a href="#checking-whether-a-key-or-value-exists-in-a-dictionary">Checking Whether a Key or Value Exists in a Dictionary</a></li><li><a href="#the-get-method">The get() Method</a></li><li><a href="#the-setdefault-method">The setdefault() Method</a></li><li><a href="#pretty-printing">Pretty Printing</a></li><li><a href="#merge-two-dictionaries">Merge two dictionaries</a></li></ul></li><li><a href="#sets">sets</a><ul><li><a href="#initializing-a-set">Initializing a set</a></li><li><a href="#sets-unordered-collections-of-unique-elements">sets: unordered collections of unique elements</a></li><li><a href="#set-add-and-update">set add() and update()</a></li><li><a href="#set-remove-and-discard">set remove() and discard()</a></li><li><a href="#set-union">set union()</a></li><li><a href="#set-intersection">set intersection</a></li><li><a href="#set-difference">set difference</a></li><li><a href="#set-symetric_difference">set symetric_difference</a></li></ul></li><li><a href="#itertools-module">itertools Module</a><ul><li><a href="#accumulate">accumulate()</a></li><li><a href="#combinations">combinations()</a></li><li><a href="#combinations_with_replacement">combinations_with_replacement()</a></li><li><a href="#count">count()</a></li><li><a href="#cycle">cycle()</a></li><li><a href="#chain">chain()</a></li><li><a href="#compress">compress()</a></li><li><a href="#dropwhile">dropwhile()</a></li><li><a href="#filterfalse">filterfalse()</a></li><li><a href="#groupby">groupby()</a></li><li><a href="#islice">islice()</a></li><li><a href="#permutations">permutations()</a></li><li><a href="#product">product()</a></li><li><a href="#repeat">repeat()</a></li><li><a href="#starmap">starmap()</a></li><li><a href="#takewhile">takewhile()</a></li><li><a href="#tee">tee()</a></li><li><a href="#zip_longest">zip_longest()</a></li></ul></li><li><a href="#comprehensions">Comprehensions</a><ul><li><a href="#list-comprehension">List comprehension</a></li><li><a href="#set-comprehension">Set comprehension</a></li><li><a href="#dict-comprehension">Dict comprehension</a></li></ul></li><li><a href="#manipulating-strings">Manipulating Strings</a><ul><li><a href="#escape-characters">Escape Characters</a></li><li><a href="#raw-strings">Raw Strings</a></li><li><a href="#multiline-strings-with-triple-quotes">Multiline Strings with Triple Quotes</a></li><li><a href="#indexing-and-slicing-strings">Indexing and Slicing Strings</a></li><li><a href="#the-in-and-not-in-operators-with-strings">The in and not in Operators with Strings</a></li><li><a href="#the-in-and-not-in-operators-with-list">The in and not in Operators with list</a></li><li><a href="#the-upper-lower-isupper-and-islower-string-methods">The upper(), lower(), isupper(), and islower() String Methods</a></li><li><a href="#the-isx-string-methods">The isX String Methods</a></li><li><a href="#the-startswith-and-endswith-string-methods">The startswith() and endswith() String Methods</a></li><li><a href="#the-join-and-split-string-methods">The join() and split() String Methods</a></li><li><a href="#justifying-text-with-rjust-ljust-and-center">Justifying Text with rjust(), ljust(), and center()</a></li><li><a href="#removing-whitespace-with-strip-rstrip-and-lstrip">Removing Whitespace with strip(), rstrip(), and lstrip()</a></li><li><a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install">Copying and Pasting Strings with the pyperclip Module (need pip install)</a></li></ul></li><li><a href="#string-formatting">String Formatting</a><ul><li><a href="#-operator">% operator</a></li><li><a href="#string-formatting-strformat">String Formatting (str.format)</a></li><li><a href="#lazy-string-formatting">Lazy string formatting</a></li><li><a href="#formatted-string-literals-or-f-strings-python-36">Formatted String Literals or f-strings (Python 3.6+)</a></li><li><a href="#template-strings">Template Strings</a></li></ul></li><li><a href="#regular-expressions">Regular Expressions</a><ul><li><a href="#matching-regex-objects">Matching Regex Objects</a></li><li><a href="#grouping-with-parentheses">Grouping with Parentheses</a></li><li><a href="#matching-multiple-groups-with-the-pipe">Matching Multiple Groups with the Pipe</a></li><li><a href="#optional-matching-with-the-question-mark">Optional Matching with the Question Mark</a></li><li><a href="#matching-zero-or-more-with-the-star">Matching Zero or More with the Star</a></li><li><a href="#matching-one-or-more-with-the-plus">Matching One or More with the Plus</a></li><li><a href="#matching-specific-repetitions-with-curly-brackets">Matching Specific Repetitions with Curly Brackets</a></li><li><a href="#greedy-and-nongreedy-matching">Greedy and Nongreedy Matching</a></li><li><a href="#the-findall-method">The findall() Method</a></li><li><a href="#making-your-own-character-classes">Making Your Own Character Classes</a></li><li><a href="#the-caret-and-dollar-sign-characters">The Caret and Dollar Sign Characters</a></li><li><a href="#the-wildcard-character">The Wildcard Character</a></li><li><a href="#matching-everything-with-dot-star">Matching Everything with Dot-Star</a></li><li><a href="#matching-newlines-with-the-dot-character">Matching Newlines with the Dot Character</a></li><li><a href="#review-of-regex-symbols">Review of Regex Symbols</a></li><li><a href="#case-insensitive-matching">Case-Insensitive Matching</a></li><li><a href="#substituting-strings-with-the-sub-method">Substituting Strings with the sub() Method</a></li><li><a href="#managing-complex-regexes">Managing Complex Regexes</a></li></ul></li><li><a href="#handling-file-and-directory-paths">Handling File and Directory Paths</a><ul><li><a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux">Backslash on Windows and Forward Slash on OS X and Linux</a></li><li><a href="#the-current-working-directory">The Current Working Directory</a></li><li><a href="#creating-new-folders">Creating New Folders</a></li><li><a href="#absolute-vs-relative-paths">Absolute vs. Relative Paths</a></li><li><a href="#handling-absolute-and-relative-paths">Handling Absolute and Relative Paths</a></li><li><a href="#checking-path-validity">Checking Path Validity</a></li><li><a href="#finding-file-sizes-and-folder-contents">Finding File Sizes and Folder Contents</a></li><li><a href="#copying-files-and-folders">Copying Files and Folders</a></li><li><a href="#moving-and-renaming-files-and-folders">Moving and Renaming Files and Folders</a></li><li><a href="#permanently-deleting-files-and-folders">Permanently Deleting Files and Folders</a></li><li><a href="#safe-deletes-with-the-send2trash-module">Safe Deletes with the send2trash Module</a></li><li><a href="#walking-a-directory-tree">Walking a Directory Tree</a></li></ul></li><li><a href="#reading-and-writing-files">Reading and Writing Files</a><ul><li><a href="#the-file-readingwriting-process">The File Reading/Writing Process</a></li><li><a href="#opening-and-reading-files-with-the-open-function">Opening and reading files with the open() function</a></li><li><a href="#writing-to-files">Writing to Files</a></li><li><a href="#saving-variables-with-the-shelve-module">Saving Variables with the shelve Module</a></li><li><a href="#saving-variables-with-the-pprintpformat-function">Saving Variables with the pprint.pformat() Function</a></li><li><a href="#reading-zip-files">Reading ZIP Files</a></li><li><a href="#extracting-from-zip-files">Extracting from ZIP Files</a></li><li><a href="#creating-and-adding-to-zip-files">Creating and Adding to ZIP Files</a></li></ul></li><li><a href="#json-yaml-and-configuration-files">JSON, YAML and configuration files</a><ul><li><a href="#json">JSON</a></li><li><a href="#yaml">YAML</a></li><li><a href="#anyconfig">Anyconfig</a></li></ul></li><li><a href="#debugging">Debugging</a><ul><li><a href="#raising-exceptions">Raising Exceptions</a></li><li><a href="#getting-the-traceback-as-a-string">Getting the Traceback as a String</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#logging">Logging</a></li><li><a href="#logging-levels">Logging Levels</a></li><li><a href="#disabling-logging">Disabling Logging</a></li><li><a href="#logging-to-a-file">Logging to a File</a></li></ul></li><li><a href="#lambda-functions">Lambda Functions</a></li><li><a href="#ternary-conditional-operator">Ternary Conditional Operator</a></li><li><a href="#args-and-kwargs">args and kwargs</a><ul><li><a href="#things-to-rememberargs">Things to Remember(args)</a></li><li><a href="#things-to-rememberkwargs">Things to Remember(kwargs)</a></li></ul></li><li><a href="#context-manager">Context Manager</a><ul><li><a href="#with-statement">with statement</a></li><li><a href="#writing-your-own-contextmanager-using-generator-syntax">Writing your own contextmanager using generator syntax</a></li></ul></li><li><a href="#__main__-top-level-script-environment"><code>__main__</code> Top-level script environment</a><ul><li><a href="#advantages">Advantages</a></li></ul></li><li><a href="#setuppy">setup.py</a></li><li><a href="#dataclasses">Dataclasses</a><ul><li><a href="#features">Features</a></li><li><a href="#default-values">Default values</a></li><li><a href="#type-hints">Type hints</a></li></ul></li><li><a href="#virtual-environment">Virtual Environment</a><ul><li><a href="#virtualenv">virtualenv</a></li><li><a href="#poetry">poetry</a></li><li><a href="#pipenv">pipenv</a></li><li><a href="#anaconda">anaconda</a></li></ul></li></ul></li></ul><h2 id="The-Zen-of-Python"><a href="#The-Zen-of-Python" class="headerlink" title="The Zen of Python"></a>The Zen of Python</h2><p>From the <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>:</p><blockquote><p>Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> thisThe Zen of Python<span class="token punctuation">,</span> by Tim PetersBeautiful <span class="token keyword">is</span> better than ugly<span class="token punctuation">.</span>Explicit <span class="token keyword">is</span> better than implicit<span class="token punctuation">.</span>Simple <span class="token keyword">is</span> better than <span class="token builtin">complex</span><span class="token punctuation">.</span>Complex <span class="token keyword">is</span> better than complicated<span class="token punctuation">.</span>Flat <span class="token keyword">is</span> better than nested<span class="token punctuation">.</span>Sparse <span class="token keyword">is</span> better than dense<span class="token punctuation">.</span>Readability counts<span class="token punctuation">.</span>Special cases aren't special enough to <span class="token keyword">break</span> the rules<span class="token punctuation">.</span>Although practicality beats purity<span class="token punctuation">.</span>Errors should never <span class="token keyword">pass</span> silently<span class="token punctuation">.</span>Unless explicitly silenced<span class="token punctuation">.</span>In the face of ambiguity<span class="token punctuation">,</span> refuse the temptation to guess<span class="token punctuation">.</span>There should be one<span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">and</span> preferably only one <span class="token operator">-</span><span class="token operator">-</span>obvious way to do it<span class="token punctuation">.</span>Although that way may <span class="token keyword">not</span> be obvious at first unless you're Dutch<span class="token punctuation">.</span>Now <span class="token keyword">is</span> better than never<span class="token punctuation">.</span>Although never <span class="token keyword">is</span> often better than <span class="token operator">*</span>right<span class="token operator">*</span> now<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> hard to explain<span class="token punctuation">,</span> it's a bad idea<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> easy to explain<span class="token punctuation">,</span> it may be a good idea<span class="token punctuation">.</span>Namespaces are one honking great idea <span class="token operator">-</span><span class="token operator">-</span> let's do more of those!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Python-Basics"><a href="#Python-Basics" class="headerlink" title="Python Basics"></a>Python Basics</h2><h3 id="Math-Operators"><a href="#Math-Operators" class="headerlink" title="Math Operators"></a>Math Operators</h3><p>From <strong>Highest</strong> to <strong>Lowest</strong> precedence:</p><table><thead><tr><th>Operators</th><th>Operation</th><th>Example</th></tr></thead><tbody><tr><td>**</td><td>Exponent</td><td><code>2 ** 3 = 8</code></td></tr><tr><td>%</td><td>Modulus/Remainder</td><td><code>22 % 8 = 6</code></td></tr><tr><td>//</td><td>Integer division</td><td><code>22 // 8 = 2</code></td></tr><tr><td>/</td><td>Division</td><td><code>22 / 8 = 2.75</code></td></tr><tr><td>*</td><td>Multiplication</td><td><code>3 * 3 = 9</code></td></tr><tr><td>-</td><td>Subtraction</td><td><code>5 - 2 = 3</code></td></tr><tr><td>+</td><td>Addition</td><td><code>2 + 2 = 4</code></td></tr></tbody></table><p>Examples of expressions in the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">//</span> <span class="token number">7</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">16.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><table><thead><tr><th>Data Type</th><th>Examples</th></tr></thead><tbody><tr><td>Integers</td><td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td></tr><tr><td>Floating-point numbers</td><td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td></tr><tr><td>Strings</td><td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="String-Concatenation-and-Replication"><a href="#String-Concatenation-and-Replication" class="headerlink" title="String Concatenation and Replication"></a>String Concatenation and Replication</h3><p>String concatenation:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token string">'Bob'</span><span class="token string">'AliceBob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: Avoid <code>+</code> operator for string concatenation. Prefer string formatting.</p><p>String Replication:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'AliceAliceAliceAliceAlice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>You can name a variable anything as long as it obeys the following rules:</p><ol><li>It can be only one word.</li><li>It can use only letters, numbers, and the underscore (<code>_</code>) character.</li><li>It can’t begin with a number.</li><li>Variable name starting with an underscore (<code>_</code>) are considered as “unuseful`.</li></ol><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_spam</code> should not be used again in the code.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>Inline comment:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># This is a comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Multiline comment:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># This is a# multiline comment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Code with a comment:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Please note the two spaces in front of the comment.</p><p>Function docstring:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This is a function docstring    You can also use:    ''' Function Docstring '''    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-print-Function"><a href="#The-print-Function" class="headerlink" title="The print() Function"></a>The print() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span>Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>Hello world! <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-input-Function"><a href="#The-input-Function" class="headerlink" title="The input() Function"></a>The input() Function</h3><p>Example Code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span>   <span class="token comment"># ask for their name</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> myName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'It is good to meet you, {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">)</span>What <span class="token keyword">is</span> your name?AlIt <span class="token keyword">is</span> good to meet you<span class="token punctuation">,</span> Al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-len-Function"><a href="#The-len-Function" class="headerlink" title="The len() Function"></a>The len() Function</h3><p>Evaluates to the integer value of the number of characters in a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: test of emptiness of strings, lists, dictionary, etc, should <strong>not</strong> use len, but prefer direct<br>boolean evaluation.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the list is not empty!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-str-int-and-float-Functions"><a href="#The-str-int-and-float-Functions" class="headerlink" title="The str(), int(), and float() Functions"></a>The str(), int(), and float() Functions</h3><p>Integer to String or Float:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token string">'29'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am {} years old.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>I am <span class="token number">29</span> years old<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token string">'-3.14'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Float to Integer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h2><h3 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a>Comparison Operators</h3><table><thead><tr><th>Operator</th><th>Meaning</th></tr></thead><tbody><tr><td><code>==</code></td><td>Equal to</td></tr><tr><td><code>!=</code></td><td>Not equal to</td></tr><tr><td><code>&lt;</code></td><td>Less than</td></tr><tr><td><code>&gt;</code></td><td>Greater Than</td></tr><tr><td><code>&lt;=</code></td><td>Less than or Equal to</td></tr><tr><td><code>&gt;=</code></td><td>Greater than or Equal to</td></tr></tbody></table><p>These operators evaluate to True or False depending on the values you give them.</p><p>Examples:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'Hello'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'dog'</span> <span class="token operator">!=</span> <span class="token string">'cat'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token string">'42'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Boolean-evaluation"><a href="#Boolean-evaluation" class="headerlink" title="Boolean evaluation"></a>Boolean evaluation</h3><p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,<br>or use implicit boolean evaluation.</p><p>NO (even if they are valid Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YES (even if they are valid Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>These statements are equivalent:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And these as well:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if not a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Boolean-Operators"><a href="#Boolean-Operators" class="headerlink" title="Boolean Operators"></a>Boolean Operators</h3><p>There are three Boolean operators: and, or, and not.</p><p>The <em>and</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>True and True</code></td><td><code>True</code></td></tr><tr><td><code>True and False</code></td><td><code>False</code></td></tr><tr><td><code>False and True</code></td><td><code>False</code></td></tr><tr><td><code>False and False</code></td><td><code>False</code></td></tr></tbody></table><p>The <em>or</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>True or True</code></td><td><code>True</code></td></tr><tr><td><code>True or False</code></td><td><code>True</code></td></tr><tr><td><code>False or True</code></td><td><code>True</code></td></tr><tr><td><code>False or False</code></td><td><code>False</code></td></tr></tbody></table><p>The <em>not</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>not True</code></td><td><code>False</code></td></tr><tr><td><code>not False</code></td><td><code>True</code></td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Mixing-Boolean-and-Comparison-Operators"><a href="#Mixing-Boolean-and-Comparison-Operators" class="headerlink" title="Mixing Boolean and Comparison Operators"></a>Mixing Boolean and Comparison Operators</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="if-Statements"><a href="#if-Statements" class="headerlink" title="if Statements"></a>if Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="else-Statements"><a href="#else-Statements" class="headerlink" title="else Statements"></a>else Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="elif-Statements"><a href="#elif-Statements" class="headerlink" title="elif Statements"></a>elif Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are neither Alice nor a little kid.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="while-Loop-Statements"><a href="#while-Loop-Statements" class="headerlink" title="while Loop Statements"></a>while Loop Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> spam <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span>    spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="break-Statements"><a href="#break-Statements" class="headerlink" title="break Statements"></a>break Statements</h3><p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please type your name.'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'your name'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thank you!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="continue-Statements"><a href="#continue-Statements" class="headerlink" title="continue Statements"></a>continue Statements</h3><p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Who are you?'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">'Joe'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Joe. What is the password? (It is a fish.)'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'swordfish'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Access granted.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="for-Loops-and-the-range-Function"><a href="#for-Loops-and-the-range-Function" class="headerlink" title="for Loops and the range() Function"></a>for Loops and the range() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Jimmy Five Times ({})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>My name <span class="token keyword">is</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">4</span><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For-else-statement"><a href="#For-else-statement" class="headerlink" title="For else statement"></a>For else statement</h3><p>This allows to specify a statement to execute in case of the full loop has been executed. Only<br>useful when a <code>break</code> condition can occur in the loop:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"only executed when no item of the list is equal to 3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Importing-Modules"><a href="#Importing-Modules" class="headerlink" title="Importing Modules"></a>Importing Modules</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os<span class="token punctuation">,</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Ending-a-Program-Early-with-sys-exit"><a href="#Ending-a-Program-Early-with-sys-exit" class="headerlink" title="Ending a Program Early with sys.exit()"></a>Ending a Program Early with sys.exit()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Type exit to exit.'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You typed {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Hello AliceHello Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Return-Values-and-return-Statements"><a href="#Return-Values-and-return-Statements" class="headerlink" title="Return Values and return Statements"></a>Return Values and return Statements</h3><p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p><ul><li><p>The return keyword.</p></li><li><p>The value or expression that the function should return.</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>answerNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> answerNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is certain'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is decidedly so'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Yes'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Reply hazy try again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Ask again later'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Concentrate and ask again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'My reply is no'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Outlook not so good'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Very doubtful'</span>r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fortune <span class="token operator">=</span> getAnswer<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fortune<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-None-Value"><a href="#The-None-Value" class="headerlink" title="The None Value"></a>The None Value</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span>Hello!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Keyword-Arguments-and-print"><a href="#Keyword-Arguments-and-print" class="headerlink" title="Keyword Arguments and print()"></a>Keyword Arguments and print()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span>HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">)</span>cats dogs mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>cats<span class="token punctuation">,</span>dogs<span class="token punctuation">,</span>mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Local-and-Global-Scope"><a href="#Local-and-Global-Scope" class="headerlink" title="Local and Global Scope"></a>Local and Global Scope</h3><ul><li><p>Code in the global scope cannot use any local variables.</p></li><li><p>However, a local scope can access global variables.</p></li><li><p>Code in a function’s local scope cannot use variables in any other local scope.</p></li><li><p>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-global-Statement"><a href="#The-global-Statement" class="headerlink" title="The global Statement"></a>The global Statement</h3><p>If you need to modify a global variable from within a function, use the global statement:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">global</span> eggs<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     eggs <span class="token operator">=</span> <span class="token string">'spam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token string">'global'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There are four rules to tell whether a variable is in a local scope or global scope:</p><ol><li><p>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</p></li><li><p>If there is a global statement for that variable in a function, it is a global variable.</p></li><li><p>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</p></li><li><p>But if the variable is not used in an assignment statement, it is a global variable.</p></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><h3 id="Basic-exception-handling"><a href="#Basic-exception-handling" class="headerlink" title="Basic exception handling"></a>Basic exception handling</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">21.0</span><span class="token number">3.5</span>Error<span class="token punctuation">:</span> Invalid argument<span class="token punctuation">:</span> division by zero<span class="token boolean">None</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Final-code-in-exception-handling"><a href="#Final-code-in-exception-handling" class="headerlink" title="Final code in exception handling"></a>Final code in exception handling</h3><p>Code inside the <code>finally</code> section is always executed, no matter if an exception has been raised or<br>not, and even if an exception is not caught.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- division finished --"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">21.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Error<span class="token punctuation">:</span> Invalid Argument division by zero<span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-Individual-Values-in-a-List-with-Indexes"><a href="#Getting-Individual-Values-in-a-List-with-Indexes" class="headerlink" title="Getting Individual Values in a List with Indexes"></a>Getting Individual Values in a List with Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'cat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'rat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Negative-Indexes"><a href="#Negative-Indexes" class="headerlink" title="Negative Indexes"></a>Negative Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The {} is afraid of the {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'The elephant is afraid of the bat.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-Sublists-with-Slices"><a href="#Getting-Sublists-with-Slices" class="headerlink" title="Getting Sublists with Slices"></a>Getting Sublists with Slices</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing the complete list will perform a copy:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2 <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-a-List’s-Length-with-len"><a href="#Getting-a-List’s-Length-with-len" class="headerlink" title="Getting a List’s Length with len()"></a>Getting a List’s Length with len()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Changing-Values-in-a-List-with-Indexes"><a href="#Changing-Values-in-a-List-with-Indexes" class="headerlink" title="Changing Values in a List with Indexes"></a>Changing Values in a List with Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aardvark'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12345</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="List-Concatenation-and-List-Replication"><a href="#List-Concatenation-and-List-Replication" class="headerlink" title="List Concatenation and List Replication"></a>List Concatenation and List Replication</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-del-Statements"><a href="#Removing-Values-from-Lists-with-del-Statements" class="headerlink" title="Removing Values from Lists with del Statements"></a>Removing Values from Lists with del Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Using-for-Loops-with-Lists"><a href="#Using-for-Loops-with-Lists" class="headerlink" title="Using for Loops with Lists"></a>Using for Loops with Lists</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> supply <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Index {} in supplies is: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> supply<span class="token punctuation">)</span><span class="token punctuation">)</span>Index <span class="token number">0</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> pensIndex <span class="token number">1</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> staplersIndex <span class="token number">2</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> flame<span class="token operator">-</span>throwersIndex <span class="token number">3</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> binders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Looping-Through-Multiple-Lists-with-zip"><a href="#Looping-Through-Multiple-Lists-with-zip" class="headerlink" title="Looping Through Multiple Lists with zip()"></a>Looping Through Multiple Lists with zip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Elizabeth'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} years old'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>Pete <span class="token keyword">is</span> <span class="token number">6</span> years oldJohn <span class="token keyword">is</span> <span class="token number">23</span> years oldElizabeth <span class="token keyword">is</span> <span class="token number">44</span> years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators"><a href="#The-in-and-not-in-Operators" class="headerlink" title="The in and not in Operators"></a>The in and not in Operators</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Multiple-Assignment-Trick"><a href="#The-Multiple-Assignment-Trick" class="headerlink" title="The Multiple Assignment Trick"></a>The Multiple Assignment Trick</h3><p>The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> color <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> disposition <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You could type this line of code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> disposition <span class="token operator">=</span> cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The multiple assignment trick can also be used to swap the values in two variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token string">'Alice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Augmented-Assignment-Operators"><a href="#Augmented-Assignment-Operators" class="headerlink" title="Augmented Assignment Operators"></a>Augmented Assignment Operators</h3><table><thead><tr><th>Operator</th><th>Equivalent</th></tr></thead><tbody><tr><td><code>spam += 1</code></td><td><code>spam = spam + 1</code></td></tr><tr><td><code>spam -= 1</code></td><td><code>spam = spam - 1</code></td></tr><tr><td><code>spam *= 1</code></td><td><code>spam = spam * 1</code></td></tr><tr><td><code>spam /= 1</code></td><td><code>spam = spam / 1</code></td></tr><tr><td><code>spam %= 1</code></td><td><code>spam = spam % 1</code></td></tr></tbody></table><p>Examples:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">+=</span> <span class="token string">' world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">*=</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon<span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Finding-a-Value-in-a-List-with-the-index-Method"><a href="#Finding-a-Value-in-a-List-with-the-index-Method" class="headerlink" title="Finding a Value in a List with the index() Method"></a>Finding a Value in a List with the index() Method</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Fat-tail'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Pooka'</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Adding-Values-to-Lists-with-the-append-and-insert-Methods"><a href="#Adding-Values-to-Lists-with-the-append-and-insert-Methods" class="headerlink" title="Adding Values to Lists with the append() and insert() Methods"></a>Adding Values to Lists with the append() and insert() Methods</h3><p><strong>append()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'moose'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insert()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-remove"><a href="#Removing-Values-from-Lists-with-remove" class="headerlink" title="Removing Values from Lists with remove()"></a>Removing Values from Lists with remove()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bat'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If the value appears multiple times in the list, only the first instance of the value will be removed.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-pop"><a href="#Removing-Values-from-Lists-with-pop" class="headerlink" title="Removing Values from Lists with pop()"></a>Removing Values from Lists with pop()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'elephant'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'cat'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Sorting-the-Values-in-a-List-with-the-sort-Method"><a href="#Sorting-the-Values-in-a-List-with-the-sort-Method" class="headerlink" title="Sorting the Values in a List with the sort() Method"></a>Sorting the Values in a List with the sort() Method</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'elephants'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'ants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can use the built-in function <code>sorted</code> to return a new list:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Tuple-Data-Type"><a href="#Tuple-Data-Type" class="headerlink" title="Tuple Data Type"></a>Tuple Data Type</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The main way that tuples are different from lists is that tuples, like strings, are immutable.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Converting-Types-with-the-list-and-tuple-Functions"><a href="#Converting-Types-with-the-list-and-tuple-Functions" class="headerlink" title="Converting Types with the list() and tuple() Functions"></a>Converting Types with the list() and tuple() Functions</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Dictionaries-and-Structuring-Data"><a href="#Dictionaries-and-Structuring-Data" class="headerlink" title="Dictionaries and Structuring Data"></a>Dictionaries and Structuring Data</h2><p>Example Dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myCat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'gray'</span><span class="token punctuation">,</span> <span class="token string">'disposition'</span><span class="token punctuation">:</span> <span class="token string">'loud'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-keys-values-and-items-Methods"><a href="#The-keys-values-and-items-Methods" class="headerlink" title="The keys(), values(), and items() Methods"></a>The keys(), values(), and items() Methods</h3><p>values():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>red<span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keys():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>colorage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>items():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Key: {} Value: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Key<span class="token punctuation">:</span> age Value<span class="token punctuation">:</span> <span class="token number">42</span>Key<span class="token punctuation">:</span> color Value<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Checking-Whether-a-Key-or-Value-Exists-in-a-Dictionary"><a href="#Checking-Whether-a-Key-or-Value-Exists-in-a-Dictionary" class="headerlink" title="Checking Whether a Key or Value Exists in a Dictionary"></a>Checking Whether a Key or Value Exists in a Dictionary</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'name'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Zophie'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can omit the call to keys() when checking for a key</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-get-Method"><a href="#The-get-Method" class="headerlink" title="The get() Method"></a>The get() Method</h3><p>Get has two parameters: key and default value if the key did not exist</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> picnic_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'cups'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} cups.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cups'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 2 cups.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} eggs.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eggs'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 0 eggs.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-setdefault-Method"><a href="#The-setdefault-Method" class="headerlink" title="The setdefault() Method"></a>The setdefault() Method</h3><p>Let’s consider this code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token punctuation">:</span>    spam<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>setdefault</code> we could write the same code more succinctly:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Pretty-Printing"><a href="#Pretty-Printing" class="headerlink" title="Pretty Printing"></a>Pretty Printing</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> message <span class="token operator">=</span> 'It was a bright cold day <span class="token keyword">in</span> April<span class="token punctuation">,</span> <span class="token keyword">and</span> the clocks were striking<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thirteen<span class="token punctuation">.</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> character <span class="token keyword">in</span> message<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>character<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Merge-two-dictionaries"><a href="#Merge-two-dictionaries" class="headerlink" title="Merge two dictionaries"></a>Merge two dictionaries</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in Python 3.5+:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">**</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment"># in Python 2.7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h2><p>From the Python 3 <a href="https://docs.python.org/3/tutorial/datastructures.html">documentation</a></p><blockquote><p>A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p></blockquote><h3 id="Initializing-a-set"><a href="#Initializing-a-set" class="headerlink" title="Initializing a set"></a>Initializing a set</h3><p>There are two ways to create sets: using curly braces <code>{}</code> and the built-in function <code>set()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>When creating an empty set, be sure to not use the curly braces <code>{}</code> or you will get an empty dictionary instead.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sets-unordered-collections-of-unique-elements"><a href="#sets-unordered-collections-of-unique-elements" class="headerlink" title="sets: unordered collections of unique elements"></a>sets: unordered collections of unique elements</h3><p>A set automatically remove all the duplicate values.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And as an unordered data type, they can’t be indexed.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-add-and-update"><a href="#set-add-and-update" class="headerlink" title="set add() and update()"></a>set add() and update()</h3><p>Using the <code>add()</code> method we can add a single element to the set.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And with <code>update()</code>, multiple ones .</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>  <span class="token comment"># remember, sets automatically remove duplicates</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-remove-and-discard"><a href="#set-remove-and-discard" class="headerlink" title="set remove() and discard()"></a>set remove() and discard()</h3><p>Both methods will remove an element from the set, but <code>remove()</code> will raise a <code>key error</code> if the value doesn’t exist.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>discard()</code> won’t raise any errors.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-union"><a href="#set-union" class="headerlink" title="set union()"></a>set union()</h3><p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets provided.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 | s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h3><p><code>intersection</code> or <code>&amp;</code> will return a set containing only the elements that are common to all of them.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>  <span class="token comment"># or 's1 &amp; s2 &amp; s3'</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set difference"></a>set difference</h3><p><code>difference</code> or <code>-</code> will return only the elements that are unique to the first set (invoked set).</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 - s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment"># or 's2 - s1'</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-symetric-difference"><a href="#set-symetric-difference" class="headerlink" title="set symetric_difference"></a>set symetric_difference</h3><p><code>symetric_difference</code> or <code>^</code> will return all the elements that are not common between them.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 ^ s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="itertools-Module"><a href="#itertools-Module" class="headerlink" title="itertools Module"></a>itertools Module</h2><p>The <em>itertools</em> module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like <a href="#lists">lists</a> or <a href="#dictionaries-and-structuring-data">dictionaries</a>).</p><p>From the official <a href="https://docs.python.org/3/library/itertools.html">Python 3.x documentation</a>:</p><blockquote><p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p></blockquote><p>The <em>itertools</em> module comes in the standard library and must be imported.</p><p>The <a href="https://docs.python.org/3/library/operator.html">operator</a> module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h3><p>Makes an iterator that returns the results of a function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>iterable<span class="token punctuation">[</span><span class="token punctuation">,</span> func<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">6</span><span class="token number">24</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The operator.mul takes two numbers and multiplies them:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">24</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Passing a function is optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">7</span><span class="token number">13</span><span class="token number">17</span><span class="token number">22</span><span class="token number">31</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If no function is designated the items will be summed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">5</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token number">13</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token number">17</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token number">22</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token number">31</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><p>Just like combinations(), but allows individual elements to be repeated more than once.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'circle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>Makes an iterator that returns evenly spaced values starting with number start.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token number">10</span><span class="token number">13</span><span class="token number">16</span><span class="token number">19</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle()"></a>cycle()</h3><p>This function cycles through an iterator endlessly.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'violet'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>redorangeyellowgreenbluevioletredorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When reached the end of the iterable it start over again from the beginning.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="chain"><a href="#chain" class="headerlink" title="chain()"></a>chain()</h3><p>Take a series of iterables and return them as one long iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenbluecircletrianglesquarepentagon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="compress"><a href="#compress" class="headerlink" title="compress()"></a>compress()</h3><p>Filters one iterable with another.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>circlesquare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile()"></a>dropwhile()</h3><p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse()"></a>filterfalse()</h3><p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h3><p>Simply put, this function groups things together.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'faction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="islice"><a href="#islice" class="headerlink" title="islice()"></a>islice()</h3><p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><p>Creates the cartesian products from a series of iterables.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>This function will repeat an object over and over again. Unless, there is a times argument.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>spamspamspam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap()"></a>starmap()</h3><p>Makes an iterator that computes the function using arguments obtained from the iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">12</span><span class="token number">32</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile()"></a>takewhile()</h3><p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="tee"><a href="#tee" class="headerlink" title="tee()"></a>tee()</h3><p>Return n independent iterators from a single iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest()"></a>zip_longest()</h3><p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Comprehensions"><a href="#Comprehensions" class="headerlink" title="Comprehensions"></a>Comprehensions</h2><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set-comprehension"><a href="#Set-comprehension" class="headerlink" title="Set comprehension"></a>Set comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"ABC"</span><span class="token punctuation">,</span> <span class="token string">"DEF"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Dict-comprehension"><a href="#Dict-comprehension" class="headerlink" title="Dict comprehension"></a>Dict comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'Pooka'</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A List comprehension can be generated from a dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Oooka'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'NAME:POOKA'</span><span class="token punctuation">,</span> <span class="token string">'FIRST_NAME:OOOKA'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Manipulating-Strings"><a href="#Manipulating-Strings" class="headerlink" title="Manipulating Strings"></a>Manipulating Strings</h2><h3 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h3><table><thead><tr><th>Escape character</th><th>Prints as</th></tr></thead><tbody><tr><td><code>\'</code></td><td>Single quote</td></tr><tr><td><code>\"</code></td><td>Double quote</td></tr><tr><td><code>\t</code></td><td>Tab</td></tr><tr><td><code>\n</code></td><td>Newline (line break)</td></tr><tr><td><code>\\</code></td><td>Backslash</td></tr></tbody></table><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello there!\nHow are you?\nI\'m doing fine."</span><span class="token punctuation">)</span>Hello there!How are you?I'm doing fine<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Raw-Strings"><a href="#Raw-Strings" class="headerlink" title="Raw Strings"></a>Raw Strings</h3><p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'That is Carol\'s cat.'</span><span class="token punctuation">)</span>That <span class="token keyword">is</span> Carol\'s cat<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: mostly used for regular expression definition (see <code>re</code> package)</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Multiline-Strings-with-Triple-Quotes"><a href="#Multiline-Strings-with-Triple-Quotes" class="headerlink" title="Multiline Strings with Triple Quotes"></a>Multiline Strings with Triple Quotes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt; Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,&gt;&gt;&gt; Bob'''</span><span class="token punctuation">)</span>Dear Alice<span class="token punctuation">,</span>Eve's cat has been arrested <span class="token keyword">for</span> catnapping<span class="token punctuation">,</span> cat burglary<span class="token punctuation">,</span> <span class="token keyword">and</span> extortion<span class="token punctuation">.</span>Sincerely<span class="token punctuation">,</span>Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> textwrap <span class="token keyword">import</span> dedent<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&gt;&gt;&gt;         Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt;         Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt;         Sincerely,&gt;&gt;&gt;         Bob&gt;&gt;&gt;         '''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This generates the same string than before.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Indexing-and-Slicing-Strings"><a href="#Indexing-and-Slicing-Strings" class="headerlink" title="Indexing and Slicing Strings"></a>Indexing and Slicing Strings</h3><pre><code>H   e   l   l   o       w   o   r   l   d    !0   1   2   3   4   5   6   7   8   9   10   11</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'H'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token string">'world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'Hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!dlrow olleH'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-in-and-not-in-Operators-with-Strings"><a href="#The-in-and-not-in-Operators-with-Strings" class="headerlink" title="The in and not in Operators with Strings"></a>The in and not in Operators with Strings</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">''</span> <span class="token keyword">in</span> <span class="token string">'spam'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cats'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'cats and dogs'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators-with-list"><a href="#The-in-and-not-in-Operators-with-list" class="headerlink" title="The in and not in Operators with list"></a>The in and not in Operators with list</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">in</span> a<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">in</span> a<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-upper-lower-isupper-and-islower-String-Methods"><a href="#The-upper-lower-isupper-and-islower-String-Methods" class="headerlink" title="The upper(), lower(), isupper(), and islower() String Methods"></a>The upper(), lower(), isupper(), and islower() String Methods</h3><p><code>upper()</code> and <code>lower()</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'HELLO WORLD!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>isupper() and islower():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-isX-String-Methods"><a href="#The-isX-String-Methods" class="headerlink" title="The isX String Methods"></a>The isX String Methods</h3><ul><li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li><li><strong>isalnum()</strong> returns True if the string consists only of letters and numbers and is not blank.</li><li><strong>isdecimal()</strong> returns True if the string consists only of numeric characters and is not blank.</li><li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li><li><strong>istitle()</strong> returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.</li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-startswith-and-endswith-String-Methods"><a href="#The-startswith-and-endswith-String-Methods" class="headerlink" title="The startswith() and endswith() String Methods"></a>The startswith() and endswith() String Methods</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-join-and-split-String-Methods"><a href="#The-join-and-split-String-Methods" class="headerlink" title="The join() and split() String Methods"></a>The join() and split() String Methods</h3><p>join():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'rats'</span><span class="token punctuation">,</span> <span class="token string">'bats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'cats, rats, bats'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'My name is Simon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'MyABCnameABCisABCSimon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>split():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'MyABCnameABCisABCSimon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My na'</span><span class="token punctuation">,</span> <span class="token string">'e is Si'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Justifying-Text-with-rjust-ljust-and-center"><a href="#Justifying-Text-with-rjust-ljust-and-center" class="headerlink" title="Justifying Text with rjust(), ljust(), and center()"></a>Justifying Text with rjust(), ljust(), and center()</h3><p>rjust() and ljust():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'     Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'               Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello World'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'         Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'Hello     '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token string">'***************Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token string">'Hello---------------'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>center():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'       Hello       '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token string">'=======Hello========'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Whitespace-with-strip-rstrip-and-lstrip"><a href="#Removing-Whitespace-with-strip-rstrip-and-lstrip" class="headerlink" title="Removing Whitespace with strip(), rstrip(), and lstrip()"></a>Removing Whitespace with strip(), rstrip(), and lstrip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'    Hello World     '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'    Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'SpamSpamBaconSpamEggsSpamSpam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'ampS'</span><span class="token punctuation">)</span><span class="token string">'BaconSpamEggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install"><a href="#Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install" class="headerlink" title="Copying and Pasting Strings with the pyperclip Module (need pip install)"></a>Copying and Pasting Strings with the pyperclip Module (need pip install)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pyperclip<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>paste<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a>String Formatting</h2><h3 id="operator"><a href="#operator" class="headerlink" title="% operator"></a>% operator</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Pete'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token string">"Hello Pete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I have %x apples'</span> <span class="token operator">%</span> num<span class="token string">"I have 5 apples"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note: For new code, using <a href="#string-formatting-strformat">str.format</a> or <a href="#formatted-string-literals-or-f-strings-python-36">f-strings</a> (Python 3.6+) is strongly recommended over the <code>%</code> operator.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="String-Formatting-str-format"><a href="#String-Formatting-str-format" class="headerlink" title="String Formatting (str.format)"></a>String Formatting (str.format)</h3><p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'John'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">20</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {}, my age is {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {0}, my age is {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The official <a href="https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p><blockquote><p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p></blockquote><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Lazy-string-formatting"><a href="#Lazy-string-formatting" class="headerlink" title="Lazy string formatting"></a>Lazy string formatting</h3><p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,<br>the most common being logging:</p><p>Prefer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"alice"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Over:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Formatted-String-Literals-or-f-strings-Python-3-6"><a href="#Formatted-String-Literals-or-f-strings-Python-3-6" class="headerlink" title="Formatted String Literals or f-strings (Python 3.6+)"></a>Formatted String Literals or f-strings (Python 3.6+)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!'</span></span>'Hello Elizabeth!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It is even possible to do inline arithmetic with it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Five plus ten is </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span><span class="token string">'Five plus ten is 15 and not 30.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">'Hey $name!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token string">'Hey Elizabeth!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><ol><li>Import the regex module with <code>import re</code>.</li><li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li><li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li><li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li></ol><p>All the regex functions in Python are in the re module:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Regex-Objects"><a href="#Matching-Regex-Objects" class="headerlink" title="Matching Regex Objects"></a>Matching Regex Objects</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Phone number found: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Phone number found<span class="token punctuation">:</span> <span class="token number">415</span><span class="token operator">-</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Grouping-with-Parentheses"><a href="#Grouping-with-Parentheses" class="headerlink" title="Grouping with Parentheses"></a>Grouping with Parentheses</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'415'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'415'</span><span class="token punctuation">,</span> <span class="token string">'555-4242'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> area_code<span class="token punctuation">,</span> main_number <span class="token operator">=</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>area_code<span class="token punctuation">)</span><span class="token number">415</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>main_number<span class="token punctuation">)</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Multiple-Groups-with-the-Pipe"><a href="#Matching-Multiple-Groups-with-the-Pipe" class="headerlink" title="Matching Multiple Groups with the Pipe"></a>Matching Multiple Groups with the Pipe</h3><p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r’Batman|Tina Fey’ will match either ‘Batman’ or ‘Tina Fey’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hero_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span> <span class="token punctuation">(</span><span class="token string">r'Batman|Tina Fey'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batman and Tina Fey.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Tina Fey and Batman.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Tina Fey'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also use the pipe to match one of several patterns as part of your regex:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(man|mobile|copter|bat)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batmobile lost a wheel'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batmobile'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'mobile'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Optional-Matching-with-the-Question-Mark"><a href="#Optional-Matching-with-the-Question-Mark" class="headerlink" title="Optional Matching with the Question Mark"></a>Optional Matching with the Question Mark</h3><p>The ? character flags the group that precedes it as an optional part of the pattern.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)?man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Zero-or-More-with-the-Star"><a href="#Matching-Zero-or-More-with-the-Star" class="headerlink" title="Matching Zero or More with the Star"></a>Matching Zero or More with the Star</h3><p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)*man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-One-or-More-with-the-Plus"><a href="#Matching-One-or-More-with-the-Plus" class="headerlink" title="Matching One or More with the Plus"></a>Matching One or More with the Plus</h3><p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)+man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Specific-Repetitions-with-Curly-Brackets"><a href="#Matching-Specific-Repetitions-with-Curly-Brackets" class="headerlink" title="Matching Specific Repetitions with Curly Brackets"></a>Matching Specific Repetitions with Curly Brackets</h3><p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string ‘HaHaHa’, but it will not match ‘HaHa’, since the latter has only two repeats of the (Ha) group.</p><p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match ‘HaHaHa’, ‘HaHaHaHa’, and ‘HaHaHaHaHa’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Ha'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Greedy-and-Nongreedy-Matching"><a href="#Greedy-and-Nongreedy-Matching" class="headerlink" title="Greedy and Nongreedy Matching"></a>Greedy and Nongreedy Matching</h3><p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}?'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> nongreedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-findall-Method"><a href="#The-findall-Method" class="headerlink" title="The findall() Method"></a>The findall() Method</h3><p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span> <span class="token comment"># has no groups</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Cell: 415-555-9999 Work: 212-555-0000'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'415-555-9999'</span><span class="token punctuation">,</span> <span class="token string">'212-555-0000'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To summarize what the findall() method returns, remember the following:</p><ul><li><p>When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as [‘415-555-9999’, ‘212-555-0000’].</p></li><li><p>When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [(‘415’, ‘555’, ‘9999’), (‘212’, ‘555’, ‘0000’)].</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Making-Your-Own-Character-Classes"><a href="#Making-Your-Own-Character-Classes" class="headerlink" title="Making Your Own Character Classes"></a>Making Your Own Character Classes</h3><p>There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p><p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> '<span class="token string">', '</span><span class="token string">B', '</span><span class="token string">B', '</span>Y<span class="token string">', '</span> <span class="token string">', '</span><span class="token string-interpolation"><span class="token string">F', '</span></span>D<span class="token string">', '</span><span class="token punctuation">.</span>'<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Caret-and-Dollar-Sign-Characters"><a href="#The-Caret-and-Dollar-Sign-Characters" class="headerlink" title="The Caret and Dollar Sign Characters"></a>The Caret and Dollar Sign Characters</h3><ul><li><p>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</p></li><li><p>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</p></li><li><p>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</p></li></ul><p>The r’^Hello’ regular expression string matches strings that begin with ‘Hello’:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^Hello'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'He said hello.'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The r’\d$‘ regular expression string matches strings that end with a numeric character from 0 to 9:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\d+$'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'1234567890'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12345xyz67890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12 34567890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Wildcard-Character"><a href="#The-Wildcard-Character" class="headerlink" title="The Wildcard Character"></a>The Wildcard Character</h3><p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.at'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'The cat in the hat sat on the flat mat.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'sat'</span><span class="token punctuation">,</span> <span class="token string">'lat'</span><span class="token punctuation">,</span> <span class="token string">'mat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Everything-with-Dot-Star"><a href="#Matching-Everything-with-Dot-Star" class="headerlink" title="Matching Everything with Dot-Star"></a>Matching Everything with Dot-Star</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'First Name: (.*) Last Name: (.*)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> name_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'First Name: Al Last Name: Sweigart'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'Al'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'Sweigart'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*?&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> nongreedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Newlines-with-the-Dot-Character"><a href="#Matching-Newlines-with-the-Dot-Character" class="headerlink" title="Matching Newlines with the Dot Character"></a>Matching Newlines with the Dot Character</h3><p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Review-of-Regex-Symbols"><a href="#Review-of-Regex-Symbols" class="headerlink" title="Review of Regex Symbols"></a>Review of Regex Symbols</h3><table><thead><tr><th>Symbol</th><th>Matches</th></tr></thead><tbody><tr><td><code>?</code></td><td>zero or one of the preceding group.</td></tr><tr><td><code>*</code></td><td>zero or more of the preceding group.</td></tr><tr><td><code>+</code></td><td>one or more of the preceding group.</td></tr><tr><td><code>{n}</code></td><td>exactly n of the preceding group.</td></tr><tr><td><code>{n,}</code></td><td>n or more of the preceding group.</td></tr><tr><td><code>{,m}</code></td><td>0 to m of the preceding group.</td></tr><tr><td><code>{n,m}</code></td><td>at least n and at most m of the preceding p.</td></tr><tr><td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td><td>performs a nongreedy match of the preceding p.</td></tr><tr><td><code>^spam</code></td><td>means the string must begin with spam.</td></tr><tr><td><code>spam$</code></td><td>means the string must end with spam.</td></tr><tr><td><code>.</code></td><td>any character, except newline characters.</td></tr><tr><td><code>\d</code>, <code>\w</code>, and <code>\s</code></td><td>a digit, word, or space character, respectively.</td></tr><tr><td><code>\D</code>, <code>\W</code>, and <code>\S</code></td><td>anything except a digit, word, or space, respectively.</td></tr><tr><td><code>[abc]</code></td><td>any character between the brackets (such as a, b, ).</td></tr><tr><td><code>[^abc]</code></td><td>any character that isn’t between the brackets.</td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Case-Insensitive-Matching"><a href="#Case-Insensitive-Matching" class="headerlink" title="Case-Insensitive Matching"></a>Case-Insensitive Matching</h3><p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'robocop'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Robocop is part man, part machine, all cop.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'ROBOCOP protects the innocent.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ROBOCOP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Al, why does your programming book talk about robocop so much?'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Substituting-Strings-with-the-sub-Method"><a href="#Substituting-Strings-with-the-sub-Method" class="headerlink" title="Substituting Strings with the sub() Method"></a>Substituting Strings with the sub() Method</h3><p>The sub() method for Regex objects is passed two arguments:</p><ol><li>The first argument is a string to replace any matches.</li><li>The second is the string for the regular expression.</li></ol><p>The sub() method returns a string with the substitutions applied:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent \w+'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'CENSORED'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice gave the secret documents to Agent Bob.'</span><span class="token punctuation">)</span><span class="token string">'CENSORED gave the secret documents to CENSORED.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Another example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent (\w)\w*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\1****'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'</span><span class="token punctuation">)</span>A<span class="token operator">**</span><span class="token operator">**</span> told C<span class="token operator">**</span><span class="token operator">**</span> that E<span class="token operator">**</span><span class="token operator">**</span> knew B<span class="token operator">**</span><span class="token operator">**</span> was a double agent<span class="token punctuation">.</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Managing-Complex-Regexes"><a href="#Managing-Complex-Regexes" class="headerlink" title="Managing Complex Regexes"></a>Managing Complex Regexes</h3><p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p><p>Now instead of a hard-to-read regular expression like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>you can spread the regular expression over multiple lines with comments like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r'''(    (\d{3}|\(\d{3}\))?            # area code    (\s|-|\.)?                    # separator    \d{3}                         # first 3 digits    (\s|-|\.)                     # separator    \d{4}                         # last 4 digits    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension    )'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Handling-File-and-Directory-Paths"><a href="#Handling-File-and-Directory-Paths" class="headerlink" title="Handling File and Directory Paths"></a>Handling File and Directory Paths</h2><p>There are two main modules in Python that deals with path manipulation.<br>One is the <code>os.path</code> module and the other is the <code>pathlib</code> module.<br>The <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way<br>to handle file system paths.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux"><a href="#Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux" class="headerlink" title="Backslash on Windows and Forward Slash on OS X and Linux"></a>Backslash on Windows and Forward Slash on OS X and Linux</h3><p>On Windows, paths are written using backslashes (<code>\</code>) as the separator between<br>folder names. On Unix based operating system such as macOS, Linux, and BSDs,<br>the forward slash (<code>/</code>) is used as the path separator. Joining paths can be<br>a headache if your code needs to work on different platforms.</p><p>Fortunately, Python provides easy ways to handle this. We will showcase<br>how to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token string">'usr\\bin\\spam'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">'bin'</span> <span class="token operator">/</span> <span class="token string">'spam'</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Notice the path separator is different between Windows and Unix based operating<br>system, that’s why you want to use one of the above methods instead of<br>adding strings together to join paths together.</p><p>Joining paths is helpful if you need to create different file paths under<br>the same directory.</p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Users\\asweigart'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Users\asweigart\accounts<span class="token punctuation">.</span>txtC<span class="token punctuation">:</span>\Users\asweigart\details<span class="token punctuation">.</span>csvC<span class="token punctuation">:</span>\Users\asweigart\invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> home <span class="token operator">=</span> Path<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>home <span class="token operator">/</span> filename<span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>accounts<span class="token punctuation">.</span>txt<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>details<span class="token punctuation">.</span>csv<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Current-Working-Directory"><a href="#The-Current-Working-Directory" class="headerlink" title="The Current Working Directory"></a>The Current Working Directory</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Python34'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Windows\\System32'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> os <span class="token keyword">import</span> chdir<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chdir<span class="token punctuation">(</span><span class="token string">'/usr/lib/python3.6'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Creating-New-Folders"><a href="#Creating-New-Folders" class="headerlink" title="Creating New Folders"></a>Creating New Folders</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'C:\\delicious\\walnut\\waffles'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">1226</span><span class="token punctuation">,</span> <span class="token keyword">in</span> mkdir    self<span class="token punctuation">.</span>_accessor<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">387</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapped    <span class="token keyword">return</span> strfunc<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>pathobj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory<span class="token punctuation">:</span> <span class="token string">'/home/asweigart/delicious/walnut/waffles'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oh no, we got a nasty error! The reason is that the ‘delicious’ directory does<br>not exist, so we cannot make the ‘walnut’ and the ‘waffles’ directories under<br>it. To fix this, do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And all is good :)</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Absolute-vs-Relative-Paths"><a href="#Absolute-vs-Relative-Paths" class="headerlink" title="Absolute vs. Relative Paths"></a>Absolute vs. Relative Paths</h3><p>There are two ways to specify a file path.</p><ul><li>An absolute path, which always begins with the root folder</li><li>A relative path, which is relative to the program’s current working directory</li></ul><p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Handling-Absolute-and-Relative-Paths"><a href="#Handling-Absolute-and-Relative-Paths" class="headerlink" title="Handling Absolute and Relative Paths"></a>Handling Absolute and Relative Paths</h3><p>To see if a path is an absolute path:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'/home/asweigart'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token string">'/home'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can get a relative path from a starting path to another path.</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token string">'etc/passwd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>relative_to<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>etc<span class="token operator">/</span>passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Checking-Path-Validity"><a href="#Checking-Path-Validity" class="headerlink" title="Checking Path Validity"></a>Checking Path Validity</h3><p>Checking if a file/directory exists:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a file:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a directory:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Finding-File-Sizes-and-Folder-Contents"><a href="#Finding-File-Sizes-and-Folder-Contents" class="headerlink" title="Finding File Sizes and Folder Contents"></a>Finding File Sizes and Folder Contents</h3><p>Getting a file’s size in bytes:</p><p>Using <code>os.path</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32\\calc.exe'</span><span class="token punctuation">)</span><span class="token number">776192</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> stat <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">'/bin/python3.6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span> <span class="token comment"># stat contains some other information about the file as well</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33261</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">141087</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">2051</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">10024</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1517725562</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1515119809</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1517261276</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span> <span class="token comment"># size in bytes</span><span class="token number">10024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>os.listdir</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'0409'</span><span class="token punctuation">,</span> <span class="token string">'12520437.cpx'</span><span class="token punctuation">,</span> <span class="token string">'12520850.cpx'</span><span class="token punctuation">,</span> <span class="token string">'5U877.ax'</span><span class="token punctuation">,</span> <span class="token string">'aaclient.dll'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token string">'xwtpdui.dll'</span><span class="token punctuation">,</span> <span class="token string">'xwtpw32.dll'</span><span class="token punctuation">,</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token string">'zh-HK'</span><span class="token punctuation">,</span> <span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token string">'zipfldr.dll'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>tiff2rgba<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>iconv<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>ldd<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>cache_restore<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>udiskie<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>unix2dos<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>t1reencode<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>epstopdf<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>idle3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To find the total size of all the files in this directory:</p><p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to<br>check for whether a path is a file or directory using the methods in the methods discussed in the above section!</p><p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      total_size <span class="token operator">=</span> total_size <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1117846456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> sub_path <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     total_size <span class="token operator">+=</span> sub_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1903178911</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Copying-Files-and-Folders"><a href="#Copying-Files-and-Folders" class="headerlink" title="Copying Files and Folders"></a>Copying Files and Folders</h3><p>The shutil module provides functions for copying files, as well as entire folders.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'C:\\spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\spam.txt'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'eggs.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious\\eggs2.txt'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\eggs2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'C:\\bacon'</span><span class="token punctuation">,</span> <span class="token string">'C:\\bacon_backup'</span><span class="token punctuation">)</span><span class="token string">'C:\\bacon_backup'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Moving-and-Renaming-Files-and-Folders"><a href="#Moving-and-Renaming-Files-and-Folders" class="headerlink" title="Moving and Renaming Files and Folders"></a>Moving and Renaming Files and Folders</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs\\new_bacon.txt'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\new_bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Permanently-Deleting-Files-and-Folders"><a href="#Permanently-Deleting-Files-and-Folders" class="headerlink" title="Permanently Deleting Files and Folders"></a>Permanently Deleting Files and Folders</h3><ul><li><p>Calling os.unlink(path) or Path.unlink() will delete the file at path.</p></li><li><p>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</p></li><li><p>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Safe-Deletes-with-the-send2trash-Module"><a href="#Safe-Deletes-with-the-send2trash-Module" class="headerlink" title="Safe Deletes with the send2trash Module"></a>Safe Deletes with the send2trash Module</h3><p>You can install this module by running pip install send2trash from a Terminal window.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> send2trash<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span> <span class="token comment"># creates the file</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Walking-a-Directory-Tree"><a href="#Walking-a-Directory-Tree" class="headerlink" title="Walking a Directory Tree"></a>Walking a Directory Tree</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> folder_name<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The current folder is {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> subfolder <span class="token keyword">in</span> subfolders<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SUBFOLDER OF {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> subfolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILE INSIDE {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>The current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\deliciousSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> catsSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> walnutFILE INSIDE C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> spam<span class="token punctuation">.</span>txtThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\catsFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> catnames<span class="token punctuation">.</span>txtFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> zophie<span class="token punctuation">.</span>jpgThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnutSUBFOLDER OF C<span class="token punctuation">:</span>\delicious\walnut<span class="token punctuation">:</span> wafflesThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnut\wafflesFILE INSIDE C<span class="token punctuation">:</span>\delicious\walnut\waffles<span class="token punctuation">:</span> butter<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><p><code>pathlib</code> provides a lot more functionality than the ones listed above,<br>like getting file name, getting file extension, reading/writing a file without<br>manually opening it, etc. Check out the<br><a href="https://docs.python.org/3/library/pathlib.html">official documentation</a><br>if you want to know more!</p><h2 id="Reading-and-Writing-Files"><a href="#Reading-and-Writing-Files" class="headerlink" title="Reading and Writing Files"></a>Reading and Writing Files</h2><h3 id="The-File-Reading-Writing-Process"><a href="#The-File-Reading-Writing-Process" class="headerlink" title="The File Reading/Writing Process"></a>The File Reading/Writing Process</h3><p>To read/write to a file in Python, you will want to use the <code>with</code><br>statement, which will close the file for you after you are done.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Opening-and-reading-files-with-the-open-function"><a href="#Opening-and-reading-files-with-the-open-function" class="headerlink" title="Opening and reading files with the open() function"></a>Opening and reading files with the open() function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\your_home_folder\\hello.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hello_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     hello_content <span class="token operator">=</span> hello_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello_content<span class="token string">'Hello World!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     sonnet_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men<span class="token string">'s eyes,\n'</span><span class="token punctuation">,</span> ' I <span class="token builtin">all</span> alone beweep myoutcast state<span class="token punctuation">,</span>\n<span class="token string">', And trouble deaf heaven with my bootless cries,\n'</span><span class="token punctuation">,</span> Andlook upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span>'<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can also iterate through the file line by line:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> sonnet_file<span class="token punctuation">:</span> <span class="token comment"># note the new line character will be included in the line</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men's eyes<span class="token punctuation">,</span>I <span class="token builtin">all</span> alone beweep my outcast state<span class="token punctuation">,</span>And trouble deaf heaven <span class="token keyword">with</span> my bootless cries<span class="token punctuation">,</span>And look upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Writing-to-Files"><a href="#Writing-to-Files" class="headerlink" title="Writing to Files"></a>Writing to Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello world!\n'</span><span class="token punctuation">)</span><span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     content <span class="token operator">=</span> bacon_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>Hello world!Bacon <span class="token keyword">is</span> <span class="token keyword">not</span> a vegetable<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Saving-Variables-with-the-shelve-Module"><a href="#Saving-Variables-with-the-shelve-Module" class="headerlink" title="Saving Variables with the shelve Module"></a>Saving Variables with the shelve Module</h3><p>To save variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shelve<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To open and read variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'shelve.DbfilenameShelf'</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Saving-Variables-with-the-pprint-pformat-Function"><a href="#Saving-Variables-with-the-pprint-pformat-Function" class="headerlink" title="Saving Variables with the pprint.pformat() Function"></a>Saving Variables with the pprint.pformat() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token string">"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = {}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Reading-ZIP-Files"><a href="#Reading-ZIP-Files" class="headerlink" title="Reading ZIP Files"></a>Reading ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     spam_info <span class="token operator">=</span> example_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Compressed file is %sx smaller!'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size <span class="token operator">/</span> spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/'</span><span class="token punctuation">,</span> <span class="token string">'cats/catnames.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/zophie.jpg'</span><span class="token punctuation">]</span><span class="token number">13908</span><span class="token number">3828</span><span class="token string">'Compressed file is 3.63x smaller!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Extracting-from-ZIP-Files"><a href="#Extracting-from-ZIP-Files" class="headerlink" title="Extracting from ZIP Files"></a>Extracting from ZIP Files</h3><p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     example_zip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\some\\new\\folders'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'C:\\spam.txt'</span><span class="token string">'C:\\some\\new\\folders\\spam.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Creating-and-Adding-to-ZIP-Files"><a href="#Creating-and-Adding-to-ZIP-Files" class="headerlink" title="Creating and Adding to ZIP Files"></a>Creating and Adding to ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_zip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="JSON-YAML-and-configuration-files"><a href="#JSON-YAML-and-configuration-files" class="headerlink" title="JSON, YAML and configuration files"></a>JSON, YAML and configuration files</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>Open a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Write a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsoncontent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Joe"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.<br>It is a convenient choice for configuration files where humans will have to edit it.</p><p>There are two main libraries allowing to access to YAML files:</p><ul><li><a href="https://pypi.python.org/pypi/PyYAML">PyYaml</a></li><li><a href="https://pypi.python.org/pypi/ruamel.yaml">Ruamel.yaml</a></li></ul><p>Install them using <code>pip install</code> in your virtual environment.</p><p>The first one it easier to use but the second one, Ruamel, implements much better the YAML<br>specification, and allow for example to modify a YAML content without altering comments.</p><p>Open a YAML file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ruamel<span class="token punctuation">.</span>yaml <span class="token keyword">import</span> YAML<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.yaml"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    yaml<span class="token operator">=</span>YAML<span class="token punctuation">(</span><span class="token punctuation">)</span>    yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Anyconfig"><a href="#Anyconfig" class="headerlink" title="Anyconfig"></a>Anyconfig</h3><p><a href="https://pypi.python.org/pypi/anyconfig">Anyconfig</a> is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p><p>Install it with:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> anyconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Usage:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> anyconfigconf1 <span class="token operator">=</span> anyconfig<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/path/to/foo/conf.d/a.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><h3 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h3><p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p><ul><li>The raise keyword</li><li>A call to the Exception() function</li><li>A string with a helpful error message passed to the Exception() function</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#191&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> This <span class="token keyword">is</span> the error message<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">box_print</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Symbol must be a single character string.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Width must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Height must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token keyword">for</span> sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ZZ'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        box_print<span class="token punctuation">(</span>sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception happened: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-the-Traceback-as-a-String"><a href="#Getting-the-Traceback-as-a-String" class="headerlink" title="Getting the Traceback as a String"></a>Getting the Traceback as a String</h3><p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> traceback<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'errorInfo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> error_file<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>          error_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The traceback info was written to errorInfo.txt.'</span><span class="token punctuation">)</span><span class="token number">116</span>The traceback info was written to errorInfo<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p><pre><code>Traceback (most recent call last):  File "&lt;pyshell#28&gt;", line 2, in &lt;module&gt;Exception: This is the error message.</code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h3><p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p><ul><li>The assert keyword</li><li>A condition (that is, an expression that evaluates to True or False)</li><li>A comma</li><li>A string to display when the condition is False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'open'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'I\'m sorry, Dave. I\'m afraid I can\'t do that.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#10&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>AssertionError<span class="token punctuation">:</span> The pod bay doors need to be <span class="token string">"open"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p><p>Disabling Assertions</p><p>Assertions can be disabled by passing the -O option when running Python.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of program'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     total <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         total <span class="token operator">*=</span> i<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'i is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', total is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">return</span> total<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of program'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of program<span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">665</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">668</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">670</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">2</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">673</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">3</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">675</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">4</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">678</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">680</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">684</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging-Levels"><a href="#Logging-Levels" class="headerlink" title="Logging Levels"></a>Logging Levels</h3><p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p><table><thead><tr><th>Level</th><th>Logging Function</th><th>Description</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td><code>logging.debug()</code></td><td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td><code>logging.info()</code></td><td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td></tr><tr><td><code>WARNING</code></td><td><code>logging.warning()</code></td><td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td></tr><tr><td><code>ERROR</code></td><td><code>logging.error()</code></td><td>Used to record an error that caused the program to fail to do something.</td></tr><tr><td><code>CRITICAL</code></td><td><code>logging.critical()</code></td><td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Disabling-Logging"><a href="#Disabling-Logging" class="headerlink" title="Disabling Logging"></a>Disabling Logging</h3><p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s -%(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">054</span> <span class="token operator">-</span> CRITICAL <span class="token operator">-</span> Critical error! Critical error!<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error! Error!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging-to-a-File"><a href="#Logging-to-a-File" class="headerlink" title="Logging to a File"></a>Logging to a File</h3><p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'myProgramLog.txt'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Lambda-Functions"><a href="#Lambda-Functions" class="headerlink" title="Lambda Functions"></a>Lambda Functions</h2><p>This function:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Is equivalent to the <em>lambda</em> function:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It’s not even need to bind it to a name like add before:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Like regular nested functions, lambdas also work as lexical closures:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">make_adder</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note: lambda can only evaluate an expression, like a single line of code.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Ternary-Conditional-Operator"><a href="#Ternary-Conditional-Operator" class="headerlink" title="Ternary Conditional Operator"></a>Ternary Conditional Operator</h2><p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p><pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;</code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>kid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ternary operators can be chained:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token keyword">else</span> <span class="token string">'teenager'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>teenager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The code above is equivalent to:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="args and kwargs"></a>args and kwargs</h2><p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p><ol><li><p>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&lt;name&gt;</code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</p></li><li><p>In a function call, <code>*</code> means “unpack tuple or list named <code>&lt;name&gt;</code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</p></li></ol><p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p><p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruits</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> fruit <span class="token keyword">in</span> args<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruits<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"grapes"</span><span class="token punctuation">)</span><span class="token string">"apples"</span><span class="token string">"bananas"</span><span class="token string">"grapes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruit</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0}: {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruit<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> applecolor<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> kwarg2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span><span class="token operator">*</span>data2<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token string">"python"</span><span class="token punctuation">,</span>kwarg2<span class="token operator">=</span><span class="token string">"cheatsheet"</span><span class="token punctuation">,</span><span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>pythoncheatsheet<span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># If you do not specify ** for kwargs</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">*</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Things-to-Remember-args"><a href="#Things-to-Remember-args" class="headerlink" title="Things to Remember(args)"></a>Things to Remember(args)</h3><ol><li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li><li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li><li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li><li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li></ol><h3 id="Things-to-Remember-kwargs"><a href="#Things-to-Remember-kwargs" class="headerlink" title="Things to Remember(kwargs)"></a>Things to Remember(kwargs)</h3><ol><li>Function arguments can be specified by position or by keyword.</li><li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li><li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li><li>Optional keyword arguments should always be passed by keyword instead of by position.</li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><p>While Python’s context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p><h3 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h3><p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p><p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     file_contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># the open_file object has automatically been closed.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Anything that ends execution of the block causes the context manager’s exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p><h3 id="Writing-your-own-contextmanager-using-generator-syntax"><a href="#Writing-your-own-contextmanager-using-generator-syntax" class="headerlink" title="Writing your own contextmanager using generator syntax"></a>Writing your own contextmanager using generator syntax</h3><p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> contextlib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @contextlib<span class="token punctuation">.</span>contextmanager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">context_manager</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">yield</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> context_manager<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cm<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># the following instructions are run when the 'yield' point of the context</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># manager is reached.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># 'cm' will have the value that was yielded</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Right in the middle with cm = {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span>EnterRight <span class="token keyword">in</span> the middle <span class="token keyword">with</span> cm <span class="token operator">=</span> <span class="token number">3</span>Exit<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="main-Top-level-script-environment"><a href="#main-Top-level-script-environment" class="headerlink" title="__main__ Top-level script environment"></a><code>__main__</code> Top-level script environment</h2><p><code>__main__</code> is the name of the scope in which top-level code executes.<br>A module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p><p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># execute only if run as a script</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m</p><p>For example we are developing script which is designed to be used as module, we should do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Python program to execute function directly</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># we can test it by calling the function save it as calculate.py</span><span class="token number">30</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Now if we want to use that module by importing we have to comment out our call,</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Instead we can write like this in calculate.py</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> calculate<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> calculate<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ol><li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li><li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li><li>Python files can act as either reusable modules, or as standalone programs.</li><li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p><p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p><p>This allows you to easily install Python packages. Often it’s enough to write:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and module will install itself.</p><p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setup<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token operator">=</span><span class="token string">'pythonCheatsheet'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    version<span class="token operator">=</span><span class="token string">'0.1'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'pipenv'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    license<span class="token operator">=</span><span class="token string">'MIT'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    long_description<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'README.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Find more information visit <a href="http://docs.python.org/install/index.html">http://docs.python.org/install/index.html</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Dataclasses"><a href="#Dataclasses" class="headerlink" title="Dataclasses"></a>Dataclasses</h2><p><code>Dataclasses</code> are python classes but are suited for storing data objects.<br>This module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li><p>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</p></li><li><p>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</p></li></ol><p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p><p>python 2.7</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with dataclass</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Default-values"><a href="#Default-values" class="headerlink" title="Default values"></a>Default values</h3><p>It is easy to add default values to the fields of your data class.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     count<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     price<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Product<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>namePython<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>count<span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>price<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-hints"><a href="#Type-hints" class="headerlink" title="Type hints"></a>Type hints</h3><p>It is mandatory to define the data type in dataclass. However, If you don’t want specify the datatype then, use <code>typing.Any</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">WithoutExplicitTypes</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token punctuation">:</span> Any<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    value<span class="token punctuation">:</span> Any <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h2><p>The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><ol><li><p>Install virtualenv</p><pre><code> pip install virtualenv</code></pre></li><li><p>Install virtualenvwrapper-win (Windows)</p><pre><code> pip install virtualenvwrapper-win</code></pre></li></ol><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> mkvirtualenv HelloWold</code></pre><p> Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p></li><li><p>Set Project Directory</p><p> To bind our virtualenv with our current working directory we simply enter:</p><pre><code> setprojectdir .</code></pre></li><li><p>Deactivate</p><p> To move onto something else in the command line type ‘deactivate’ to deactivate your environment.</p><pre><code> deactivate</code></pre><p> Notice how the parenthesis disappear.</p></li><li><p>Workon</p><p> Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder</p><pre><code> workon HelloWold</code></pre></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a>poetry</h3><blockquote><p><a href="https://poetry.eustace.io/">Poetry</a> is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p></blockquote><ol><li><p>Install Poetry</p><pre><code> pip install --user poetry</code></pre></li><li><p>Create a new project</p><pre><code> poetry new my-project</code></pre><p> This will create a my-project directory:</p><pre><code> my-project ├── pyproject.toml ├── README.rst ├── poetry_demo │   └── __init__.py └── tests     ├── __init__.py     └── test_poetry_demo.py</code></pre><p> The pyproject.toml file will orchestrate your project and its dependencies:</p><pre><code> [tool.poetry] name = "my-project" version = "0.1.0" description = "" authors = ["your name &lt;your@mail.com&gt;"] [tool.poetry.dependencies] python = "*" [tool.poetry.dev-dependencies] pytest = "^3.4"</code></pre></li><li><p>Packages</p><p> To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p><pre><code> [tool.poetry.dependencies] pendulum = "^1.4"</code></pre><p> Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p><pre><code> $ poetry add pendulum</code></pre><p> To install the dependencies listed in the pyproject.toml:</p><pre><code> poetry install</code></pre><p> To remove dependencies:</p><pre><code> poetry remove pendulum</code></pre></li></ol><p>For more information, check the <a href="https://poetry.eustace.io/docs/">documentation</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p><a href="https://pipenv.readthedocs.io/en/latest/">Pipenv</a> is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.</p></blockquote><ol><li><p>Install pipenv</p><pre><code> pip install pipenv</code></pre></li><li><p>Enter your Project directory and install the Packages for your project</p><pre><code> cd my_project pipenv install &lt;package&gt;</code></pre><p> Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p></li><li><p>Uninstall Packages</p><pre><code> pipenv uninstall &lt;package&gt;</code></pre></li><li><p>Activate the Virtual Environment associated with your Python project</p><pre><code> pipenv shell</code></pre></li><li><p>Exit the Virtual Environment</p><pre><code> exit</code></pre></li></ol><p>Find more information and a video in <a href="https://docs.pipenv.org/">docs.pipenv.org</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h3><p><a href="https://anaconda.org/">Anaconda</a> is another popular tool to manage python packages.</p><blockquote><p>Where packages, notebooks, projects and environments are shared.<br>Your place for free public conda package hosting.</p></blockquote><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> conda create -n HelloWorld</code></pre></li><li><p>To use the Virtual Environment, activate it by:</p><pre><code> conda activate HelloWorld</code></pre><p> Anything installed now will be specific to the project HelloWorld</p></li><li><p>Exit the Virtual Environment</p><pre><code> conda deactivate</code></pre></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
