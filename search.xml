<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/myhexo/2021/03/14/xue-xi/python/python-cheatsheet/"/>
      <url>/myhexo/2021/03/14/xue-xi/python/python-cheatsheet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="About"><a href="#About" class="headerlink" title="About "></a>About <a href="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks"><img src="https://mybinder.org/badge.svg" alt="Binder"></a></h1><p>Basic cheatsheet for Python mostly based on the book written by Al Sweigart, <a href="https://automatetheboringstuff.com/">Automate the Boring Stuff with Python</a> under the <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons license</a> and many other sources.</p><h2 id="Contribute"><a href="#Contribute" class="headerlink" title="Contribute"></a>Contribute</h2><p>All contributions are welcome:</p><ul><li>Read the issues, Fork the project and do a Pull Request.</li><li>Request a new topic creating a <code>New issue</code> with the <code>enhancement</code> tag.</li><li>Find any kind of errors in the cheat sheet and create a <code>New issue</code> with the details or fork the project and do a Pull Request.</li><li>Suggest a better or more pythonic way for existing examples.</li></ul><h2 id="Read-It"><a href="#Read-It" class="headerlink" title="Read It"></a>Read It</h2><ul><li><a href="https://www.pythoncheatsheet.org/">Website</a></li><li><a href="https://github.com/wilfredinni/python-cheatsheet">Github</a></li><li><a href="https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf">PDF</a></li><li><a href="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks">Jupyter Notebook</a></li></ul><h2 id="Python-Cheatsheet"><a href="#Python-Cheatsheet" class="headerlink" title="Python Cheatsheet"></a>Python Cheatsheet</h2><ul><li><a href="#about-">About <img src="https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks" alt="Binder"></a><ul><li><a href="#contribute">Contribute</a></li><li><a href="#read-it">Read It</a></li><li><a href="#python-cheatsheet">Python Cheatsheet</a></li><li><a href="#the-zen-of-python">The Zen of Python</a></li><li><a href="#python-basics">Python Basics</a><ul><li><a href="#math-operators">Math Operators</a></li><li><a href="#data-types">Data Types</a></li><li><a href="#string-concatenation-and-replication">String Concatenation and Replication</a></li><li><a href="#variables">Variables</a></li><li><a href="#comments">Comments</a></li><li><a href="#the-print-function">The print() Function</a></li><li><a href="#the-input-function">The input() Function</a></li><li><a href="#the-len-function">The len() Function</a></li><li><a href="#the-str-int-and-float-functions">The str(), int(), and float() Functions</a></li></ul></li><li><a href="#flow-control">Flow Control</a><ul><li><a href="#comparison-operators">Comparison Operators</a></li><li><a href="#boolean-evaluation">Boolean evaluation</a></li><li><a href="#boolean-operators">Boolean Operators</a></li><li><a href="#mixing-boolean-and-comparison-operators">Mixing Boolean and Comparison Operators</a></li><li><a href="#if-statements">if Statements</a></li><li><a href="#else-statements">else Statements</a></li><li><a href="#elif-statements">elif Statements</a></li><li><a href="#while-loop-statements">while Loop Statements</a></li><li><a href="#break-statements">break Statements</a></li><li><a href="#continue-statements">continue Statements</a></li><li><a href="#for-loops-and-the-range-function">for Loops and the range() Function</a></li><li><a href="#for-else-statement">For else statement</a></li><li><a href="#importing-modules">Importing Modules</a></li><li><a href="#ending-a-program-early-with-sysexit">Ending a Program Early with sys.exit()</a></li></ul></li><li><a href="#functions">Functions</a><ul><li><a href="#return-values-and-return-statements">Return Values and return Statements</a></li><li><a href="#the-none-value">The None Value</a></li><li><a href="#keyword-arguments-and-print">Keyword Arguments and print()</a></li><li><a href="#local-and-global-scope">Local and Global Scope</a></li><li><a href="#the-global-statement">The global Statement</a></li></ul></li><li><a href="#exception-handling">Exception Handling</a><ul><li><a href="#basic-exception-handling">Basic exception handling</a></li><li><a href="#final-code-in-exception-handling">Final code in exception handling</a></li></ul></li><li><a href="#lists">Lists</a><ul><li><a href="#getting-individual-values-in-a-list-with-indexes">Getting Individual Values in a List with Indexes</a></li><li><a href="#negative-indexes">Negative Indexes</a></li><li><a href="#getting-sublists-with-slices">Getting Sublists with Slices</a></li><li><a href="#getting-a-lists-length-with-len">Getting a List’s Length with len()</a></li><li><a href="#changing-values-in-a-list-with-indexes">Changing Values in a List with Indexes</a></li><li><a href="#list-concatenation-and-list-replication">List Concatenation and List Replication</a></li><li><a href="#removing-values-from-lists-with-del-statements">Removing Values from Lists with del Statements</a></li><li><a href="#using-for-loops-with-lists">Using for Loops with Lists</a></li><li><a href="#looping-through-multiple-lists-with-zip">Looping Through Multiple Lists with zip()</a></li><li><a href="#the-in-and-not-in-operators">The in and not in Operators</a></li><li><a href="#the-multiple-assignment-trick">The Multiple Assignment Trick</a></li><li><a href="#augmented-assignment-operators">Augmented Assignment Operators</a></li><li><a href="#finding-a-value-in-a-list-with-the-index-method">Finding a Value in a List with the index() Method</a></li><li><a href="#adding-values-to-lists-with-the-append-and-insert-methods">Adding Values to Lists with the append() and insert() Methods</a></li><li><a href="#removing-values-from-lists-with-remove">Removing Values from Lists with remove()</a></li><li><a href="#removing-values-from-lists-with-pop">Removing Values from Lists with pop()</a></li><li><a href="#sorting-the-values-in-a-list-with-the-sort-method">Sorting the Values in a List with the sort() Method</a></li><li><a href="#tuple-data-type">Tuple Data Type</a></li><li><a href="#converting-types-with-the-list-and-tuple-functions">Converting Types with the list() and tuple() Functions</a></li></ul></li><li><a href="#dictionaries-and-structuring-data">Dictionaries and Structuring Data</a><ul><li><a href="#the-keys-values-and-items-methods">The keys(), values(), and items() Methods</a></li><li><a href="#checking-whether-a-key-or-value-exists-in-a-dictionary">Checking Whether a Key or Value Exists in a Dictionary</a></li><li><a href="#the-get-method">The get() Method</a></li><li><a href="#the-setdefault-method">The setdefault() Method</a></li><li><a href="#pretty-printing">Pretty Printing</a></li><li><a href="#merge-two-dictionaries">Merge two dictionaries</a></li></ul></li><li><a href="#sets">sets</a><ul><li><a href="#initializing-a-set">Initializing a set</a></li><li><a href="#sets-unordered-collections-of-unique-elements">sets: unordered collections of unique elements</a></li><li><a href="#set-add-and-update">set add() and update()</a></li><li><a href="#set-remove-and-discard">set remove() and discard()</a></li><li><a href="#set-union">set union()</a></li><li><a href="#set-intersection">set intersection</a></li><li><a href="#set-difference">set difference</a></li><li><a href="#set-symetric_difference">set symetric_difference</a></li></ul></li><li><a href="#itertools-module">itertools Module</a><ul><li><a href="#accumulate">accumulate()</a></li><li><a href="#combinations">combinations()</a></li><li><a href="#combinations_with_replacement">combinations_with_replacement()</a></li><li><a href="#count">count()</a></li><li><a href="#cycle">cycle()</a></li><li><a href="#chain">chain()</a></li><li><a href="#compress">compress()</a></li><li><a href="#dropwhile">dropwhile()</a></li><li><a href="#filterfalse">filterfalse()</a></li><li><a href="#groupby">groupby()</a></li><li><a href="#islice">islice()</a></li><li><a href="#permutations">permutations()</a></li><li><a href="#product">product()</a></li><li><a href="#repeat">repeat()</a></li><li><a href="#starmap">starmap()</a></li><li><a href="#takewhile">takewhile()</a></li><li><a href="#tee">tee()</a></li><li><a href="#zip_longest">zip_longest()</a></li></ul></li><li><a href="#comprehensions">Comprehensions</a><ul><li><a href="#list-comprehension">List comprehension</a></li><li><a href="#set-comprehension">Set comprehension</a></li><li><a href="#dict-comprehension">Dict comprehension</a></li></ul></li><li><a href="#manipulating-strings">Manipulating Strings</a><ul><li><a href="#escape-characters">Escape Characters</a></li><li><a href="#raw-strings">Raw Strings</a></li><li><a href="#multiline-strings-with-triple-quotes">Multiline Strings with Triple Quotes</a></li><li><a href="#indexing-and-slicing-strings">Indexing and Slicing Strings</a></li><li><a href="#the-in-and-not-in-operators-with-strings">The in and not in Operators with Strings</a></li><li><a href="#the-in-and-not-in-operators-with-list">The in and not in Operators with list</a></li><li><a href="#the-upper-lower-isupper-and-islower-string-methods">The upper(), lower(), isupper(), and islower() String Methods</a></li><li><a href="#the-isx-string-methods">The isX String Methods</a></li><li><a href="#the-startswith-and-endswith-string-methods">The startswith() and endswith() String Methods</a></li><li><a href="#the-join-and-split-string-methods">The join() and split() String Methods</a></li><li><a href="#justifying-text-with-rjust-ljust-and-center">Justifying Text with rjust(), ljust(), and center()</a></li><li><a href="#removing-whitespace-with-strip-rstrip-and-lstrip">Removing Whitespace with strip(), rstrip(), and lstrip()</a></li><li><a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install">Copying and Pasting Strings with the pyperclip Module (need pip install)</a></li></ul></li><li><a href="#string-formatting">String Formatting</a><ul><li><a href="#-operator">% operator</a></li><li><a href="#string-formatting-strformat">String Formatting (str.format)</a></li><li><a href="#lazy-string-formatting">Lazy string formatting</a></li><li><a href="#formatted-string-literals-or-f-strings-python-36">Formatted String Literals or f-strings (Python 3.6+)</a></li><li><a href="#template-strings">Template Strings</a></li></ul></li><li><a href="#regular-expressions">Regular Expressions</a><ul><li><a href="#matching-regex-objects">Matching Regex Objects</a></li><li><a href="#grouping-with-parentheses">Grouping with Parentheses</a></li><li><a href="#matching-multiple-groups-with-the-pipe">Matching Multiple Groups with the Pipe</a></li><li><a href="#optional-matching-with-the-question-mark">Optional Matching with the Question Mark</a></li><li><a href="#matching-zero-or-more-with-the-star">Matching Zero or More with the Star</a></li><li><a href="#matching-one-or-more-with-the-plus">Matching One or More with the Plus</a></li><li><a href="#matching-specific-repetitions-with-curly-brackets">Matching Specific Repetitions with Curly Brackets</a></li><li><a href="#greedy-and-nongreedy-matching">Greedy and Nongreedy Matching</a></li><li><a href="#the-findall-method">The findall() Method</a></li><li><a href="#making-your-own-character-classes">Making Your Own Character Classes</a></li><li><a href="#the-caret-and-dollar-sign-characters">The Caret and Dollar Sign Characters</a></li><li><a href="#the-wildcard-character">The Wildcard Character</a></li><li><a href="#matching-everything-with-dot-star">Matching Everything with Dot-Star</a></li><li><a href="#matching-newlines-with-the-dot-character">Matching Newlines with the Dot Character</a></li><li><a href="#review-of-regex-symbols">Review of Regex Symbols</a></li><li><a href="#case-insensitive-matching">Case-Insensitive Matching</a></li><li><a href="#substituting-strings-with-the-sub-method">Substituting Strings with the sub() Method</a></li><li><a href="#managing-complex-regexes">Managing Complex Regexes</a></li></ul></li><li><a href="#handling-file-and-directory-paths">Handling File and Directory Paths</a><ul><li><a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux">Backslash on Windows and Forward Slash on OS X and Linux</a></li><li><a href="#the-current-working-directory">The Current Working Directory</a></li><li><a href="#creating-new-folders">Creating New Folders</a></li><li><a href="#absolute-vs-relative-paths">Absolute vs. Relative Paths</a></li><li><a href="#handling-absolute-and-relative-paths">Handling Absolute and Relative Paths</a></li><li><a href="#checking-path-validity">Checking Path Validity</a></li><li><a href="#finding-file-sizes-and-folder-contents">Finding File Sizes and Folder Contents</a></li><li><a href="#copying-files-and-folders">Copying Files and Folders</a></li><li><a href="#moving-and-renaming-files-and-folders">Moving and Renaming Files and Folders</a></li><li><a href="#permanently-deleting-files-and-folders">Permanently Deleting Files and Folders</a></li><li><a href="#safe-deletes-with-the-send2trash-module">Safe Deletes with the send2trash Module</a></li><li><a href="#walking-a-directory-tree">Walking a Directory Tree</a></li></ul></li><li><a href="#reading-and-writing-files">Reading and Writing Files</a><ul><li><a href="#the-file-readingwriting-process">The File Reading/Writing Process</a></li><li><a href="#opening-and-reading-files-with-the-open-function">Opening and reading files with the open() function</a></li><li><a href="#writing-to-files">Writing to Files</a></li><li><a href="#saving-variables-with-the-shelve-module">Saving Variables with the shelve Module</a></li><li><a href="#saving-variables-with-the-pprintpformat-function">Saving Variables with the pprint.pformat() Function</a></li><li><a href="#reading-zip-files">Reading ZIP Files</a></li><li><a href="#extracting-from-zip-files">Extracting from ZIP Files</a></li><li><a href="#creating-and-adding-to-zip-files">Creating and Adding to ZIP Files</a></li></ul></li><li><a href="#json-yaml-and-configuration-files">JSON, YAML and configuration files</a><ul><li><a href="#json">JSON</a></li><li><a href="#yaml">YAML</a></li><li><a href="#anyconfig">Anyconfig</a></li></ul></li><li><a href="#debugging">Debugging</a><ul><li><a href="#raising-exceptions">Raising Exceptions</a></li><li><a href="#getting-the-traceback-as-a-string">Getting the Traceback as a String</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#logging">Logging</a></li><li><a href="#logging-levels">Logging Levels</a></li><li><a href="#disabling-logging">Disabling Logging</a></li><li><a href="#logging-to-a-file">Logging to a File</a></li></ul></li><li><a href="#lambda-functions">Lambda Functions</a></li><li><a href="#ternary-conditional-operator">Ternary Conditional Operator</a></li><li><a href="#args-and-kwargs">args and kwargs</a><ul><li><a href="#things-to-rememberargs">Things to Remember(args)</a></li><li><a href="#things-to-rememberkwargs">Things to Remember(kwargs)</a></li></ul></li><li><a href="#context-manager">Context Manager</a><ul><li><a href="#with-statement">with statement</a></li><li><a href="#writing-your-own-contextmanager-using-generator-syntax">Writing your own contextmanager using generator syntax</a></li></ul></li><li><a href="#__main__-top-level-script-environment"><code>__main__</code> Top-level script environment</a><ul><li><a href="#advantages">Advantages</a></li></ul></li><li><a href="#setuppy">setup.py</a></li><li><a href="#dataclasses">Dataclasses</a><ul><li><a href="#features">Features</a></li><li><a href="#default-values">Default values</a></li><li><a href="#type-hints">Type hints</a></li></ul></li><li><a href="#virtual-environment">Virtual Environment</a><ul><li><a href="#virtualenv">virtualenv</a></li><li><a href="#poetry">poetry</a></li><li><a href="#pipenv">pipenv</a></li><li><a href="#anaconda">anaconda</a></li></ul></li></ul></li></ul><h2 id="The-Zen-of-Python"><a href="#The-Zen-of-Python" class="headerlink" title="The Zen of Python"></a>The Zen of Python</h2><p>From the <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>:</p><blockquote><p>Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> thisThe Zen of Python<span class="token punctuation">,</span> by Tim PetersBeautiful <span class="token keyword">is</span> better than ugly<span class="token punctuation">.</span>Explicit <span class="token keyword">is</span> better than implicit<span class="token punctuation">.</span>Simple <span class="token keyword">is</span> better than <span class="token builtin">complex</span><span class="token punctuation">.</span>Complex <span class="token keyword">is</span> better than complicated<span class="token punctuation">.</span>Flat <span class="token keyword">is</span> better than nested<span class="token punctuation">.</span>Sparse <span class="token keyword">is</span> better than dense<span class="token punctuation">.</span>Readability counts<span class="token punctuation">.</span>Special cases aren't special enough to <span class="token keyword">break</span> the rules<span class="token punctuation">.</span>Although practicality beats purity<span class="token punctuation">.</span>Errors should never <span class="token keyword">pass</span> silently<span class="token punctuation">.</span>Unless explicitly silenced<span class="token punctuation">.</span>In the face of ambiguity<span class="token punctuation">,</span> refuse the temptation to guess<span class="token punctuation">.</span>There should be one<span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">and</span> preferably only one <span class="token operator">-</span><span class="token operator">-</span>obvious way to do it<span class="token punctuation">.</span>Although that way may <span class="token keyword">not</span> be obvious at first unless you're Dutch<span class="token punctuation">.</span>Now <span class="token keyword">is</span> better than never<span class="token punctuation">.</span>Although never <span class="token keyword">is</span> often better than <span class="token operator">*</span>right<span class="token operator">*</span> now<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> hard to explain<span class="token punctuation">,</span> it's a bad idea<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> easy to explain<span class="token punctuation">,</span> it may be a good idea<span class="token punctuation">.</span>Namespaces are one honking great idea <span class="token operator">-</span><span class="token operator">-</span> let's do more of those!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Python-Basics"><a href="#Python-Basics" class="headerlink" title="Python Basics"></a>Python Basics</h2><h3 id="Math-Operators"><a href="#Math-Operators" class="headerlink" title="Math Operators"></a>Math Operators</h3><p>From <strong>Highest</strong> to <strong>Lowest</strong> precedence:</p><table><thead><tr><th>Operators</th><th>Operation</th><th>Example</th></tr></thead><tbody><tr><td>**</td><td>Exponent</td><td><code>2 ** 3 = 8</code></td></tr><tr><td>%</td><td>Modulus/Remainder</td><td><code>22 % 8 = 6</code></td></tr><tr><td>//</td><td>Integer division</td><td><code>22 // 8 = 2</code></td></tr><tr><td>/</td><td>Division</td><td><code>22 / 8 = 2.75</code></td></tr><tr><td>*</td><td>Multiplication</td><td><code>3 * 3 = 9</code></td></tr><tr><td>-</td><td>Subtraction</td><td><code>5 - 2 = 3</code></td></tr><tr><td>+</td><td>Addition</td><td><code>2 + 2 = 4</code></td></tr></tbody></table><p>Examples of expressions in the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">//</span> <span class="token number">7</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">16.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><table><thead><tr><th>Data Type</th><th>Examples</th></tr></thead><tbody><tr><td>Integers</td><td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td></tr><tr><td>Floating-point numbers</td><td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td></tr><tr><td>Strings</td><td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="String-Concatenation-and-Replication"><a href="#String-Concatenation-and-Replication" class="headerlink" title="String Concatenation and Replication"></a>String Concatenation and Replication</h3><p>String concatenation:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token string">'Bob'</span><span class="token string">'AliceBob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: Avoid <code>+</code> operator for string concatenation. Prefer string formatting.</p><p>String Replication:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'AliceAliceAliceAliceAlice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>You can name a variable anything as long as it obeys the following rules:</p><ol><li>It can be only one word.</li><li>It can use only letters, numbers, and the underscore (<code>_</code>) character.</li><li>It can’t begin with a number.</li><li>Variable name starting with an underscore (<code>_</code>) are considered as “unuseful`.</li></ol><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_spam</code> should not be used again in the code.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>Inline comment:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># This is a comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Multiline comment:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># This is a# multiline comment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Code with a comment:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Please note the two spaces in front of the comment.</p><p>Function docstring:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This is a function docstring    You can also use:    ''' Function Docstring '''    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-print-Function"><a href="#The-print-Function" class="headerlink" title="The print() Function"></a>The print() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span>Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>Hello world! <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-input-Function"><a href="#The-input-Function" class="headerlink" title="The input() Function"></a>The input() Function</h3><p>Example Code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span>   <span class="token comment"># ask for their name</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> myName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'It is good to meet you, {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">)</span>What <span class="token keyword">is</span> your name?AlIt <span class="token keyword">is</span> good to meet you<span class="token punctuation">,</span> Al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-len-Function"><a href="#The-len-Function" class="headerlink" title="The len() Function"></a>The len() Function</h3><p>Evaluates to the integer value of the number of characters in a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: test of emptiness of strings, lists, dictionary, etc, should <strong>not</strong> use len, but prefer direct<br>boolean evaluation.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the list is not empty!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-str-int-and-float-Functions"><a href="#The-str-int-and-float-Functions" class="headerlink" title="The str(), int(), and float() Functions"></a>The str(), int(), and float() Functions</h3><p>Integer to String or Float:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token string">'29'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am {} years old.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>I am <span class="token number">29</span> years old<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token string">'-3.14'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Float to Integer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h2><h3 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a>Comparison Operators</h3><table><thead><tr><th>Operator</th><th>Meaning</th></tr></thead><tbody><tr><td><code>==</code></td><td>Equal to</td></tr><tr><td><code>!=</code></td><td>Not equal to</td></tr><tr><td><code>&lt;</code></td><td>Less than</td></tr><tr><td><code>&gt;</code></td><td>Greater Than</td></tr><tr><td><code>&lt;=</code></td><td>Less than or Equal to</td></tr><tr><td><code>&gt;=</code></td><td>Greater than or Equal to</td></tr></tbody></table><p>These operators evaluate to True or False depending on the values you give them.</p><p>Examples:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'Hello'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'dog'</span> <span class="token operator">!=</span> <span class="token string">'cat'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token string">'42'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Boolean-evaluation"><a href="#Boolean-evaluation" class="headerlink" title="Boolean evaluation"></a>Boolean evaluation</h3><p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,<br>or use implicit boolean evaluation.</p><p>NO (even if they are valid Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YES (even if they are valid Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>These statements are equivalent:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And these as well:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if not a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Boolean-Operators"><a href="#Boolean-Operators" class="headerlink" title="Boolean Operators"></a>Boolean Operators</h3><p>There are three Boolean operators: and, or, and not.</p><p>The <em>and</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>True and True</code></td><td><code>True</code></td></tr><tr><td><code>True and False</code></td><td><code>False</code></td></tr><tr><td><code>False and True</code></td><td><code>False</code></td></tr><tr><td><code>False and False</code></td><td><code>False</code></td></tr></tbody></table><p>The <em>or</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>True or True</code></td><td><code>True</code></td></tr><tr><td><code>True or False</code></td><td><code>True</code></td></tr><tr><td><code>False or True</code></td><td><code>True</code></td></tr><tr><td><code>False or False</code></td><td><code>False</code></td></tr></tbody></table><p>The <em>not</em> Operator’s <em>Truth</em> Table:</p><table><thead><tr><th>Expression</th><th>Evaluates to</th></tr></thead><tbody><tr><td><code>not True</code></td><td><code>False</code></td></tr><tr><td><code>not False</code></td><td><code>True</code></td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Mixing-Boolean-and-Comparison-Operators"><a href="#Mixing-Boolean-and-Comparison-Operators" class="headerlink" title="Mixing Boolean and Comparison Operators"></a>Mixing Boolean and Comparison Operators</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="if-Statements"><a href="#if-Statements" class="headerlink" title="if Statements"></a>if Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="else-Statements"><a href="#else-Statements" class="headerlink" title="else Statements"></a>else Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="elif-Statements"><a href="#elif-Statements" class="headerlink" title="elif Statements"></a>elif Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are neither Alice nor a little kid.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="while-Loop-Statements"><a href="#while-Loop-Statements" class="headerlink" title="while Loop Statements"></a>while Loop Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> spam <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span>    spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="break-Statements"><a href="#break-Statements" class="headerlink" title="break Statements"></a>break Statements</h3><p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please type your name.'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'your name'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thank you!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="continue-Statements"><a href="#continue-Statements" class="headerlink" title="continue Statements"></a>continue Statements</h3><p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Who are you?'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">'Joe'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Joe. What is the password? (It is a fish.)'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'swordfish'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Access granted.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="for-Loops-and-the-range-Function"><a href="#for-Loops-and-the-range-Function" class="headerlink" title="for Loops and the range() Function"></a>for Loops and the range() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Jimmy Five Times ({})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>My name <span class="token keyword">is</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">4</span><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For-else-statement"><a href="#For-else-statement" class="headerlink" title="For else statement"></a>For else statement</h3><p>This allows to specify a statement to execute in case of the full loop has been executed. Only<br>useful when a <code>break</code> condition can occur in the loop:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"only executed when no item of the list is equal to 3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Importing-Modules"><a href="#Importing-Modules" class="headerlink" title="Importing Modules"></a>Importing Modules</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os<span class="token punctuation">,</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Ending-a-Program-Early-with-sys-exit"><a href="#Ending-a-Program-Early-with-sys-exit" class="headerlink" title="Ending a Program Early with sys.exit()"></a>Ending a Program Early with sys.exit()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Type exit to exit.'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You typed {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Hello AliceHello Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Return-Values-and-return-Statements"><a href="#Return-Values-and-return-Statements" class="headerlink" title="Return Values and return Statements"></a>Return Values and return Statements</h3><p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p><ul><li><p>The return keyword.</p></li><li><p>The value or expression that the function should return.</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>answerNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> answerNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is certain'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is decidedly so'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Yes'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Reply hazy try again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Ask again later'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Concentrate and ask again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'My reply is no'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Outlook not so good'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Very doubtful'</span>r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fortune <span class="token operator">=</span> getAnswer<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fortune<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-None-Value"><a href="#The-None-Value" class="headerlink" title="The None Value"></a>The None Value</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span>Hello!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Keyword-Arguments-and-print"><a href="#Keyword-Arguments-and-print" class="headerlink" title="Keyword Arguments and print()"></a>Keyword Arguments and print()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span>HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">)</span>cats dogs mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>cats<span class="token punctuation">,</span>dogs<span class="token punctuation">,</span>mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Local-and-Global-Scope"><a href="#Local-and-Global-Scope" class="headerlink" title="Local and Global Scope"></a>Local and Global Scope</h3><ul><li><p>Code in the global scope cannot use any local variables.</p></li><li><p>However, a local scope can access global variables.</p></li><li><p>Code in a function’s local scope cannot use variables in any other local scope.</p></li><li><p>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-global-Statement"><a href="#The-global-Statement" class="headerlink" title="The global Statement"></a>The global Statement</h3><p>If you need to modify a global variable from within a function, use the global statement:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">global</span> eggs<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     eggs <span class="token operator">=</span> <span class="token string">'spam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token string">'global'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There are four rules to tell whether a variable is in a local scope or global scope:</p><ol><li><p>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</p></li><li><p>If there is a global statement for that variable in a function, it is a global variable.</p></li><li><p>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</p></li><li><p>But if the variable is not used in an assignment statement, it is a global variable.</p></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><h3 id="Basic-exception-handling"><a href="#Basic-exception-handling" class="headerlink" title="Basic exception handling"></a>Basic exception handling</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">21.0</span><span class="token number">3.5</span>Error<span class="token punctuation">:</span> Invalid argument<span class="token punctuation">:</span> division by zero<span class="token boolean">None</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Final-code-in-exception-handling"><a href="#Final-code-in-exception-handling" class="headerlink" title="Final code in exception handling"></a>Final code in exception handling</h3><p>Code inside the <code>finally</code> section is always executed, no matter if an exception has been raised or<br>not, and even if an exception is not caught.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- division finished --"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">21.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Error<span class="token punctuation">:</span> Invalid Argument division by zero<span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-Individual-Values-in-a-List-with-Indexes"><a href="#Getting-Individual-Values-in-a-List-with-Indexes" class="headerlink" title="Getting Individual Values in a List with Indexes"></a>Getting Individual Values in a List with Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'cat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'rat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Negative-Indexes"><a href="#Negative-Indexes" class="headerlink" title="Negative Indexes"></a>Negative Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The {} is afraid of the {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'The elephant is afraid of the bat.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-Sublists-with-Slices"><a href="#Getting-Sublists-with-Slices" class="headerlink" title="Getting Sublists with Slices"></a>Getting Sublists with Slices</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing the complete list will perform a copy:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2 <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-a-List’s-Length-with-len"><a href="#Getting-a-List’s-Length-with-len" class="headerlink" title="Getting a List’s Length with len()"></a>Getting a List’s Length with len()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Changing-Values-in-a-List-with-Indexes"><a href="#Changing-Values-in-a-List-with-Indexes" class="headerlink" title="Changing Values in a List with Indexes"></a>Changing Values in a List with Indexes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aardvark'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12345</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="List-Concatenation-and-List-Replication"><a href="#List-Concatenation-and-List-Replication" class="headerlink" title="List Concatenation and List Replication"></a>List Concatenation and List Replication</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-del-Statements"><a href="#Removing-Values-from-Lists-with-del-Statements" class="headerlink" title="Removing Values from Lists with del Statements"></a>Removing Values from Lists with del Statements</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Using-for-Loops-with-Lists"><a href="#Using-for-Loops-with-Lists" class="headerlink" title="Using for Loops with Lists"></a>Using for Loops with Lists</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> supply <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Index {} in supplies is: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> supply<span class="token punctuation">)</span><span class="token punctuation">)</span>Index <span class="token number">0</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> pensIndex <span class="token number">1</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> staplersIndex <span class="token number">2</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> flame<span class="token operator">-</span>throwersIndex <span class="token number">3</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> binders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Looping-Through-Multiple-Lists-with-zip"><a href="#Looping-Through-Multiple-Lists-with-zip" class="headerlink" title="Looping Through Multiple Lists with zip()"></a>Looping Through Multiple Lists with zip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Elizabeth'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} years old'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>Pete <span class="token keyword">is</span> <span class="token number">6</span> years oldJohn <span class="token keyword">is</span> <span class="token number">23</span> years oldElizabeth <span class="token keyword">is</span> <span class="token number">44</span> years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators"><a href="#The-in-and-not-in-Operators" class="headerlink" title="The in and not in Operators"></a>The in and not in Operators</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Multiple-Assignment-Trick"><a href="#The-Multiple-Assignment-Trick" class="headerlink" title="The Multiple Assignment Trick"></a>The Multiple Assignment Trick</h3><p>The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> color <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> disposition <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You could type this line of code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> disposition <span class="token operator">=</span> cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The multiple assignment trick can also be used to swap the values in two variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token string">'Alice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Augmented-Assignment-Operators"><a href="#Augmented-Assignment-Operators" class="headerlink" title="Augmented Assignment Operators"></a>Augmented Assignment Operators</h3><table><thead><tr><th>Operator</th><th>Equivalent</th></tr></thead><tbody><tr><td><code>spam += 1</code></td><td><code>spam = spam + 1</code></td></tr><tr><td><code>spam -= 1</code></td><td><code>spam = spam - 1</code></td></tr><tr><td><code>spam *= 1</code></td><td><code>spam = spam * 1</code></td></tr><tr><td><code>spam /= 1</code></td><td><code>spam = spam / 1</code></td></tr><tr><td><code>spam %= 1</code></td><td><code>spam = spam % 1</code></td></tr></tbody></table><p>Examples:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">+=</span> <span class="token string">' world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">*=</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon<span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Finding-a-Value-in-a-List-with-the-index-Method"><a href="#Finding-a-Value-in-a-List-with-the-index-Method" class="headerlink" title="Finding a Value in a List with the index() Method"></a>Finding a Value in a List with the index() Method</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Fat-tail'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Pooka'</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Adding-Values-to-Lists-with-the-append-and-insert-Methods"><a href="#Adding-Values-to-Lists-with-the-append-and-insert-Methods" class="headerlink" title="Adding Values to Lists with the append() and insert() Methods"></a>Adding Values to Lists with the append() and insert() Methods</h3><p><strong>append()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'moose'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insert()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-remove"><a href="#Removing-Values-from-Lists-with-remove" class="headerlink" title="Removing Values from Lists with remove()"></a>Removing Values from Lists with remove()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bat'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If the value appears multiple times in the list, only the first instance of the value will be removed.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Values-from-Lists-with-pop"><a href="#Removing-Values-from-Lists-with-pop" class="headerlink" title="Removing Values from Lists with pop()"></a>Removing Values from Lists with pop()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'elephant'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'cat'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Sorting-the-Values-in-a-List-with-the-sort-Method"><a href="#Sorting-the-Values-in-a-List-with-the-sort-Method" class="headerlink" title="Sorting the Values in a List with the sort() Method"></a>Sorting the Values in a List with the sort() Method</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'elephants'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'ants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can use the built-in function <code>sorted</code> to return a new list:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Tuple-Data-Type"><a href="#Tuple-Data-Type" class="headerlink" title="Tuple Data Type"></a>Tuple Data Type</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The main way that tuples are different from lists is that tuples, like strings, are immutable.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Converting-Types-with-the-list-and-tuple-Functions"><a href="#Converting-Types-with-the-list-and-tuple-Functions" class="headerlink" title="Converting Types with the list() and tuple() Functions"></a>Converting Types with the list() and tuple() Functions</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Dictionaries-and-Structuring-Data"><a href="#Dictionaries-and-Structuring-Data" class="headerlink" title="Dictionaries and Structuring Data"></a>Dictionaries and Structuring Data</h2><p>Example Dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myCat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'gray'</span><span class="token punctuation">,</span> <span class="token string">'disposition'</span><span class="token punctuation">:</span> <span class="token string">'loud'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-keys-values-and-items-Methods"><a href="#The-keys-values-and-items-Methods" class="headerlink" title="The keys(), values(), and items() Methods"></a>The keys(), values(), and items() Methods</h3><p>values():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>red<span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keys():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>colorage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>items():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Key: {} Value: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Key<span class="token punctuation">:</span> age Value<span class="token punctuation">:</span> <span class="token number">42</span>Key<span class="token punctuation">:</span> color Value<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Checking-Whether-a-Key-or-Value-Exists-in-a-Dictionary"><a href="#Checking-Whether-a-Key-or-Value-Exists-in-a-Dictionary" class="headerlink" title="Checking Whether a Key or Value Exists in a Dictionary"></a>Checking Whether a Key or Value Exists in a Dictionary</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'name'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Zophie'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can omit the call to keys() when checking for a key</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-get-Method"><a href="#The-get-Method" class="headerlink" title="The get() Method"></a>The get() Method</h3><p>Get has two parameters: key and default value if the key did not exist</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> picnic_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'cups'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} cups.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cups'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 2 cups.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} eggs.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eggs'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 0 eggs.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-setdefault-Method"><a href="#The-setdefault-Method" class="headerlink" title="The setdefault() Method"></a>The setdefault() Method</h3><p>Let’s consider this code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token punctuation">:</span>    spam<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>setdefault</code> we could write the same code more succinctly:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Pretty-Printing"><a href="#Pretty-Printing" class="headerlink" title="Pretty Printing"></a>Pretty Printing</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> message <span class="token operator">=</span> 'It was a bright cold day <span class="token keyword">in</span> April<span class="token punctuation">,</span> <span class="token keyword">and</span> the clocks were striking<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thirteen<span class="token punctuation">.</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> character <span class="token keyword">in</span> message<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>character<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Merge-two-dictionaries"><a href="#Merge-two-dictionaries" class="headerlink" title="Merge two dictionaries"></a>Merge two dictionaries</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in Python 3.5+:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">**</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment"># in Python 2.7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h2><p>From the Python 3 <a href="https://docs.python.org/3/tutorial/datastructures.html">documentation</a></p><blockquote><p>A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p></blockquote><h3 id="Initializing-a-set"><a href="#Initializing-a-set" class="headerlink" title="Initializing a set"></a>Initializing a set</h3><p>There are two ways to create sets: using curly braces <code>{}</code> and the built-in function <code>set()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>When creating an empty set, be sure to not use the curly braces <code>{}</code> or you will get an empty dictionary instead.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sets-unordered-collections-of-unique-elements"><a href="#sets-unordered-collections-of-unique-elements" class="headerlink" title="sets: unordered collections of unique elements"></a>sets: unordered collections of unique elements</h3><p>A set automatically remove all the duplicate values.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And as an unordered data type, they can’t be indexed.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-add-and-update"><a href="#set-add-and-update" class="headerlink" title="set add() and update()"></a>set add() and update()</h3><p>Using the <code>add()</code> method we can add a single element to the set.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And with <code>update()</code>, multiple ones .</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>  <span class="token comment"># remember, sets automatically remove duplicates</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-remove-and-discard"><a href="#set-remove-and-discard" class="headerlink" title="set remove() and discard()"></a>set remove() and discard()</h3><p>Both methods will remove an element from the set, but <code>remove()</code> will raise a <code>key error</code> if the value doesn’t exist.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>discard()</code> won’t raise any errors.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-union"><a href="#set-union" class="headerlink" title="set union()"></a>set union()</h3><p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets provided.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 | s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h3><p><code>intersection</code> or <code>&amp;</code> will return a set containing only the elements that are common to all of them.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>  <span class="token comment"># or 's1 &amp; s2 &amp; s3'</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set difference"></a>set difference</h3><p><code>difference</code> or <code>-</code> will return only the elements that are unique to the first set (invoked set).</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 - s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment"># or 's2 - s1'</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-symetric-difference"><a href="#set-symetric-difference" class="headerlink" title="set symetric_difference"></a>set symetric_difference</h3><p><code>symetric_difference</code> or <code>^</code> will return all the elements that are not common between them.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 ^ s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="itertools-Module"><a href="#itertools-Module" class="headerlink" title="itertools Module"></a>itertools Module</h2><p>The <em>itertools</em> module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like <a href="#lists">lists</a> or <a href="#dictionaries-and-structuring-data">dictionaries</a>).</p><p>From the official <a href="https://docs.python.org/3/library/itertools.html">Python 3.x documentation</a>:</p><blockquote><p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p></blockquote><p>The <em>itertools</em> module comes in the standard library and must be imported.</p><p>The <a href="https://docs.python.org/3/library/operator.html">operator</a> module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h3><p>Makes an iterator that returns the results of a function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>iterable<span class="token punctuation">[</span><span class="token punctuation">,</span> func<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">6</span><span class="token number">24</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The operator.mul takes two numbers and multiplies them:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">24</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Passing a function is optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">7</span><span class="token number">13</span><span class="token number">17</span><span class="token number">22</span><span class="token number">31</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If no function is designated the items will be summed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">5</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token number">13</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token number">17</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token number">22</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token number">31</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><p>Just like combinations(), but allows individual elements to be repeated more than once.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'circle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>Makes an iterator that returns evenly spaced values starting with number start.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token number">10</span><span class="token number">13</span><span class="token number">16</span><span class="token number">19</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle()"></a>cycle()</h3><p>This function cycles through an iterator endlessly.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'violet'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>redorangeyellowgreenbluevioletredorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When reached the end of the iterable it start over again from the beginning.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="chain"><a href="#chain" class="headerlink" title="chain()"></a>chain()</h3><p>Take a series of iterables and return them as one long iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenbluecircletrianglesquarepentagon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="compress"><a href="#compress" class="headerlink" title="compress()"></a>compress()</h3><p>Filters one iterable with another.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>circlesquare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile()"></a>dropwhile()</h3><p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse()"></a>filterfalse()</h3><p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h3><p>Simply put, this function groups things together.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'faction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="islice"><a href="#islice" class="headerlink" title="islice()"></a>islice()</h3><p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><p>Creates the cartesian products from a series of iterables.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>This function will repeat an object over and over again. Unless, there is a times argument.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>spamspamspam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap()"></a>starmap()</h3><p>Makes an iterator that computes the function using arguments obtained from the iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">12</span><span class="token number">32</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile()"></a>takewhile()</h3><p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="tee"><a href="#tee" class="headerlink" title="tee()"></a>tee()</h3><p>Return n independent iterators from a single iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest()"></a>zip_longest()</h3><p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Comprehensions"><a href="#Comprehensions" class="headerlink" title="Comprehensions"></a>Comprehensions</h2><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set-comprehension"><a href="#Set-comprehension" class="headerlink" title="Set comprehension"></a>Set comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"ABC"</span><span class="token punctuation">,</span> <span class="token string">"DEF"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Dict-comprehension"><a href="#Dict-comprehension" class="headerlink" title="Dict comprehension"></a>Dict comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'Pooka'</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A List comprehension can be generated from a dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Oooka'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'NAME:POOKA'</span><span class="token punctuation">,</span> <span class="token string">'FIRST_NAME:OOOKA'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Manipulating-Strings"><a href="#Manipulating-Strings" class="headerlink" title="Manipulating Strings"></a>Manipulating Strings</h2><h3 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h3><table><thead><tr><th>Escape character</th><th>Prints as</th></tr></thead><tbody><tr><td><code>\'</code></td><td>Single quote</td></tr><tr><td><code>\"</code></td><td>Double quote</td></tr><tr><td><code>\t</code></td><td>Tab</td></tr><tr><td><code>\n</code></td><td>Newline (line break)</td></tr><tr><td><code>\\</code></td><td>Backslash</td></tr></tbody></table><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello there!\nHow are you?\nI\'m doing fine."</span><span class="token punctuation">)</span>Hello there!How are you?I'm doing fine<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Raw-Strings"><a href="#Raw-Strings" class="headerlink" title="Raw Strings"></a>Raw Strings</h3><p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'That is Carol\'s cat.'</span><span class="token punctuation">)</span>That <span class="token keyword">is</span> Carol\'s cat<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: mostly used for regular expression definition (see <code>re</code> package)</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Multiline-Strings-with-Triple-Quotes"><a href="#Multiline-Strings-with-Triple-Quotes" class="headerlink" title="Multiline Strings with Triple Quotes"></a>Multiline Strings with Triple Quotes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt; Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,&gt;&gt;&gt; Bob'''</span><span class="token punctuation">)</span>Dear Alice<span class="token punctuation">,</span>Eve's cat has been arrested <span class="token keyword">for</span> catnapping<span class="token punctuation">,</span> cat burglary<span class="token punctuation">,</span> <span class="token keyword">and</span> extortion<span class="token punctuation">.</span>Sincerely<span class="token punctuation">,</span>Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> textwrap <span class="token keyword">import</span> dedent<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&gt;&gt;&gt;         Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt;         Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt;         Sincerely,&gt;&gt;&gt;         Bob&gt;&gt;&gt;         '''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This generates the same string than before.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Indexing-and-Slicing-Strings"><a href="#Indexing-and-Slicing-Strings" class="headerlink" title="Indexing and Slicing Strings"></a>Indexing and Slicing Strings</h3><pre><code>H   e   l   l   o       w   o   r   l   d    !0   1   2   3   4   5   6   7   8   9   10   11</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'H'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token string">'world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'Hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!dlrow olleH'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-in-and-not-in-Operators-with-Strings"><a href="#The-in-and-not-in-Operators-with-Strings" class="headerlink" title="The in and not in Operators with Strings"></a>The in and not in Operators with Strings</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">''</span> <span class="token keyword">in</span> <span class="token string">'spam'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cats'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'cats and dogs'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators-with-list"><a href="#The-in-and-not-in-Operators-with-list" class="headerlink" title="The in and not in Operators with list"></a>The in and not in Operators with list</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">in</span> a<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">in</span> a<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-upper-lower-isupper-and-islower-String-Methods"><a href="#The-upper-lower-isupper-and-islower-String-Methods" class="headerlink" title="The upper(), lower(), isupper(), and islower() String Methods"></a>The upper(), lower(), isupper(), and islower() String Methods</h3><p><code>upper()</code> and <code>lower()</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'HELLO WORLD!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>isupper() and islower():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-isX-String-Methods"><a href="#The-isX-String-Methods" class="headerlink" title="The isX String Methods"></a>The isX String Methods</h3><ul><li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li><li><strong>isalnum()</strong> returns True if the string consists only of letters and numbers and is not blank.</li><li><strong>isdecimal()</strong> returns True if the string consists only of numeric characters and is not blank.</li><li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li><li><strong>istitle()</strong> returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.</li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-startswith-and-endswith-String-Methods"><a href="#The-startswith-and-endswith-String-Methods" class="headerlink" title="The startswith() and endswith() String Methods"></a>The startswith() and endswith() String Methods</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-join-and-split-String-Methods"><a href="#The-join-and-split-String-Methods" class="headerlink" title="The join() and split() String Methods"></a>The join() and split() String Methods</h3><p>join():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'rats'</span><span class="token punctuation">,</span> <span class="token string">'bats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'cats, rats, bats'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'My name is Simon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'MyABCnameABCisABCSimon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>split():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'MyABCnameABCisABCSimon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My na'</span><span class="token punctuation">,</span> <span class="token string">'e is Si'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Justifying-Text-with-rjust-ljust-and-center"><a href="#Justifying-Text-with-rjust-ljust-and-center" class="headerlink" title="Justifying Text with rjust(), ljust(), and center()"></a>Justifying Text with rjust(), ljust(), and center()</h3><p>rjust() and ljust():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'     Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'               Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello World'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'         Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'Hello     '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token string">'***************Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token string">'Hello---------------'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>center():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'       Hello       '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token string">'=======Hello========'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Removing-Whitespace-with-strip-rstrip-and-lstrip"><a href="#Removing-Whitespace-with-strip-rstrip-and-lstrip" class="headerlink" title="Removing Whitespace with strip(), rstrip(), and lstrip()"></a>Removing Whitespace with strip(), rstrip(), and lstrip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'    Hello World     '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'    Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'SpamSpamBaconSpamEggsSpamSpam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'ampS'</span><span class="token punctuation">)</span><span class="token string">'BaconSpamEggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install"><a href="#Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install" class="headerlink" title="Copying and Pasting Strings with the pyperclip Module (need pip install)"></a>Copying and Pasting Strings with the pyperclip Module (need pip install)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pyperclip<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>paste<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a>String Formatting</h2><h3 id="operator"><a href="#operator" class="headerlink" title="% operator"></a>% operator</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Pete'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token string">"Hello Pete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I have %x apples'</span> <span class="token operator">%</span> num<span class="token string">"I have 5 apples"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note: For new code, using <a href="#string-formatting-strformat">str.format</a> or <a href="#formatted-string-literals-or-f-strings-python-36">f-strings</a> (Python 3.6+) is strongly recommended over the <code>%</code> operator.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="String-Formatting-str-format"><a href="#String-Formatting-str-format" class="headerlink" title="String Formatting (str.format)"></a>String Formatting (str.format)</h3><p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'John'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">20</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {}, my age is {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {0}, my age is {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The official <a href="https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p><blockquote><p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p></blockquote><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Lazy-string-formatting"><a href="#Lazy-string-formatting" class="headerlink" title="Lazy string formatting"></a>Lazy string formatting</h3><p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,<br>the most common being logging:</p><p>Prefer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"alice"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Over:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Formatted-String-Literals-or-f-strings-Python-3-6"><a href="#Formatted-String-Literals-or-f-strings-Python-3-6" class="headerlink" title="Formatted String Literals or f-strings (Python 3.6+)"></a>Formatted String Literals or f-strings (Python 3.6+)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!'</span></span>'Hello Elizabeth!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It is even possible to do inline arithmetic with it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Five plus ten is </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span><span class="token string">'Five plus ten is 15 and not 30.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">'Hey $name!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token string">'Hey Elizabeth!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><ol><li>Import the regex module with <code>import re</code>.</li><li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li><li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li><li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li></ol><p>All the regex functions in Python are in the re module:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Regex-Objects"><a href="#Matching-Regex-Objects" class="headerlink" title="Matching Regex Objects"></a>Matching Regex Objects</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Phone number found: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Phone number found<span class="token punctuation">:</span> <span class="token number">415</span><span class="token operator">-</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Grouping-with-Parentheses"><a href="#Grouping-with-Parentheses" class="headerlink" title="Grouping with Parentheses"></a>Grouping with Parentheses</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'415'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'415'</span><span class="token punctuation">,</span> <span class="token string">'555-4242'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> area_code<span class="token punctuation">,</span> main_number <span class="token operator">=</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>area_code<span class="token punctuation">)</span><span class="token number">415</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>main_number<span class="token punctuation">)</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Multiple-Groups-with-the-Pipe"><a href="#Matching-Multiple-Groups-with-the-Pipe" class="headerlink" title="Matching Multiple Groups with the Pipe"></a>Matching Multiple Groups with the Pipe</h3><p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r’Batman|Tina Fey’ will match either ‘Batman’ or ‘Tina Fey’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hero_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span> <span class="token punctuation">(</span><span class="token string">r'Batman|Tina Fey'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batman and Tina Fey.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Tina Fey and Batman.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Tina Fey'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also use the pipe to match one of several patterns as part of your regex:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(man|mobile|copter|bat)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batmobile lost a wheel'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batmobile'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'mobile'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Optional-Matching-with-the-Question-Mark"><a href="#Optional-Matching-with-the-Question-Mark" class="headerlink" title="Optional Matching with the Question Mark"></a>Optional Matching with the Question Mark</h3><p>The ? character flags the group that precedes it as an optional part of the pattern.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)?man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Zero-or-More-with-the-Star"><a href="#Matching-Zero-or-More-with-the-Star" class="headerlink" title="Matching Zero or More with the Star"></a>Matching Zero or More with the Star</h3><p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)*man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-One-or-More-with-the-Plus"><a href="#Matching-One-or-More-with-the-Plus" class="headerlink" title="Matching One or More with the Plus"></a>Matching One or More with the Plus</h3><p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)+man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Specific-Repetitions-with-Curly-Brackets"><a href="#Matching-Specific-Repetitions-with-Curly-Brackets" class="headerlink" title="Matching Specific Repetitions with Curly Brackets"></a>Matching Specific Repetitions with Curly Brackets</h3><p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string ‘HaHaHa’, but it will not match ‘HaHa’, since the latter has only two repeats of the (Ha) group.</p><p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match ‘HaHaHa’, ‘HaHaHaHa’, and ‘HaHaHaHaHa’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Ha'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Greedy-and-Nongreedy-Matching"><a href="#Greedy-and-Nongreedy-Matching" class="headerlink" title="Greedy and Nongreedy Matching"></a>Greedy and Nongreedy Matching</h3><p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}?'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> nongreedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-findall-Method"><a href="#The-findall-Method" class="headerlink" title="The findall() Method"></a>The findall() Method</h3><p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span> <span class="token comment"># has no groups</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Cell: 415-555-9999 Work: 212-555-0000'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'415-555-9999'</span><span class="token punctuation">,</span> <span class="token string">'212-555-0000'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To summarize what the findall() method returns, remember the following:</p><ul><li><p>When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as [‘415-555-9999’, ‘212-555-0000’].</p></li><li><p>When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [(‘415’, ‘555’, ‘9999’), (‘212’, ‘555’, ‘0000’)].</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Making-Your-Own-Character-Classes"><a href="#Making-Your-Own-Character-Classes" class="headerlink" title="Making Your Own Character Classes"></a>Making Your Own Character Classes</h3><p>There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p><p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> '<span class="token string">', '</span><span class="token string">B', '</span><span class="token string">B', '</span>Y<span class="token string">', '</span> <span class="token string">', '</span><span class="token string-interpolation"><span class="token string">F', '</span></span>D<span class="token string">', '</span><span class="token punctuation">.</span>'<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Caret-and-Dollar-Sign-Characters"><a href="#The-Caret-and-Dollar-Sign-Characters" class="headerlink" title="The Caret and Dollar Sign Characters"></a>The Caret and Dollar Sign Characters</h3><ul><li><p>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</p></li><li><p>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</p></li><li><p>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</p></li></ul><p>The r’^Hello’ regular expression string matches strings that begin with ‘Hello’:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^Hello'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'He said hello.'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The r’\d$‘ regular expression string matches strings that end with a numeric character from 0 to 9:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\d+$'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'1234567890'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12345xyz67890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12 34567890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Wildcard-Character"><a href="#The-Wildcard-Character" class="headerlink" title="The Wildcard Character"></a>The Wildcard Character</h3><p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.at'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'The cat in the hat sat on the flat mat.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'sat'</span><span class="token punctuation">,</span> <span class="token string">'lat'</span><span class="token punctuation">,</span> <span class="token string">'mat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Everything-with-Dot-Star"><a href="#Matching-Everything-with-Dot-Star" class="headerlink" title="Matching Everything with Dot-Star"></a>Matching Everything with Dot-Star</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'First Name: (.*) Last Name: (.*)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> name_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'First Name: Al Last Name: Sweigart'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'Al'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'Sweigart'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*?&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> nongreedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Matching-Newlines-with-the-Dot-Character"><a href="#Matching-Newlines-with-the-Dot-Character" class="headerlink" title="Matching Newlines with the Dot Character"></a>Matching Newlines with the Dot Character</h3><p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Review-of-Regex-Symbols"><a href="#Review-of-Regex-Symbols" class="headerlink" title="Review of Regex Symbols"></a>Review of Regex Symbols</h3><table><thead><tr><th>Symbol</th><th>Matches</th></tr></thead><tbody><tr><td><code>?</code></td><td>zero or one of the preceding group.</td></tr><tr><td><code>*</code></td><td>zero or more of the preceding group.</td></tr><tr><td><code>+</code></td><td>one or more of the preceding group.</td></tr><tr><td><code>{n}</code></td><td>exactly n of the preceding group.</td></tr><tr><td><code>{n,}</code></td><td>n or more of the preceding group.</td></tr><tr><td><code>{,m}</code></td><td>0 to m of the preceding group.</td></tr><tr><td><code>{n,m}</code></td><td>at least n and at most m of the preceding p.</td></tr><tr><td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td><td>performs a nongreedy match of the preceding p.</td></tr><tr><td><code>^spam</code></td><td>means the string must begin with spam.</td></tr><tr><td><code>spam$</code></td><td>means the string must end with spam.</td></tr><tr><td><code>.</code></td><td>any character, except newline characters.</td></tr><tr><td><code>\d</code>, <code>\w</code>, and <code>\s</code></td><td>a digit, word, or space character, respectively.</td></tr><tr><td><code>\D</code>, <code>\W</code>, and <code>\S</code></td><td>anything except a digit, word, or space, respectively.</td></tr><tr><td><code>[abc]</code></td><td>any character between the brackets (such as a, b, ).</td></tr><tr><td><code>[^abc]</code></td><td>any character that isn’t between the brackets.</td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Case-Insensitive-Matching"><a href="#Case-Insensitive-Matching" class="headerlink" title="Case-Insensitive Matching"></a>Case-Insensitive Matching</h3><p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'robocop'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Robocop is part man, part machine, all cop.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'ROBOCOP protects the innocent.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ROBOCOP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Al, why does your programming book talk about robocop so much?'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Substituting-Strings-with-the-sub-Method"><a href="#Substituting-Strings-with-the-sub-Method" class="headerlink" title="Substituting Strings with the sub() Method"></a>Substituting Strings with the sub() Method</h3><p>The sub() method for Regex objects is passed two arguments:</p><ol><li>The first argument is a string to replace any matches.</li><li>The second is the string for the regular expression.</li></ol><p>The sub() method returns a string with the substitutions applied:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent \w+'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'CENSORED'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice gave the secret documents to Agent Bob.'</span><span class="token punctuation">)</span><span class="token string">'CENSORED gave the secret documents to CENSORED.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Another example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent (\w)\w*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\1****'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'</span><span class="token punctuation">)</span>A<span class="token operator">**</span><span class="token operator">**</span> told C<span class="token operator">**</span><span class="token operator">**</span> that E<span class="token operator">**</span><span class="token operator">**</span> knew B<span class="token operator">**</span><span class="token operator">**</span> was a double agent<span class="token punctuation">.</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Managing-Complex-Regexes"><a href="#Managing-Complex-Regexes" class="headerlink" title="Managing Complex Regexes"></a>Managing Complex Regexes</h3><p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p><p>Now instead of a hard-to-read regular expression like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>you can spread the regular expression over multiple lines with comments like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r'''(    (\d{3}|\(\d{3}\))?            # area code    (\s|-|\.)?                    # separator    \d{3}                         # first 3 digits    (\s|-|\.)                     # separator    \d{4}                         # last 4 digits    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension    )'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Handling-File-and-Directory-Paths"><a href="#Handling-File-and-Directory-Paths" class="headerlink" title="Handling File and Directory Paths"></a>Handling File and Directory Paths</h2><p>There are two main modules in Python that deals with path manipulation.<br>One is the <code>os.path</code> module and the other is the <code>pathlib</code> module.<br>The <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way<br>to handle file system paths.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux"><a href="#Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux" class="headerlink" title="Backslash on Windows and Forward Slash on OS X and Linux"></a>Backslash on Windows and Forward Slash on OS X and Linux</h3><p>On Windows, paths are written using backslashes (<code>\</code>) as the separator between<br>folder names. On Unix based operating system such as macOS, Linux, and BSDs,<br>the forward slash (<code>/</code>) is used as the path separator. Joining paths can be<br>a headache if your code needs to work on different platforms.</p><p>Fortunately, Python provides easy ways to handle this. We will showcase<br>how to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token string">'usr\\bin\\spam'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">'bin'</span> <span class="token operator">/</span> <span class="token string">'spam'</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Notice the path separator is different between Windows and Unix based operating<br>system, that’s why you want to use one of the above methods instead of<br>adding strings together to join paths together.</p><p>Joining paths is helpful if you need to create different file paths under<br>the same directory.</p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Users\\asweigart'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Users\asweigart\accounts<span class="token punctuation">.</span>txtC<span class="token punctuation">:</span>\Users\asweigart\details<span class="token punctuation">.</span>csvC<span class="token punctuation">:</span>\Users\asweigart\invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> home <span class="token operator">=</span> Path<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>home <span class="token operator">/</span> filename<span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>accounts<span class="token punctuation">.</span>txt<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>details<span class="token punctuation">.</span>csv<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="The-Current-Working-Directory"><a href="#The-Current-Working-Directory" class="headerlink" title="The Current Working Directory"></a>The Current Working Directory</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Python34'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Windows\\System32'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> os <span class="token keyword">import</span> chdir<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chdir<span class="token punctuation">(</span><span class="token string">'/usr/lib/python3.6'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Creating-New-Folders"><a href="#Creating-New-Folders" class="headerlink" title="Creating New Folders"></a>Creating New Folders</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'C:\\delicious\\walnut\\waffles'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">1226</span><span class="token punctuation">,</span> <span class="token keyword">in</span> mkdir    self<span class="token punctuation">.</span>_accessor<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">387</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapped    <span class="token keyword">return</span> strfunc<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>pathobj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory<span class="token punctuation">:</span> <span class="token string">'/home/asweigart/delicious/walnut/waffles'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oh no, we got a nasty error! The reason is that the ‘delicious’ directory does<br>not exist, so we cannot make the ‘walnut’ and the ‘waffles’ directories under<br>it. To fix this, do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And all is good :)</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Absolute-vs-Relative-Paths"><a href="#Absolute-vs-Relative-Paths" class="headerlink" title="Absolute vs. Relative Paths"></a>Absolute vs. Relative Paths</h3><p>There are two ways to specify a file path.</p><ul><li>An absolute path, which always begins with the root folder</li><li>A relative path, which is relative to the program’s current working directory</li></ul><p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Handling-Absolute-and-Relative-Paths"><a href="#Handling-Absolute-and-Relative-Paths" class="headerlink" title="Handling Absolute and Relative Paths"></a>Handling Absolute and Relative Paths</h3><p>To see if a path is an absolute path:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'/home/asweigart'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token string">'/home'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can get a relative path from a starting path to another path.</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token string">'etc/passwd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>relative_to<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>etc<span class="token operator">/</span>passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Checking-Path-Validity"><a href="#Checking-Path-Validity" class="headerlink" title="Checking Path Validity"></a>Checking Path Validity</h3><p>Checking if a file/directory exists:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a file:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a directory:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Finding-File-Sizes-and-Folder-Contents"><a href="#Finding-File-Sizes-and-Folder-Contents" class="headerlink" title="Finding File Sizes and Folder Contents"></a>Finding File Sizes and Folder Contents</h3><p>Getting a file’s size in bytes:</p><p>Using <code>os.path</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32\\calc.exe'</span><span class="token punctuation">)</span><span class="token number">776192</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> stat <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">'/bin/python3.6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span> <span class="token comment"># stat contains some other information about the file as well</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33261</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">141087</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">2051</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">10024</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1517725562</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1515119809</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1517261276</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span> <span class="token comment"># size in bytes</span><span class="token number">10024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>os.listdir</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'0409'</span><span class="token punctuation">,</span> <span class="token string">'12520437.cpx'</span><span class="token punctuation">,</span> <span class="token string">'12520850.cpx'</span><span class="token punctuation">,</span> <span class="token string">'5U877.ax'</span><span class="token punctuation">,</span> <span class="token string">'aaclient.dll'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token string">'xwtpdui.dll'</span><span class="token punctuation">,</span> <span class="token string">'xwtpw32.dll'</span><span class="token punctuation">,</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token string">'zh-HK'</span><span class="token punctuation">,</span> <span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token string">'zipfldr.dll'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>tiff2rgba<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>iconv<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>ldd<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>cache_restore<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>udiskie<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>unix2dos<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>t1reencode<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>epstopdf<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>idle3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To find the total size of all the files in this directory:</p><p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to<br>check for whether a path is a file or directory using the methods in the methods discussed in the above section!</p><p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      total_size <span class="token operator">=</span> total_size <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1117846456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> sub_path <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     total_size <span class="token operator">+=</span> sub_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1903178911</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Copying-Files-and-Folders"><a href="#Copying-Files-and-Folders" class="headerlink" title="Copying Files and Folders"></a>Copying Files and Folders</h3><p>The shutil module provides functions for copying files, as well as entire folders.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'C:\\spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\spam.txt'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'eggs.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious\\eggs2.txt'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\eggs2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'C:\\bacon'</span><span class="token punctuation">,</span> <span class="token string">'C:\\bacon_backup'</span><span class="token punctuation">)</span><span class="token string">'C:\\bacon_backup'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Moving-and-Renaming-Files-and-Folders"><a href="#Moving-and-Renaming-Files-and-Folders" class="headerlink" title="Moving and Renaming Files and Folders"></a>Moving and Renaming Files and Folders</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs\\new_bacon.txt'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\new_bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Permanently-Deleting-Files-and-Folders"><a href="#Permanently-Deleting-Files-and-Folders" class="headerlink" title="Permanently Deleting Files and Folders"></a>Permanently Deleting Files and Folders</h3><ul><li><p>Calling os.unlink(path) or Path.unlink() will delete the file at path.</p></li><li><p>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</p></li><li><p>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</p></li></ul><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Safe-Deletes-with-the-send2trash-Module"><a href="#Safe-Deletes-with-the-send2trash-Module" class="headerlink" title="Safe Deletes with the send2trash Module"></a>Safe Deletes with the send2trash Module</h3><p>You can install this module by running pip install send2trash from a Terminal window.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> send2trash<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span> <span class="token comment"># creates the file</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Walking-a-Directory-Tree"><a href="#Walking-a-Directory-Tree" class="headerlink" title="Walking a Directory Tree"></a>Walking a Directory Tree</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> folder_name<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The current folder is {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> subfolder <span class="token keyword">in</span> subfolders<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SUBFOLDER OF {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> subfolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILE INSIDE {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>The current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\deliciousSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> catsSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> walnutFILE INSIDE C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> spam<span class="token punctuation">.</span>txtThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\catsFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> catnames<span class="token punctuation">.</span>txtFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> zophie<span class="token punctuation">.</span>jpgThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnutSUBFOLDER OF C<span class="token punctuation">:</span>\delicious\walnut<span class="token punctuation">:</span> wafflesThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnut\wafflesFILE INSIDE C<span class="token punctuation">:</span>\delicious\walnut\waffles<span class="token punctuation">:</span> butter<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><p><code>pathlib</code> provides a lot more functionality than the ones listed above,<br>like getting file name, getting file extension, reading/writing a file without<br>manually opening it, etc. Check out the<br><a href="https://docs.python.org/3/library/pathlib.html">official documentation</a><br>if you want to know more!</p><h2 id="Reading-and-Writing-Files"><a href="#Reading-and-Writing-Files" class="headerlink" title="Reading and Writing Files"></a>Reading and Writing Files</h2><h3 id="The-File-Reading-Writing-Process"><a href="#The-File-Reading-Writing-Process" class="headerlink" title="The File Reading/Writing Process"></a>The File Reading/Writing Process</h3><p>To read/write to a file in Python, you will want to use the <code>with</code><br>statement, which will close the file for you after you are done.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Opening-and-reading-files-with-the-open-function"><a href="#Opening-and-reading-files-with-the-open-function" class="headerlink" title="Opening and reading files with the open() function"></a>Opening and reading files with the open() function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\your_home_folder\\hello.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hello_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     hello_content <span class="token operator">=</span> hello_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello_content<span class="token string">'Hello World!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     sonnet_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men<span class="token string">'s eyes,\n'</span><span class="token punctuation">,</span> ' I <span class="token builtin">all</span> alone beweep myoutcast state<span class="token punctuation">,</span>\n<span class="token string">', And trouble deaf heaven with my bootless cries,\n'</span><span class="token punctuation">,</span> Andlook upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span>'<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can also iterate through the file line by line:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> sonnet_file<span class="token punctuation">:</span> <span class="token comment"># note the new line character will be included in the line</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men's eyes<span class="token punctuation">,</span>I <span class="token builtin">all</span> alone beweep my outcast state<span class="token punctuation">,</span>And trouble deaf heaven <span class="token keyword">with</span> my bootless cries<span class="token punctuation">,</span>And look upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Writing-to-Files"><a href="#Writing-to-Files" class="headerlink" title="Writing to Files"></a>Writing to Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello world!\n'</span><span class="token punctuation">)</span><span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     content <span class="token operator">=</span> bacon_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>Hello world!Bacon <span class="token keyword">is</span> <span class="token keyword">not</span> a vegetable<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Saving-Variables-with-the-shelve-Module"><a href="#Saving-Variables-with-the-shelve-Module" class="headerlink" title="Saving Variables with the shelve Module"></a>Saving Variables with the shelve Module</h3><p>To save variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shelve<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To open and read variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'shelve.DbfilenameShelf'</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Saving-Variables-with-the-pprint-pformat-Function"><a href="#Saving-Variables-with-the-pprint-pformat-Function" class="headerlink" title="Saving Variables with the pprint.pformat() Function"></a>Saving Variables with the pprint.pformat() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token string">"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = {}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Reading-ZIP-Files"><a href="#Reading-ZIP-Files" class="headerlink" title="Reading ZIP Files"></a>Reading ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     spam_info <span class="token operator">=</span> example_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Compressed file is %sx smaller!'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size <span class="token operator">/</span> spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/'</span><span class="token punctuation">,</span> <span class="token string">'cats/catnames.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/zophie.jpg'</span><span class="token punctuation">]</span><span class="token number">13908</span><span class="token number">3828</span><span class="token string">'Compressed file is 3.63x smaller!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Extracting-from-ZIP-Files"><a href="#Extracting-from-ZIP-Files" class="headerlink" title="Extracting from ZIP Files"></a>Extracting from ZIP Files</h3><p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     example_zip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\some\\new\\folders'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'C:\\spam.txt'</span><span class="token string">'C:\\some\\new\\folders\\spam.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Creating-and-Adding-to-ZIP-Files"><a href="#Creating-and-Adding-to-ZIP-Files" class="headerlink" title="Creating and Adding to ZIP Files"></a>Creating and Adding to ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_zip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="JSON-YAML-and-configuration-files"><a href="#JSON-YAML-and-configuration-files" class="headerlink" title="JSON, YAML and configuration files"></a>JSON, YAML and configuration files</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>Open a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Write a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsoncontent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Joe"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.<br>It is a convenient choice for configuration files where humans will have to edit it.</p><p>There are two main libraries allowing to access to YAML files:</p><ul><li><a href="https://pypi.python.org/pypi/PyYAML">PyYaml</a></li><li><a href="https://pypi.python.org/pypi/ruamel.yaml">Ruamel.yaml</a></li></ul><p>Install them using <code>pip install</code> in your virtual environment.</p><p>The first one it easier to use but the second one, Ruamel, implements much better the YAML<br>specification, and allow for example to modify a YAML content without altering comments.</p><p>Open a YAML file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ruamel<span class="token punctuation">.</span>yaml <span class="token keyword">import</span> YAML<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.yaml"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    yaml<span class="token operator">=</span>YAML<span class="token punctuation">(</span><span class="token punctuation">)</span>    yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Anyconfig"><a href="#Anyconfig" class="headerlink" title="Anyconfig"></a>Anyconfig</h3><p><a href="https://pypi.python.org/pypi/anyconfig">Anyconfig</a> is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p><p>Install it with:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> anyconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Usage:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> anyconfigconf1 <span class="token operator">=</span> anyconfig<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/path/to/foo/conf.d/a.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><h3 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h3><p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p><ul><li>The raise keyword</li><li>A call to the Exception() function</li><li>A string with a helpful error message passed to the Exception() function</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#191&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> This <span class="token keyword">is</span> the error message<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">box_print</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Symbol must be a single character string.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Width must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Height must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token keyword">for</span> sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ZZ'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        box_print<span class="token punctuation">(</span>sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception happened: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Getting-the-Traceback-as-a-String"><a href="#Getting-the-Traceback-as-a-String" class="headerlink" title="Getting the Traceback as a String"></a>Getting the Traceback as a String</h3><p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> traceback<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'errorInfo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> error_file<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>          error_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The traceback info was written to errorInfo.txt.'</span><span class="token punctuation">)</span><span class="token number">116</span>The traceback info was written to errorInfo<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p><pre><code>Traceback (most recent call last):  File "&lt;pyshell#28&gt;", line 2, in &lt;module&gt;Exception: This is the error message.</code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h3><p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p><ul><li>The assert keyword</li><li>A condition (that is, an expression that evaluates to True or False)</li><li>A comma</li><li>A string to display when the condition is False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'open'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'I\'m sorry, Dave. I\'m afraid I can\'t do that.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#10&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>AssertionError<span class="token punctuation">:</span> The pod bay doors need to be <span class="token string">"open"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p><p>Disabling Assertions</p><p>Assertions can be disabled by passing the -O option when running Python.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of program'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     total <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         total <span class="token operator">*=</span> i<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'i is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', total is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">return</span> total<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of program'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of program<span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">665</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">668</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">670</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">2</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">673</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">3</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">675</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">4</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">678</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">680</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">684</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging-Levels"><a href="#Logging-Levels" class="headerlink" title="Logging Levels"></a>Logging Levels</h3><p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p><table><thead><tr><th>Level</th><th>Logging Function</th><th>Description</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td><code>logging.debug()</code></td><td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td><code>logging.info()</code></td><td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td></tr><tr><td><code>WARNING</code></td><td><code>logging.warning()</code></td><td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td></tr><tr><td><code>ERROR</code></td><td><code>logging.error()</code></td><td>Used to record an error that caused the program to fail to do something.</td></tr><tr><td><code>CRITICAL</code></td><td><code>logging.critical()</code></td><td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td></tr></tbody></table><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Disabling-Logging"><a href="#Disabling-Logging" class="headerlink" title="Disabling Logging"></a>Disabling Logging</h3><p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s -%(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">054</span> <span class="token operator">-</span> CRITICAL <span class="token operator">-</span> Critical error! Critical error!<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error! Error!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Logging-to-a-File"><a href="#Logging-to-a-File" class="headerlink" title="Logging to a File"></a>Logging to a File</h3><p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'myProgramLog.txt'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Lambda-Functions"><a href="#Lambda-Functions" class="headerlink" title="Lambda Functions"></a>Lambda Functions</h2><p>This function:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Is equivalent to the <em>lambda</em> function:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It’s not even need to bind it to a name like add before:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Like regular nested functions, lambdas also work as lexical closures:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">make_adder</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note: lambda can only evaluate an expression, like a single line of code.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Ternary-Conditional-Operator"><a href="#Ternary-Conditional-Operator" class="headerlink" title="Ternary Conditional Operator"></a>Ternary Conditional Operator</h2><p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p><pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;</code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>kid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ternary operators can be chained:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token keyword">else</span> <span class="token string">'teenager'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>teenager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The code above is equivalent to:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="args and kwargs"></a>args and kwargs</h2><p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p><ol><li><p>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&lt;name&gt;</code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</p></li><li><p>In a function call, <code>*</code> means “unpack tuple or list named <code>&lt;name&gt;</code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</p></li></ol><p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p><p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruits</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> fruit <span class="token keyword">in</span> args<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruits<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"grapes"</span><span class="token punctuation">)</span><span class="token string">"apples"</span><span class="token string">"bananas"</span><span class="token string">"grapes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruit</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0}: {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruit<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> applecolor<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> kwarg2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span><span class="token operator">*</span>data2<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token string">"python"</span><span class="token punctuation">,</span>kwarg2<span class="token operator">=</span><span class="token string">"cheatsheet"</span><span class="token punctuation">,</span><span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>pythoncheatsheet<span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># If you do not specify ** for kwargs</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">*</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Things-to-Remember-args"><a href="#Things-to-Remember-args" class="headerlink" title="Things to Remember(args)"></a>Things to Remember(args)</h3><ol><li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li><li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li><li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li><li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li></ol><h3 id="Things-to-Remember-kwargs"><a href="#Things-to-Remember-kwargs" class="headerlink" title="Things to Remember(kwargs)"></a>Things to Remember(kwargs)</h3><ol><li>Function arguments can be specified by position or by keyword.</li><li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li><li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li><li>Optional keyword arguments should always be passed by keyword instead of by position.</li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><p>While Python’s context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p><h3 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h3><p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p><p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     file_contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># the open_file object has automatically been closed.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Anything that ends execution of the block causes the context manager’s exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p><h3 id="Writing-your-own-contextmanager-using-generator-syntax"><a href="#Writing-your-own-contextmanager-using-generator-syntax" class="headerlink" title="Writing your own contextmanager using generator syntax"></a>Writing your own contextmanager using generator syntax</h3><p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> contextlib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @contextlib<span class="token punctuation">.</span>contextmanager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">context_manager</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">yield</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> context_manager<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cm<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># the following instructions are run when the 'yield' point of the context</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># manager is reached.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># 'cm' will have the value that was yielded</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Right in the middle with cm = {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span>EnterRight <span class="token keyword">in</span> the middle <span class="token keyword">with</span> cm <span class="token operator">=</span> <span class="token number">3</span>Exit<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="main-Top-level-script-environment"><a href="#main-Top-level-script-environment" class="headerlink" title="__main__ Top-level script environment"></a><code>__main__</code> Top-level script environment</h2><p><code>__main__</code> is the name of the scope in which top-level code executes.<br>A module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p><p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># execute only if run as a script</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m</p><p>For example we are developing script which is designed to be used as module, we should do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Python program to execute function directly</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># we can test it by calling the function save it as calculate.py</span><span class="token number">30</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Now if we want to use that module by importing we have to comment out our call,</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Instead we can write like this in calculate.py</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> calculate<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> calculate<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ol><li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li><li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li><li>Python files can act as either reusable modules, or as standalone programs.</li><li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p><p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p><p>This allows you to easily install Python packages. Often it’s enough to write:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and module will install itself.</p><p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setup<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token operator">=</span><span class="token string">'pythonCheatsheet'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    version<span class="token operator">=</span><span class="token string">'0.1'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'pipenv'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    license<span class="token operator">=</span><span class="token string">'MIT'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    long_description<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'README.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Find more information visit <a href="http://docs.python.org/install/index.html">http://docs.python.org/install/index.html</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Dataclasses"><a href="#Dataclasses" class="headerlink" title="Dataclasses"></a>Dataclasses</h2><p><code>Dataclasses</code> are python classes but are suited for storing data objects.<br>This module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li><p>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</p></li><li><p>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</p></li></ol><p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p><p>python 2.7</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with dataclass</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="Default-values"><a href="#Default-values" class="headerlink" title="Default values"></a>Default values</h3><p>It is easy to add default values to the fields of your data class.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     count<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     price<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Product<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>namePython<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>count<span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>price<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-hints"><a href="#Type-hints" class="headerlink" title="Type hints"></a>Type hints</h3><p>It is mandatory to define the data type in dataclass. However, If you don’t want specify the datatype then, use <code>typing.Any</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">WithoutExplicitTypes</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token punctuation">:</span> Any<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    value<span class="token punctuation">:</span> Any <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h2 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h2><p>The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><ol><li><p>Install virtualenv</p><pre><code> pip install virtualenv</code></pre></li><li><p>Install virtualenvwrapper-win (Windows)</p><pre><code> pip install virtualenvwrapper-win</code></pre></li></ol><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> mkvirtualenv HelloWold</code></pre><p> Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p></li><li><p>Set Project Directory</p><p> To bind our virtualenv with our current working directory we simply enter:</p><pre><code> setprojectdir .</code></pre></li><li><p>Deactivate</p><p> To move onto something else in the command line type ‘deactivate’ to deactivate your environment.</p><pre><code> deactivate</code></pre><p> Notice how the parenthesis disappear.</p></li><li><p>Workon</p><p> Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder</p><pre><code> workon HelloWold</code></pre></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a>poetry</h3><blockquote><p><a href="https://poetry.eustace.io/">Poetry</a> is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p></blockquote><ol><li><p>Install Poetry</p><pre><code> pip install --user poetry</code></pre></li><li><p>Create a new project</p><pre><code> poetry new my-project</code></pre><p> This will create a my-project directory:</p><pre><code> my-project ├── pyproject.toml ├── README.rst ├── poetry_demo │   └── __init__.py └── tests     ├── __init__.py     └── test_poetry_demo.py</code></pre><p> The pyproject.toml file will orchestrate your project and its dependencies:</p><pre><code> [tool.poetry] name = "my-project" version = "0.1.0" description = "" authors = ["your name &lt;your@mail.com&gt;"] [tool.poetry.dependencies] python = "*" [tool.poetry.dev-dependencies] pytest = "^3.4"</code></pre></li><li><p>Packages</p><p> To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p><pre><code> [tool.poetry.dependencies] pendulum = "^1.4"</code></pre><p> Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p><pre><code> $ poetry add pendulum</code></pre><p> To install the dependencies listed in the pyproject.toml:</p><pre><code> poetry install</code></pre><p> To remove dependencies:</p><pre><code> poetry remove pendulum</code></pre></li></ol><p>For more information, check the <a href="https://poetry.eustace.io/docs/">documentation</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p><a href="https://pipenv.readthedocs.io/en/latest/">Pipenv</a> is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.</p></blockquote><ol><li><p>Install pipenv</p><pre><code> pip install pipenv</code></pre></li><li><p>Enter your Project directory and install the Packages for your project</p><pre><code> cd my_project pipenv install &lt;package&gt;</code></pre><p> Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p></li><li><p>Uninstall Packages</p><pre><code> pipenv uninstall &lt;package&gt;</code></pre></li><li><p>Activate the Virtual Environment associated with your Python project</p><pre><code> pipenv shell</code></pre></li><li><p>Exit the Virtual Environment</p><pre><code> exit</code></pre></li></ol><p>Find more information and a video in <a href="https://docs.pipenv.org/">docs.pipenv.org</a>.</p><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p><h3 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h3><p><a href="https://anaconda.org/">Anaconda</a> is another popular tool to manage python packages.</p><blockquote><p>Where packages, notebooks, projects and environments are shared.<br>Your place for free public conda package hosting.</p></blockquote><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> conda create -n HelloWorld</code></pre></li><li><p>To use the Virtual Environment, activate it by:</p><pre><code> conda activate HelloWorld</code></pre><p> Anything installed now will be specific to the project HelloWorld</p></li><li><p>Exit the Virtual Environment</p><pre><code> conda deactivate</code></pre></li></ol><p><a href="#python-cheatsheet"><em>Return to the Top</em></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/myhexo/2021/03/14/xue-xi/python/python-cheatsheet-zh-cn/"/>
      <url>/myhexo/2021/03/14/xue-xi/python/python-cheatsheet-zh-cn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python-备忘录"><a href="#Python-备忘录" class="headerlink" title="Python 备忘录"></a>Python 备忘录</h2><ul><li><a href="#about-">About</a><ul><li><a href="#contribute">Contribute</a></li><li><a href="#read-it">Read It</a></li><li>[Python Cheatsheet](#Python 备忘录)</li><li><a href="#the-zen-of-python">The Zen of Python</a></li><li><a href="#python-basics">Python Basics</a><ul><li><a href="#math-operators">Math Operators</a></li><li><a href="#data-types">Data Types</a></li><li><a href="#string-concatenation-and-replication">String Concatenation and Replication</a></li><li><a href="#variables">Variables</a></li><li><a href="#comments">Comments</a></li><li><a href="#the-print-function">The print() Function</a></li><li><a href="#the-input-function">The input() Function</a></li><li><a href="#the-len-function">The len() Function</a></li><li><a href="#the-str-int-and-float-functions">The str(), int(), and float() Functions</a></li></ul></li><li><a href="#flow-control">Flow Control</a><ul><li><a href="#comparison-operators">Comparison Operators</a></li><li><a href="#boolean-evaluation">Boolean evaluation</a></li><li><a href="#boolean-operators">Boolean Operators</a></li><li><a href="#mixing-boolean-and-comparison-operators">Mixing Boolean and Comparison Operators</a></li><li><a href="#if-statements">if Statements</a></li><li><a href="#else-statements">else Statements</a></li><li><a href="#elif-statements">elif Statements</a></li><li><a href="#while-loop-statements">while Loop Statements</a></li><li><a href="#break-statements">break Statements</a></li><li><a href="#continue-statements">continue Statements</a></li><li><a href="#for-loops-and-the-range-function">for Loops and the range() Function</a></li><li><a href="#for-else-statement">For else statement</a></li><li><a href="#importing-modules">Importing Modules</a></li><li><a href="#ending-a-program-early-with-sysexit">Ending a Program Early with sys.exit()</a></li></ul></li><li><a href="#functions">Functions</a><ul><li><a href="#return-values-and-return-statements">Return Values and return Statements</a></li><li><a href="#the-none-value">The None Value</a></li><li><a href="#keyword-arguments-and-print">Keyword Arguments and print()</a></li><li><a href="#local-and-global-scope">Local and Global Scope</a></li><li><a href="#the-global-statement">The global Statement</a></li></ul></li><li><a href="#exception-handling">Exception Handling</a><ul><li><a href="#basic-exception-handling">Basic exception handling</a></li><li><a href="#final-code-in-exception-handling">Final code in exception handling</a></li></ul></li><li><a href="#lists">Lists</a><ul><li><a href="#getting-individual-values-in-a-list-with-indexes">Getting Individual Values in a List with Indexes</a></li><li><a href="#negative-indexes">Negative Indexes</a></li><li><a href="#getting-sublists-with-slices">Getting Sublists with Slices</a></li><li><a href="#getting-a-lists-length-with-len">Getting a List’s Length with len()</a></li><li><a href="#changing-values-in-a-list-with-indexes">Changing Values in a List with Indexes</a></li><li><a href="#list-concatenation-and-list-replication">List Concatenation and List Replication</a></li><li><a href="#removing-values-from-lists-with-del-statements">Removing Values from Lists with del Statements</a></li><li><a href="#using-for-loops-with-lists">Using for Loops with Lists</a></li><li><a href="#looping-through-multiple-lists-with-zip">Looping Through Multiple Lists with zip()</a></li><li><a href="#the-in-and-not-in-operators">The in and not in Operators</a></li><li><a href="#the-multiple-assignment-trick">The Multiple Assignment Trick</a></li><li><a href="#augmented-assignment-operators">Augmented Assignment Operators</a></li><li><a href="#finding-a-value-in-a-list-with-the-index-method">Finding a Value in a List with the index() Method</a></li><li><a href="#adding-values-to-lists-with-the-append-and-insert-methods">Adding Values to Lists with the append() and insert() Methods</a></li><li><a href="#removing-values-from-lists-with-remove">Removing Values from Lists with remove()</a></li><li><a href="#removing-values-from-lists-with-pop">Removing Values from Lists with pop()</a></li><li><a href="#sorting-the-values-in-a-list-with-the-sort-method">Sorting the Values in a List with the sort() Method</a></li><li><a href="#tuple-data-type">Tuple Data Type</a></li><li><a href="#converting-types-with-the-list-and-tuple-functions">Converting Types with the list() and tuple() Functions</a></li></ul></li><li><a href="#dictionaries-and-structuring-data">Dictionaries and Structuring Data</a><ul><li><a href="#the-keys-values-and-items-methods">The keys(), values(), and items() Methods</a></li><li><a href="#checking-whether-a-key-or-value-exists-in-a-dictionary">Checking Whether a Key or Value Exists in a Dictionary</a></li><li><a href="#the-get-method">The get() Method</a></li><li><a href="#the-setdefault-method">The setdefault() Method</a></li><li><a href="#pretty-printing">Pretty Printing</a></li><li><a href="#merge-two-dictionaries">Merge two dictionaries</a></li></ul></li><li><a href="#sets">sets</a><ul><li><a href="#initializing-a-set">Initializing a set</a></li><li><a href="#sets-unordered-collections-of-unique-elements">sets: unordered collections of unique elements</a></li><li><a href="#set-add-and-update">set add() and update()</a></li><li><a href="#set-remove-and-discard">set remove() and discard()</a></li><li><a href="#set-union">set union()</a></li><li><a href="#set-intersection">set intersection</a></li><li><a href="#set-difference">set difference</a></li><li><a href="#set-symetric_difference">set symetric_difference</a></li></ul></li><li><a href="#itertools-module">itertools Module</a><ul><li><a href="#accumulate">accumulate()</a></li><li><a href="#combinations">combinations()</a></li><li><a href="#combinations_with_replacement">combinations_with_replacement()</a></li><li><a href="#count">count()</a></li><li><a href="#cycle">cycle()</a></li><li><a href="#chain">chain()</a></li><li><a href="#compress">compress()</a></li><li><a href="#dropwhile">dropwhile()</a></li><li><a href="#filterfalse">filterfalse()</a></li><li><a href="#groupby">groupby()</a></li><li><a href="#islice">islice()</a></li><li><a href="#permutations">permutations()</a></li><li><a href="#product">product()</a></li><li><a href="#repeat">repeat()</a></li><li><a href="#starmap">starmap()</a></li><li><a href="#takewhile">takewhile()</a></li><li><a href="#tee">tee()</a></li><li><a href="#zip_longest">zip_longest()</a></li></ul></li><li><a href="#comprehensions">Comprehensions</a><ul><li><a href="#list-comprehension">List comprehension</a></li><li><a href="#set-comprehension">Set comprehension</a></li><li><a href="#dict-comprehension">Dict comprehension</a></li></ul></li><li><a href="#manipulating-strings">Manipulating Strings</a><ul><li><a href="#escape-characters">Escape Characters</a></li><li><a href="#raw-strings">Raw Strings</a></li><li><a href="#multiline-strings-with-triple-quotes">Multiline Strings with Triple Quotes</a></li><li><a href="#indexing-and-slicing-strings">Indexing and Slicing Strings</a></li><li><a href="#the-in-and-not-in-operators-with-strings">The in and not in Operators with Strings</a></li><li><a href="#the-in-and-not-in-operators-with-list">The in and not in Operators with list</a></li><li><a href="#the-upper-lower-isupper-and-islower-string-methods">The upper(), lower(), isupper(), and islower() String Methods</a></li><li><a href="#the-isx-string-methods">The isX String Methods</a></li><li><a href="#the-startswith-and-endswith-string-methods">The startswith() and endswith() String Methods</a></li><li><a href="#the-join-and-split-string-methods">The join() and split() String Methods</a></li><li><a href="#justifying-text-with-rjust-ljust-and-center">Justifying Text with rjust(), ljust(), and center()</a></li><li><a href="#removing-whitespace-with-strip-rstrip-and-lstrip">Removing Whitespace with strip(), rstrip(), and lstrip()</a></li><li><a href="#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install">Copying and Pasting Strings with the pyperclip Module (need pip install)</a></li></ul></li><li><a href="#string-formatting">String Formatting</a><ul><li><a href="#-operator">% operator</a></li><li><a href="#string-formatting-strformat">String Formatting (str.format)</a></li><li><a href="#lazy-string-formatting">Lazy string formatting</a></li><li><a href="#formatted-string-literals-or-f-strings-python-36">Formatted String Literals or f-strings (Python 3.6+)</a></li><li><a href="#template-strings">Template Strings</a></li></ul></li><li><a href="#regular-expressions">Regular Expressions</a><ul><li><a href="#matching-regex-objects">Matching Regex Objects</a></li><li><a href="#grouping-with-parentheses">Grouping with Parentheses</a></li><li><a href="#matching-multiple-groups-with-the-pipe">Matching Multiple Groups with the Pipe</a></li><li><a href="#optional-matching-with-the-question-mark">Optional Matching with the Question Mark</a></li><li><a href="#matching-zero-or-more-with-the-star">Matching Zero or More with the Star</a></li><li><a href="#matching-one-or-more-with-the-plus">Matching One or More with the Plus</a></li><li><a href="#matching-specific-repetitions-with-curly-brackets">Matching Specific Repetitions with Curly Brackets</a></li><li><a href="#greedy-and-nongreedy-matching">Greedy and Nongreedy Matching</a></li><li><a href="#the-findall-method">The findall() Method</a></li><li><a href="#making-your-own-character-classes">Making Your Own Character Classes</a></li><li><a href="#the-caret-and-dollar-sign-characters">The Caret and Dollar Sign Characters</a></li><li><a href="#the-wildcard-character">The Wildcard Character</a></li><li><a href="#matching-everything-with-dot-star">Matching Everything with Dot-Star</a></li><li><a href="#matching-newlines-with-the-dot-character">Matching Newlines with the Dot Character</a></li><li><a href="#review-of-regex-symbols">Review of Regex Symbols</a></li><li><a href="#case-insensitive-matching">Case-Insensitive Matching</a></li><li><a href="#substituting-strings-with-the-sub-method">Substituting Strings with the sub() Method</a></li><li><a href="#managing-complex-regexes">Managing Complex Regexes</a></li></ul></li><li><a href="#handling-file-and-directory-paths">Handling File and Directory Paths</a><ul><li><a href="#backslash-on-windows-and-forward-slash-on-os-x-and-linux">Backslash on Windows and Forward Slash on OS X and Linux</a></li><li><a href="#the-current-working-directory">The Current Working Directory</a></li><li><a href="#creating-new-folders">Creating New Folders</a></li><li><a href="#absolute-vs-relative-paths">Absolute vs. Relative Paths</a></li><li><a href="#handling-absolute-and-relative-paths">Handling Absolute and Relative Paths</a></li><li><a href="#checking-path-validity">Checking Path Validity</a></li><li><a href="#finding-file-sizes-and-folder-contents">Finding File Sizes and Folder Contents</a></li><li><a href="#copying-files-and-folders">Copying Files and Folders</a></li><li><a href="#moving-and-renaming-files-and-folders">Moving and Renaming Files and Folders</a></li><li><a href="#permanently-deleting-files-and-folders">Permanently Deleting Files and Folders</a></li><li><a href="#safe-deletes-with-the-send2trash-module">Safe Deletes with the send2trash Module</a></li><li><a href="#walking-a-directory-tree">Walking a Directory Tree</a></li></ul></li><li><a href="#reading-and-writing-files">Reading and Writing Files</a><ul><li><a href="#the-file-readingwriting-process">The File Reading/Writing Process</a></li><li><a href="#opening-and-reading-files-with-the-open-function">Opening and reading files with the open() function</a></li><li><a href="#writing-to-files">Writing to Files</a></li><li><a href="#saving-variables-with-the-shelve-module">Saving Variables with the shelve Module</a></li><li><a href="#saving-variables-with-the-pprintpformat-function">Saving Variables with the pprint.pformat() Function</a></li><li><a href="#reading-zip-files">Reading ZIP Files</a></li><li><a href="#extracting-from-zip-files">Extracting from ZIP Files</a></li><li><a href="#creating-and-adding-to-zip-files">Creating and Adding to ZIP Files</a></li></ul></li><li><a href="#json-yaml-and-configuration-files">JSON, YAML and configuration files</a><ul><li><a href="#json">JSON</a></li><li><a href="#yaml">YAML</a></li><li><a href="#anyconfig">Anyconfig</a></li></ul></li><li><a href="#debugging">Debugging</a><ul><li><a href="#raising-exceptions">Raising Exceptions</a></li><li><a href="#getting-the-traceback-as-a-string">Getting the Traceback as a String</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#logging">Logging</a></li><li><a href="#logging-levels">Logging Levels</a></li><li><a href="#disabling-logging">Disabling Logging</a></li><li><a href="#logging-to-a-file">Logging to a File</a></li></ul></li><li><a href="#lambda-functions">Lambda Functions</a></li><li><a href="#ternary-conditional-operator">Ternary Conditional Operator</a></li><li><a href="#args-and-kwargs">args and kwargs</a><ul><li><a href="#things-to-rememberargs">Things to Remember(args)</a></li><li><a href="#things-to-rememberkwargs">Things to Remember(kwargs)</a></li></ul></li><li><a href="#context-manager">Context Manager</a><ul><li><a href="#with-statement">with statement</a></li><li><a href="#writing-your-own-contextmanager-using-generator-syntax">Writing your own contextmanager using generator syntax</a></li></ul></li><li><a href="#__main__-top-level-script-environment"><code>__main__</code> Top-level script environment</a><ul><li><a href="#advantages">Advantages</a></li></ul></li><li><a href="#setuppy">setup.py</a></li><li><a href="#dataclasses">Dataclasses</a><ul><li><a href="#features">Features</a></li><li><a href="#default-values">Default values</a></li><li><a href="#type-hints">Type hints</a></li></ul></li><li><a href="#virtual-environment">Virtual Environment</a><ul><li><a href="#virtualenv">virtualenv</a></li><li><a href="#poetry">poetry</a></li><li><a href="#pipenv">pipenv</a></li><li><a href="#anaconda">anaconda</a></li></ul></li></ul></li></ul><h2 id="Python-之禅"><a href="#Python-之禅" class="headerlink" title="Python 之禅"></a>Python 之禅</h2><p>来自 <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>:</p><blockquote><p>Long time Pythoneer Tim Peters succinctly channels the BDFL’s guiding principles for Python’s design into 20 aphorisms, only 19 of which have been written down.</p><p>很长时间 Python 工程师 Tim Peters 简洁地输出了 BDFL 指南原则共20条格言用于Python的设计，其中有19条已经被记录下来。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> thisThe Zen of Python<span class="token punctuation">,</span> by Tim PetersBeautiful <span class="token keyword">is</span> better than ugly<span class="token punctuation">.</span>Explicit <span class="token keyword">is</span> better than implicit<span class="token punctuation">.</span>Simple <span class="token keyword">is</span> better than <span class="token builtin">complex</span><span class="token punctuation">.</span>Complex <span class="token keyword">is</span> better than complicated<span class="token punctuation">.</span>Flat <span class="token keyword">is</span> better than nested<span class="token punctuation">.</span>Sparse <span class="token keyword">is</span> better than dense<span class="token punctuation">.</span>Readability counts<span class="token punctuation">.</span>Special cases aren't special enough to <span class="token keyword">break</span> the rules<span class="token punctuation">.</span>Although practicality beats purity<span class="token punctuation">.</span>Errors should never <span class="token keyword">pass</span> silently<span class="token punctuation">.</span>Unless explicitly silenced<span class="token punctuation">.</span>In the face of ambiguity<span class="token punctuation">,</span> refuse the temptation to guess<span class="token punctuation">.</span>There should be one<span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">and</span> preferably only one <span class="token operator">-</span><span class="token operator">-</span>obvious way to do it<span class="token punctuation">.</span>Although that way may <span class="token keyword">not</span> be obvious at first unless you're Dutch<span class="token punctuation">.</span>Now <span class="token keyword">is</span> better than never<span class="token punctuation">.</span>Although never <span class="token keyword">is</span> often better than <span class="token operator">*</span>right<span class="token operator">*</span> now<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> hard to explain<span class="token punctuation">,</span> it's a bad idea<span class="token punctuation">.</span>If the implementation <span class="token keyword">is</span> easy to explain<span class="token punctuation">,</span> it may be a good idea<span class="token punctuation">.</span>Namespaces are one honking great idea <span class="token operator">-</span><span class="token operator">-</span> let's do more of those!Python 之禅，由Tim Peters编写优美胜于丑陋（Python以编写优美的代码为目标）明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）可读性很重要（优美的代码是可读的）即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token keyword">pass</span> 风格的代码）当存在多种可能，不要尝试去猜测而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h2><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><p>从 <strong>最高</strong> 到 <strong>最低</strong> 的优先级:</p><table><thead><tr><th align="center">操作符</th><th>操作</th><th>示例</th></tr></thead><tbody><tr><td align="center">**</td><td>指数</td><td><code>2 ** 3 = 8</code></td></tr><tr><td align="center">%</td><td>取模/取余</td><td><code>22 % 8 = 6</code></td></tr><tr><td align="center">//</td><td>整数除法</td><td><code>22 // 8 = 2</code></td></tr><tr><td align="center">/</td><td>Division</td><td><code>22 / 8 = 2.75</code></td></tr><tr><td align="center">*</td><td>乘法</td><td><code>3 * 3 = 9</code></td></tr><tr><td align="center">-</td><td>减法</td><td><code>5 - 2 = 3</code></td></tr><tr><td align="center">+</td><td>加法</td><td><code>2 + 2 = 4</code></td></tr></tbody></table><p>在交互式shell中表达式示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">//</span> <span class="token number">7</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">23</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">16.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>数据类型</th><th>示例</th></tr></thead><tbody><tr><td>整数</td><td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td></tr><tr><td>浮点型</td><td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td></tr><tr><td>字符串</td><td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="字符串连接和重复"><a href="#字符串连接和重复" class="headerlink" title="字符串连接和重复"></a>字符串连接和重复</h3><p>字符串连接:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token string">'Bob'</span><span class="token string">'AliceBob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注释: 避免 + 操作符对字符串连接，提升格式化字符串。</p><p>字符串重复:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Alice'</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'AliceAliceAliceAliceAlice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>你能命名一个变量，只要符合以下规则：</p><ol><li>它只能是一个词。</li><li>它只能用字母、数字和下划线。</li><li>它不能以一个数字开头。</li><li>变量名以下划线开头可以作为特殊意义。</li></ol><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_spam</code> 不应当被再次用在代码中。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>行内注释:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># This is a comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行注释：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># This is a# multiline comment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>带注释的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意注释签的的两个空格。</p><p>函数文档字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This is a function docstring    You can also use:    ''' Function Docstring '''    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print() 函数"></a>print() 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span>Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>Hello world! <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="input-函数"><a href="#input-函数" class="headerlink" title="input() 函数"></a>input() 函数</h3><p>示例代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What is your name?'</span><span class="token punctuation">)</span>   <span class="token comment"># ask for their name</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> myName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'It is good to meet you, {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">)</span>What <span class="token keyword">is</span> your name?AlIt <span class="token keyword">is</span> good to meet you<span class="token punctuation">,</span> Al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="len-函数"><a href="#len-函数" class="headerlink" title="len() 函数"></a>len() 函数</h3><p>计算出一个字符串中字符数量为整数:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：字符串、列表、字典等是否为空的测试不应当用 len,而应该直接用布尔判断。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the list is not empty!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="str-int-和-float-函数"><a href="#str-int-和-float-函数" class="headerlink" title="str(), int(), 和 float() 函数"></a>str(), int(), 和 float() 函数</h3><p>整数转字符串或浮点型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token string">'29'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am {} years old.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>I am <span class="token number">29</span> years old<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token string">'-3.14'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>浮点型转整数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">7.7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><table><thead><tr><th>操作符</th><th>意义</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td></tr></tbody></table><p>这些操作结果是True或False依赖于你提供给它们的值。</p><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'hello'</span> <span class="token operator">==</span> <span class="token string">'Hello'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'dog'</span> <span class="token operator">!=</span> <span class="token string">'cat'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token string">'42'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔判断"><a href="#布尔判断" class="headerlink" title="布尔判断"></a>布尔判断</h3><p>绝不要用<code>==</code>或<code>!=</code>操作布尔判断。用 <code>is</code> 或 <code>is not</code>操作，或者用隐式布尔判断。</p><p>NO (即使它们是有效的Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token operator">!=</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>YES (即使它们是有效的Python):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">True</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些语句是等效的：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有这些也一样:</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; if a is False:&gt;&gt;&gt;    pass&gt;&gt;&gt; if a is not True:&gt;&gt;&gt;    pass&gt;&gt;&gt; if not a:&gt;&gt;&gt;    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><p>有三种布尔操作符： and, or, 和 not。</p><p>这是and操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>True and True</code></td><td><code>True</code></td></tr><tr><td><code>True and False</code></td><td><code>False</code></td></tr><tr><td><code>False and True</code></td><td><code>False</code></td></tr><tr><td><code>False and False</code></td><td><code>False</code></td></tr></tbody></table><p>这是 or 操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>True or True</code></td><td><code>True</code></td></tr><tr><td><code>True or False</code></td><td><code>True</code></td></tr><tr><td><code>False or True</code></td><td><code>True</code></td></tr><tr><td><code>False or False</code></td><td><code>False</code></td></tr></tbody></table><p>这是 not 操作符的真值表：</p><table><thead><tr><th>表达式</th><th>计算结果</th></tr></thead><tbody><tr><td><code>not True</code></td><td><code>False</code></td></tr><tr><td><code>not False</code></td><td><code>True</code></td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="混合布尔和比较操作符："><a href="#混合布尔和比较操作符：" class="headerlink" title="混合布尔和比较操作符："></a>混合布尔和比较操作符：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你也可以用多个布尔操作符在一个表达式，连同比较操作符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="else-语句"><a href="#else-语句" class="headerlink" title="else 语句"></a>else 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, stranger.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="elif-语句"><a href="#elif-语句" class="headerlink" title="elif 语句"></a>elif 语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Bob'</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Alice'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, Alice.'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are not Alice, kiddo.'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are neither Alice nor a little kid.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> spam <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span>    spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><p>如果执行到达一个 break 语句，它立即退出这个 while 循环子句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please type your name.'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'your name'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thank you!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p>当程序执行到达 continue 语句，这个程序执行立即跳回这个循环的开始。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Who are you?'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">'Joe'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, Joe. What is the password? (It is a fish.)'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">'swordfish'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Access granted.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="for-循环和-range-函数"><a href="#for-循环和-range-函数" class="headerlink" title="for 循环和 range() 函数"></a>for 循环和 range() 函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Jimmy Five Times ({})'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>My name <span class="token keyword">is</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Jimmy Five Times <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <em>range()</em> 函数也能用三个函数调用。开始的两个参数是开始和结束的值，第三个参数是步长。这个步长是每次迭代后变量增加的数量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你甚至可以用一个负数作为步长使for 循环计数递减而不是递增。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">4</span><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For-else-语句"><a href="#For-else-语句" class="headerlink" title="For else 语句"></a>For else 语句</h3><p>This allows to specify a statement to execute in case of the full loop has been executed. Only<br>useful when a <code>break</code> condition can occur in the loop:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"only executed when no item of the list is equal to 3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os<span class="token punctuation">,</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-sys-exit-提前结束一个程序"><a href="#使用-sys-exit-提前结束一个程序" class="headerlink" title="使用 sys.exit() 提前结束一个程序"></a>使用 sys.exit() 提前结束一个程序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Type exit to exit.'</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You typed {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>Hello AliceHello Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="返回值和返回语句"><a href="#返回值和返回语句" class="headerlink" title="返回值和返回语句"></a>返回值和返回语句</h3><p>当用 def 语句创建一个函数，你可以用 return 语句指定一个返回值。 一个 return 语句有下面的内容构成：</p><ul><li><p>return 关键字。</p></li><li><p>这个函数应当返回的值或者表达式。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>answerNumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> answerNumber <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is certain'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'It is decidedly so'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Yes'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Reply hazy try again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Ask again later'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Concentrate and ask again'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'My reply is no'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Outlook not so good'</span>    <span class="token keyword">elif</span> answerNumber <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Very doubtful'</span>r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>fortune <span class="token operator">=</span> getAnswer<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fortune<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span>Hello!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="关键字和-print"><a href="#关键字和-print" class="headerlink" title="关键字和 print()"></a>关键字和 print()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span>HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">)</span>cats dogs mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'mice'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>cats<span class="token punctuation">,</span>dogs<span class="token punctuation">,</span>mice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="局部和全局范围"><a href="#局部和全局范围" class="headerlink" title="局部和全局范围"></a>局部和全局范围</h3><ul><li><p>全局范围内的代码不能使用任何局部变量。</p></li><li><p>但是，一个局部作用于可以访问全局变量。</p></li><li><p>在一个函数的局部作用域的代码不能使用在任何其他局部作用域变量。</p></li><li><p>如果在不同的作用域你可以对不同的变量使用相同的名称。也就是说，可以有一个名为 spam 的局部变量和一个同样名为 spam 的全局变量。</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="一个全局语句"><a href="#一个全局语句" class="headerlink" title="一个全局语句"></a>一个全局语句</h3><p>如果你需要从一个函数中修改一个全局变量，用 global 语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">global</span> eggs<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     eggs <span class="token operator">=</span> <span class="token string">'spam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token string">'global'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有四个规则判断是否一个变量是在局部范围或全局范围：</p><ol><li><p>如果一个变量用在全局范围（即，所有函数外），那么它总是一个全局变量。</p></li><li><p>如果在一个函数中的变量前有 global 语句，它是一个全局变量。</p></li><li><p>否则，如果在函数中变量用来作为赋值语句，它是一个局部变量。</p></li><li><p>但是如果变量未在赋值语句中使用，它是一个全局变量。</p></li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="基本异常处理"><a href="#基本异常处理" class="headerlink" title="基本异常处理"></a>基本异常处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">21.0</span><span class="token number">3.5</span>Error<span class="token punctuation">:</span> Invalid argument<span class="token punctuation">:</span> division by zero<span class="token boolean">None</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="异常处理中的最终代码"><a href="#异常处理中的最终代码" class="headerlink" title="异常处理中的最终代码"></a>异常处理中的最终代码</h3><p>在 <code>finally</code> 区间的代码总是被执行，无论是否异常被抛出，即使未捕获到异常。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> <span class="token number">42</span> <span class="token operator">/</span> divideBy<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: Invalid argument: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- division finished --"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">21.0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Error<span class="token punctuation">:</span> Invalid Argument division by zero<span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token boolean">None</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>spam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span> division finished <span class="token operator">-</span><span class="token operator">-</span><span class="token number">42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="在带有索引的列表中获取特定的值"><a href="#在带有索引的列表中获取特定的值" class="headerlink" title="在带有索引的列表中获取特定的值"></a>在带有索引的列表中获取特定的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'cat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token string">'rat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="负数的索引"><a href="#负数的索引" class="headerlink" title="负数的索引"></a>负数的索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'elephant'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token string">'bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'The {} is afraid of the {}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'The elephant is afraid of the bat.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="以切片的方获取子列表"><a href="#以切片的方获取子列表" class="headerlink" title="以切片的方获取子列表"></a>以切片的方获取子列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切片完整列表将执行复制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2 <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam2<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-len-获取列表的长度"><a href="#用-len-获取列表的长度" class="headerlink" title="用 len() 获取列表的长度"></a>用 len() 获取列表的长度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用索引改变列表中的值"><a href="#用索引改变列表中的值" class="headerlink" title="用索引改变列表中的值"></a>用索引改变列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aardvark'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12345</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token string">'aardvark'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="列表连接和列表复制"><a href="#列表连接和列表复制" class="headerlink" title="列表连接和列表复制"></a>列表连接和列表复制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-del-语句移除列表中的值"><a href="#用-del-语句移除列表中的值" class="headerlink" title="用 del 语句移除列表中的值"></a>用 del 语句移除列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> spam<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="用-for-循环列表"><a href="#用-for-循环列表" class="headerlink" title="用 for 循环列表"></a>用 for 循环列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> supply <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Index {} in supplies is: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> supply<span class="token punctuation">)</span><span class="token punctuation">)</span>Index <span class="token number">0</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> pensIndex <span class="token number">1</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> staplersIndex <span class="token number">2</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> flame<span class="token operator">-</span>throwersIndex <span class="token number">3</span> <span class="token keyword">in</span> supplies <span class="token keyword">is</span><span class="token punctuation">:</span> binders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-zip-遍历多个列表"><a href="#使用-zip-遍历多个列表" class="headerlink" title="使用 zip() 遍历多个列表"></a>使用 zip() 遍历多个列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Pete'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Elizabeth'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is {} years old'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>Pete <span class="token keyword">is</span> <span class="token number">6</span> years oldJohn <span class="token keyword">is</span> <span class="token number">23</span> years oldElizabeth <span class="token keyword">is</span> <span class="token number">44</span> years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="in-和-not-in-操作符"><a href="#in-和-not-in-操作符" class="headerlink" title="in 和 not in 操作符"></a>in 和 not in 操作符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'howdy'</span><span class="token punctuation">,</span> <span class="token string">'heyas'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'howdy'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cat'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="多重赋值技巧"><a href="#多重赋值技巧" class="headerlink" title="多重赋值技巧"></a>多重赋值技巧</h3><p>多重赋值是一种快捷方式，可让您在一行代码中为多个变量分配列表中的值。因此，不要这样做：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> color <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> disposition <span class="token operator">=</span> cat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以输入以下代码行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> disposition <span class="token operator">=</span> cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多重赋值技巧也可以用来交换两个变量的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token string">'Alice'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="增强赋值操作符"><a href="#增强赋值操作符" class="headerlink" title="增强赋值操作符"></a>增强赋值操作符</h3><table><thead><tr><th>操作符</th><th>相当于</th></tr></thead><tbody><tr><td><code>spam += 1</code></td><td><code>spam = spam + 1</code></td></tr><tr><td><code>spam -= 1</code></td><td><code>spam = spam - 1</code></td></tr><tr><td><code>spam *= 1</code></td><td><code>spam = spam * 1</code></td></tr><tr><td><code>spam /= 1</code></td><td><code>spam = spam / 1</code></td></tr><tr><td><code>spam %= 1</code></td><td><code>spam = spam % 1</code></td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">+=</span> <span class="token string">' world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon <span class="token operator">*=</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bacon<span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Zophie'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-index-方法在列表中查找值"><a href="#使用-index-方法在列表中查找值" class="headerlink" title="使用 index() 方法在列表中查找值"></a>使用 index() 方法在列表中查找值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Fat-tail'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Pooka'</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-append-和-insert-方法在列表中添加值"><a href="#使用-append-和-insert-方法在列表中添加值" class="headerlink" title="使用 append() 和 insert() 方法在列表中添加值"></a>使用 append() 和 insert() 方法在列表中添加值</h3><p><strong>append()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'moose'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'moose'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insert()</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'chicken'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-remove-从列表中移除值"><a href="#使用-remove-从列表中移除值" class="headerlink" title="使用 remove() 从列表中移除值"></a>使用 remove() 从列表中移除值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'bat'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果该值在列表中出现多次，则只会删除该值的第一个实例。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-pop-移除列表中的值"><a href="#使用-pop-移除列表中的值" class="headerlink" title="使用 pop() 移除列表中的值"></a>使用 pop() 移除列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'elephant'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'cat'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'rat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-sort-方法排序列表中的值"><a href="#使用-sort-方法排序列表中的值" class="headerlink" title="使用 sort() 方法排序列表中的值"></a>使用 sort() 方法排序列表中的值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以为 reverse 关键字参数传递 True，以使 sort() 以相反的顺序对值进行排序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'elephants'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'ants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你需要以常规字母顺序对值进行排序，请在 sort() 方法传递 str.lower 关键字参数来调用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您可以使用内置函数 <code>sorted</code> 去返回一个新列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ants'</span><span class="token punctuation">,</span> <span class="token string">'badgers'</span><span class="token punctuation">,</span> <span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'dogs'</span><span class="token punctuation">,</span> <span class="token string">'elephants'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="元组数据类型"><a href="#元组数据类型" class="headerlink" title="元组数据类型"></a>元组数据类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> eggs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>元组和列表不同的主要方式是元组像字符串一样，不可变。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="使用-list-和-tuple-函数转变类型"><a href="#使用-list-和-tuple-函数转变类型" class="headerlink" title="使用 list() 和 tuple() 函数转变类型"></a>使用 list() 和 tuple() 函数转变类型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="字典和结构化数据"><a href="#字典和结构化数据" class="headerlink" title="字典和结构化数据"></a>字典和结构化数据</h2><p>字典示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myCat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'gray'</span><span class="token punctuation">,</span> <span class="token string">'disposition'</span><span class="token punctuation">:</span> <span class="token string">'loud'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="keys-values-和-items-方法"><a href="#keys-values-和-items-方法" class="headerlink" title="keys(), values() 和 items() 方法"></a>keys(), values() 和 items() 方法</h3><p>values():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>red<span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keys():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>colorage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>items():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 keys(), values() 和 items() 方法, for循环可以分别遍历字典中的键, 值 或者 键值对。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> spam<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Key: {} Value: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Key<span class="token punctuation">:</span> age Value<span class="token punctuation">:</span> <span class="token number">42</span>Key<span class="token punctuation">:</span> color Value<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="检查字典中是否存在键或值"><a href="#检查字典中是否存在键或值" class="headerlink" title="检查字典中是否存在键或值"></a>检查字典中是否存在键或值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'name'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Zophie'</span> <span class="token keyword">in</span> spam<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can omit the call to keys() when checking for a key</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">in</span> spam<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h3><p>获取具有两个参数：键和默认值（如果键不存在）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> picnic_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'cups'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} cups.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cups'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 2 cups.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I am bringing {} eggs.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>picnic_items<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eggs'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'I am bringing 0 eggs.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault() 方法"></a>setdefault() 方法</h3><p>让我们考虑下面的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">'color'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> spam<span class="token punctuation">:</span>    spam<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>setdefault</code> 我们能更简洁地写出同样的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="漂亮的打印"><a href="#漂亮的打印" class="headerlink" title="漂亮的打印"></a>漂亮的打印</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> message <span class="token operator">=</span> 'It was a bright cold day <span class="token keyword">in</span> April<span class="token punctuation">,</span> <span class="token keyword">and</span> the clocks were striking<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thirteen<span class="token punctuation">.</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> character <span class="token keyword">in</span> message<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>character<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>character<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a>合并两个字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in Python 3.5+:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">**</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment"># in Python 2.7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">**</span>y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合sets"><a href="#集合sets" class="headerlink" title="集合sets"></a>集合sets</h2><p>来自 Python 3 <a href="https://docs.python.org/3/tutorial/datastructures.html">文档</a></p><blockquote><p>集合是由不重复的元素组成的无序容器。基本用法包括成员检测和去除重复元素。集合对象也支持像合集，交集和差集对等差数学运算。</p></blockquote><h3 id="初始化一个集合"><a href="#初始化一个集合" class="headerlink" title="初始化一个集合"></a>初始化一个集合</h3><p>有两种方式创建集合：用花括号 <code>{}</code> 和内置函数 <code>set()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当创建一个空集合，确保不要使用大花括号 <code>{}</code> 否则你将得到一个空的字典。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sets-独特元素的无需结合。"><a href="#sets-独特元素的无需结合。" class="headerlink" title="sets: 独特元素的无需结合。"></a>sets: 独特元素的无需结合。</h3><p>一个集合自动移除所有重复的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为一个无序的数据类型，他们不能被索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> <span class="token string">'set'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置add-和update"><a href="#设置add-和update" class="headerlink" title="设置add() 和update()"></a>设置add() 和update()</h3><p>用 <code>add()</code> 方法我们能增加一个元素到集合中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>update()</code>, 更新多个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>  <span class="token comment"># remember, sets automatically remove duplicates</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置-remove-和-discard"><a href="#设置-remove-和-discard" class="headerlink" title="设置 remove() 和 discard()"></a>设置 remove() 和 discard()</h3><p>这两个方法将移除一个元素从集合，但是如果key 值不存在 <code>remove()</code> 将抛出一个 <code>key error</code> 。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>discard()</code> 不会抛出任何错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置union"><a href="#设置union" class="headerlink" title="设置union()"></a>设置union()</h3><p><code>union()</code> 或<code>|</code> 将创建一个包含所提供集合中的所有元素的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 | s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h3><p><code>intersection</code> 或 <code>&amp;</code> 将返回一个仅包含两个集合共有元素的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>  <span class="token comment"># or 's1 &amp; s2 &amp; s3'</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set difference"></a>set difference</h3><p><code>difference</code> 或<code>-</code> 将返回仅有一第一个集合（调用集合）仅有的唯一元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 - s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment"># or 's2 - s1'</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-symetric-difference"><a href="#set-symetric-difference" class="headerlink" title="set symetric_difference"></a>set symetric_difference</h3><p><code>symetric_difference</code> 或 <code>^</code> 将返回他们非共有的元素集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>  <span class="token comment"># or 's1 ^ s2'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="itertools-模块"><a href="#itertools-模块" class="headerlink" title="itertools 模块"></a>itertools 模块</h2><p><em>itertools</em> 模块是一个工具集合，这个工具旨在有效地快速高效使用内存当操作遍历器时（如 列表 或字典）。</p><p>来自Python3的官方文档：</p><blockquote><p>这个模块标准化了一个快速，内存高效的工具核心集，这些工具自身或者结合很有用。它们共同在纯Python中构成了一个“迭代器代数”使构建特殊的简洁高效工具成为可能。</p></blockquote><p> <em>itertools</em> 模块来自标准库，必须导入。</p><p><a href="https://docs.python.org/3/library/operator.html">operator</a> 模块也将被用到。这个模块不是必须的当用 itertools 时, 但对于下面这些例子是需要的。</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate()"></a>accumulate()</h3><p>制作一个返回函数结果的迭代器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">6</span><span class="token number">24</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>operator.mul 取两个数字，并将它们相乘。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">2</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">24</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递函数是可选的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">7</span><span class="token number">13</span><span class="token number">17</span><span class="token number">22</span><span class="token number">31</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果未指定函数，则对各项If no function is designated the items will be summed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">5</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token number">13</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token number">17</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token number">22</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token number">31</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><p>Just like combinations(), but allows individual elements to be repeated more than once.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations_with_replacement<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'circle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>Makes an iterator that returns evenly spaced values starting with number start.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">break</span><span class="token number">10</span><span class="token number">13</span><span class="token number">16</span><span class="token number">19</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="cycle"><a href="#cycle" class="headerlink" title="cycle()"></a>cycle()</h3><p>This function cycles through an iterator endlessly.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'violet'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>redorangeyellowgreenbluevioletredorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When reached the end of the iterable it start over again from the beginning.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="chain"><a href="#chain" class="headerlink" title="chain()"></a>chain()</h3><p>Take a series of iterables and return them as one long iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> shapes<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenbluecircletrianglesquarepentagon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="compress"><a href="#compress" class="headerlink" title="compress()"></a>compress()</h3><p>Filters one iterable with another.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>data<span class="token punctuation">,</span> selectors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'circle'</span><span class="token punctuation">,</span> <span class="token string">'triangle'</span><span class="token punctuation">,</span> <span class="token string">'square'</span><span class="token punctuation">,</span> <span class="token string">'pentagon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> selections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> selections<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>circlesquare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="dropwhile"><a href="#dropwhile" class="headerlink" title="dropwhile()"></a>dropwhile()</h3><p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="filterfalse"><a href="#filterfalse" class="headerlink" title="filterfalse()"></a>filterfalse()</h3><p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>filterfalse<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h3><p>Simply put, this function groups things together.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span>    <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> group <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>robots<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'faction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'blaster'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'galvatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>autobot<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jazz'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'metroplex'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'autobot'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>decepticon<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'megatron'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'starcream'</span><span class="token punctuation">,</span> <span class="token string">'faction'</span><span class="token punctuation">:</span> <span class="token string">'decepticon'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="islice"><a href="#islice" class="headerlink" title="islice()"></a>islice()</h3><p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> few_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> few_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><p>Creates the cartesian products from a series of iterables.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>num_data<span class="token punctuation">,</span> alpha_data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>This function will repeat an object over and over again. Unless, there is a times argument.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">[</span><span class="token punctuation">,</span> times<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>spamspamspam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="starmap"><a href="#starmap" class="headerlink" title="starmap()"></a>starmap()</h3><p>Makes an iterator that computes the function using arguments obtained from the iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">12</span><span class="token number">32</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile()"></a>takewhile()</h3><p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span>predicate<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> itertools<span class="token punctuation">.</span>takewhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> result<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="tee"><a href="#tee" class="headerlink" title="tee()"></a>tee()</h3><p>Return n independent iterators from a single iterable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> alpha_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> alpha_colors<span class="token punctuation">,</span> beta_colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>tee<span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> beta_colors<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>redorangeyellowgreenblue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="zip-longest"><a href="#zip-longest" class="headerlink" title="zip_longest()"></a>zip_longest()</h3><p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span><span class="token operator">*</span>iterables<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Comprehensions"><a href="#Comprehensions" class="headerlink" title="Comprehensions"></a>Comprehensions</h2><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set-comprehension"><a href="#Set-comprehension" class="headerlink" title="Set comprehension"></a>Set comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> b<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"ABC"</span><span class="token punctuation">,</span> <span class="token string">"DEF"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Dict-comprehension"><a href="#Dict-comprehension" class="headerlink" title="Dict comprehension"></a>Dict comprehension</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'Pooka'</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A List comprehension can be generated from a dictionary:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Oooka'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> c<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'NAME:POOKA'</span><span class="token punctuation">,</span> <span class="token string">'FIRST_NAME:OOOKA'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Manipulating-Strings"><a href="#Manipulating-Strings" class="headerlink" title="Manipulating Strings"></a>Manipulating Strings</h2><h3 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h3><table><thead><tr><th>Escape character</th><th>Prints as</th></tr></thead><tbody><tr><td><code>\'</code></td><td>Single quote</td></tr><tr><td><code>\"</code></td><td>Double quote</td></tr><tr><td><code>\t</code></td><td>Tab</td></tr><tr><td><code>\n</code></td><td>Newline (line break)</td></tr><tr><td><code>\\</code></td><td>Backslash</td></tr></tbody></table><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello there!\nHow are you?\nI\'m doing fine."</span><span class="token punctuation">)</span>Hello there!How are you?I'm doing fine<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Raw-Strings"><a href="#Raw-Strings" class="headerlink" title="Raw Strings"></a>Raw Strings</h3><p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'That is Carol\'s cat.'</span><span class="token punctuation">)</span>That <span class="token keyword">is</span> Carol\'s cat<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Note: mostly used for regular expression definition (see <code>re</code> package)</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Multiline-Strings-with-Triple-Quotes"><a href="#Multiline-Strings-with-Triple-Quotes" class="headerlink" title="Multiline Strings with Triple Quotes"></a>Multiline Strings with Triple Quotes</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt; Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,&gt;&gt;&gt; Bob'''</span><span class="token punctuation">)</span>Dear Alice<span class="token punctuation">,</span>Eve's cat has been arrested <span class="token keyword">for</span> catnapping<span class="token punctuation">,</span> cat burglary<span class="token punctuation">,</span> <span class="token keyword">and</span> extortion<span class="token punctuation">.</span>Sincerely<span class="token punctuation">,</span>Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> textwrap <span class="token keyword">import</span> dedent<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&gt;&gt;&gt;         Dear Alice,&gt;&gt;&gt;&gt;&gt;&gt;         Eve's cat has been arrested for catnapping, cat burglary, and extortion.&gt;&gt;&gt;&gt;&gt;&gt;         Sincerely,&gt;&gt;&gt;         Bob&gt;&gt;&gt;         '''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This generates the same string than before.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Indexing-and-Slicing-Strings"><a href="#Indexing-and-Slicing-Strings" class="headerlink" title="Indexing and Slicing Strings"></a>Indexing and Slicing Strings</h3><pre><code>H   e   l   l   o       w   o   r   l   d    !0   1   2   3   4   5   6   7   8   9   10   11</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'H'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token string">'o'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Slicing:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token string">'world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'Hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'!dlrow olleH'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz <span class="token operator">=</span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fizz<span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-in-and-not-in-Operators-with-Strings"><a href="#The-in-and-not-in-Operators-with-Strings" class="headerlink" title="The in and not in Operators with Strings"></a>The in and not in Operators with Strings</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span> <span class="token keyword">in</span> <span class="token string">'Hello'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span> <span class="token keyword">in</span> <span class="token string">'Hello World'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">''</span> <span class="token keyword">in</span> <span class="token string">'spam'</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'cats'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'cats and dogs'</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="The-in-and-not-in-Operators-with-list"><a href="#The-in-and-not-in-Operators-with-list" class="headerlink" title="The in and not in Operators with list"></a>The in and not in Operators with list</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">in</span> a<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">in</span> a<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-upper-lower-isupper-and-islower-String-Methods"><a href="#The-upper-lower-isupper-and-islower-String-Methods" class="headerlink" title="The upper(), lower(), isupper(), and islower() String Methods"></a>The upper(), lower(), isupper(), and islower() String Methods</h3><p><code>upper()</code> and <code>lower()</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'HELLO WORLD!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> spam<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token string">'hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>isupper() and islower():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'HELLO'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'12345'</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-isX-String-Methods"><a href="#The-isX-String-Methods" class="headerlink" title="The isX String Methods"></a>The isX String Methods</h3><ul><li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li><li><strong>isalnum()</strong> returns True if the string consists only of letters and numbers and is not blank.</li><li><strong>isdecimal()</strong> returns True if the string consists only of numeric characters and is not blank.</li><li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li><li><strong>istitle()</strong> returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.</li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-startswith-and-endswith-String-Methods"><a href="#The-startswith-and-endswith-String-Methods" class="headerlink" title="The startswith() and endswith() String Methods"></a>The startswith() and endswith() String Methods</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'abc123'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello world!'</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-join-and-split-String-Methods"><a href="#The-join-and-split-String-Methods" class="headerlink" title="The join() and split() String Methods"></a>The join() and split() String Methods</h3><p>join():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">,</span> <span class="token string">'rats'</span><span class="token punctuation">,</span> <span class="token string">'bats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'cats, rats, bats'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'My name is Simon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'MyABCnameABCisABCSimon'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>split():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'MyABCnameABCisABCSimon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'My name is Simon'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'My na'</span><span class="token punctuation">,</span> <span class="token string">'e is Si'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Justifying-Text-with-rjust-ljust-and-center"><a href="#Justifying-Text-with-rjust-ljust-and-center" class="headerlink" title="Justifying Text with rjust(), ljust(), and center()"></a>Justifying Text with rjust(), ljust(), and center()</h3><p>rjust() and ljust():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'     Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'               Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello World'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'         Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token string">'Hello     '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token string">'***************Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token string">'Hello---------------'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>center():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token string">'       Hello       '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token string">'=======Hello========'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Removing-Whitespace-with-strip-rstrip-and-lstrip"><a href="#Removing-Whitespace-with-strip-rstrip-and-lstrip" class="headerlink" title="Removing Whitespace with strip(), rstrip(), and lstrip()"></a>Removing Whitespace with strip(), rstrip(), and lstrip()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'    Hello World     '</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello World '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'    Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam <span class="token operator">=</span> <span class="token string">'SpamSpamBaconSpamEggsSpamSpam'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> spam<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'ampS'</span><span class="token punctuation">)</span><span class="token string">'BaconSpamEggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install"><a href="#Copying-and-Pasting-Strings-with-the-pyperclip-Module-need-pip-install" class="headerlink" title="Copying and Pasting Strings with the pyperclip Module (need pip install)"></a>Copying and Pasting Strings with the pyperclip Module (need pip install)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pyperclip<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pyperclip<span class="token punctuation">.</span>paste<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="String-Formatting"><a href="#String-Formatting" class="headerlink" title="String Formatting"></a>String Formatting</h2><h3 id="operator"><a href="#operator" class="headerlink" title="% operator"></a>% operator</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Pete'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token string">"Hello Pete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'I have %x apples'</span> <span class="token operator">%</span> num<span class="token string">"I have 5 apples"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Note: For new code, using <a href="#string-formatting-strformat">str.format</a> or <a href="#formatted-string-literals-or-f-strings-python-36">f-strings</a> (Python 3.6+) is strongly recommended over the <code>%</code> operator.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="String-Formatting-str-format"><a href="#String-Formatting-str-format" class="headerlink" title="String Formatting (str.format)"></a>String Formatting (str.format)</h3><p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'John'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">20</span>'<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {}, my age is {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"Hello I'm {0}, my age is {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token string">"Hello I'm John, my age is 20"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The official <a href="https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p><blockquote><p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p></blockquote><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Lazy-string-formatting"><a href="#Lazy-string-formatting" class="headerlink" title="Lazy string formatting"></a>Lazy string formatting</h3><p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,<br>the most common being logging:</p><p>Prefer:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"alice"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Over:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"User name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Formatted-String-Literals-or-f-strings-Python-3-6"><a href="#Formatted-String-Literals-or-f-strings-Python-3-6" class="headerlink" title="Formatted String Literals or f-strings (Python 3.6+)"></a>Formatted String Literals or f-strings (Python 3.6+)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Hello </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!'</span></span>'Hello Elizabeth!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>It is even possible to do inline arithmetic with it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f'Five plus ten is </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span><span class="token string"> and not </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span><span class="token string">'Five plus ten is 15 and not 30.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> string <span class="token keyword">import</span> Template<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">'Elizabeth'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">'Hey $name!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token string">'Hey Elizabeth!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><ol><li>Import the regex module with <code>import re</code>.</li><li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li><li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li><li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li></ol><p>All the regex functions in Python are in the re module:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Regex-Objects"><a href="#Matching-Regex-Objects" class="headerlink" title="Matching Regex Objects"></a>Matching Regex Objects</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Phone number found: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Phone number found<span class="token punctuation">:</span> <span class="token number">415</span><span class="token operator">-</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Grouping-with-Parentheses"><a href="#Grouping-with-Parentheses" class="headerlink" title="Grouping with Parentheses"></a>Grouping with Parentheses</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'My number is 415-555-4242.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'415'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'415-555-4242'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'415'</span><span class="token punctuation">,</span> <span class="token string">'555-4242'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> area_code<span class="token punctuation">,</span> main_number <span class="token operator">=</span> mo<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>area_code<span class="token punctuation">)</span><span class="token number">415</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>main_number<span class="token punctuation">)</span><span class="token number">555</span><span class="token operator">-</span><span class="token number">4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Multiple-Groups-with-the-Pipe"><a href="#Matching-Multiple-Groups-with-the-Pipe" class="headerlink" title="Matching Multiple Groups with the Pipe"></a>Matching Multiple Groups with the Pipe</h3><p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r’Batman|Tina Fey’ will match either ‘Batman’ or ‘Tina Fey’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hero_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span> <span class="token punctuation">(</span><span class="token string">r'Batman|Tina Fey'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batman and Tina Fey.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> hero_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Tina Fey and Batman.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Tina Fey'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also use the pipe to match one of several patterns as part of your regex:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(man|mobile|copter|bat)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Batmobile lost a wheel'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batmobile'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'mobile'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Optional-Matching-with-the-Question-Mark"><a href="#Optional-Matching-with-the-Question-Mark" class="headerlink" title="Optional Matching with the Question Mark"></a>Optional Matching with the Question Mark</h3><p>The ? character flags the group that precedes it as an optional part of the pattern.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)?man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Zero-or-More-with-the-Star"><a href="#Matching-Zero-or-More-with-the-Star" class="headerlink" title="Matching Zero or More with the Star"></a>Matching Zero or More with the Star</h3><p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)*man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-One-or-More-with-the-Plus"><a href="#Matching-One-or-More-with-the-Plus" class="headerlink" title="Matching One or More with the Plus"></a>Matching One or More with the Plus</h3><p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> bat_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Bat(wo)+man'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowowowoman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Batwowowowoman'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token operator">=</span> bat_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo3 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Specific-Repetitions-with-Curly-Brackets"><a href="#Matching-Specific-Repetitions-with-Curly-Brackets" class="headerlink" title="Matching Specific Repetitions with Curly Brackets"></a>Matching Specific Repetitions with Curly Brackets</h3><p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string ‘HaHaHa’, but it will not match ‘HaHa’, since the latter has only two repeats of the (Ha) group.</p><p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match ‘HaHaHa’, ‘HaHaHaHa’, and ‘HaHaHaHaHa’.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Ha'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Greedy-and-Nongreedy-Matching"><a href="#Greedy-and-Nongreedy-Matching" class="headerlink" title="Greedy and Nongreedy Matching"></a>Greedy and Nongreedy Matching</h3><p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1 <span class="token operator">=</span> greedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_ha_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(Ha){3,5}?'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2 <span class="token operator">=</span> nongreedy_ha_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'HaHaHaHaHa'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'HaHaHa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-findall-Method"><a href="#The-findall-Method" class="headerlink" title="The findall() Method"></a>The findall() Method</h3><p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d\d\d-\d\d\d-\d\d\d\d'</span><span class="token punctuation">)</span> <span class="token comment"># has no groups</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Cell: 415-555-9999 Work: 212-555-0000'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'415-555-9999'</span><span class="token punctuation">,</span> <span class="token string">'212-555-0000'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To summarize what the findall() method returns, remember the following:</p><ul><li><p>When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as [‘415-555-9999’, ‘212-555-0000’].</p></li><li><p>When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [(‘415’, ‘555’, ‘9999’), (‘212’, ‘555’, ‘0000’)].</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Making-Your-Own-Character-Classes"><a href="#Making-Your-Own-Character-Classes" class="headerlink" title="Making Your Own Character Classes"></a>Making Your Own Character Classes</h3><p>There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> vowel_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p><p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^aeiouAEIOU]'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> consonant_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Robocop eats baby food. BABY FOOD.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> '<span class="token string">', '</span><span class="token string">B', '</span><span class="token string">B', '</span>Y<span class="token string">', '</span> <span class="token string">', '</span><span class="token string-interpolation"><span class="token string">F', '</span></span>D<span class="token string">', '</span><span class="token punctuation">.</span>'<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Caret-and-Dollar-Sign-Characters"><a href="#The-Caret-and-Dollar-Sign-Characters" class="headerlink" title="The Caret and Dollar Sign Characters"></a>The Caret and Dollar Sign Characters</h3><ul><li><p>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</p></li><li><p>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</p></li><li><p>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</p></li></ul><p>The r’^Hello’ regular expression string matches strings that begin with ‘Hello’:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^Hello'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> begins_with_hello<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'He said hello.'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The r’\d$‘ regular expression string matches strings that end with a numeric character from 0 to 9:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\d+$'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>_sre<span class="token punctuation">.</span>SRE_Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">'1234567890'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12345xyz67890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> whole_string_is_num<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'12 34567890'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Wildcard-Character"><a href="#The-Wildcard-Character" class="headerlink" title="The Wildcard Character"></a>The Wildcard Character</h3><p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.at'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'The cat in the hat sat on the flat mat.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'sat'</span><span class="token punctuation">,</span> <span class="token string">'lat'</span><span class="token punctuation">,</span> <span class="token string">'mat'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Everything-with-Dot-Star"><a href="#Matching-Everything-with-Dot-Star" class="headerlink" title="Matching Everything with Dot-Star"></a>Matching Everything with Dot-Star</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'First Name: (.*) Last Name: (.*)'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> name_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'First Name: Al Last Name: Sweigart'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'Al'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'Sweigart'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nongreedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*?&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> nongreedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greedy_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo <span class="token operator">=</span> greedy_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'&lt;To serve man&gt; for dinner.&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Matching-Newlines-with-the-Dot-Character"><a href="#Matching-Newlines-with-the-Dot-Character" class="headerlink" title="Matching Newlines with the Dot Character"></a>Matching Newlines with the Dot Character</h3><p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no_newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> newline_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Serve the public trust.\nProtect the innocent.\nUphold the law.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Review-of-Regex-Symbols"><a href="#Review-of-Regex-Symbols" class="headerlink" title="Review of Regex Symbols"></a>Review of Regex Symbols</h3><table><thead><tr><th>Symbol</th><th>Matches</th></tr></thead><tbody><tr><td><code>?</code></td><td>zero or one of the preceding group.</td></tr><tr><td><code>*</code></td><td>zero or more of the preceding group.</td></tr><tr><td><code>+</code></td><td>one or more of the preceding group.</td></tr><tr><td><code>{n}</code></td><td>exactly n of the preceding group.</td></tr><tr><td><code>{n,}</code></td><td>n or more of the preceding group.</td></tr><tr><td><code>{,m}</code></td><td>0 to m of the preceding group.</td></tr><tr><td><code>{n,m}</code></td><td>at least n and at most m of the preceding p.</td></tr><tr><td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td><td>performs a nongreedy match of the preceding p.</td></tr><tr><td><code>^spam</code></td><td>means the string must begin with spam.</td></tr><tr><td><code>spam$</code></td><td>means the string must end with spam.</td></tr><tr><td><code>.</code></td><td>any character, except newline characters.</td></tr><tr><td><code>\d</code>, <code>\w</code>, and <code>\s</code></td><td>a digit, word, or space character, respectively.</td></tr><tr><td><code>\D</code>, <code>\W</code>, and <code>\S</code></td><td>anything except a digit, word, or space, respectively.</td></tr><tr><td><code>[abc]</code></td><td>any character between the brackets (such as a, b, ).</td></tr><tr><td><code>[^abc]</code></td><td>any character that isn’t between the brackets.</td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Case-Insensitive-Matching"><a href="#Case-Insensitive-Matching" class="headerlink" title="Case-Insensitive Matching"></a>Case-Insensitive Matching</h3><p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'robocop'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Robocop is part man, part machine, all cop.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'ROBOCOP protects the innocent.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'ROBOCOP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> robocop<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Al, why does your programming book talk about robocop so much?'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'robocop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Substituting-Strings-with-the-sub-Method"><a href="#Substituting-Strings-with-the-sub-Method" class="headerlink" title="Substituting Strings with the sub() Method"></a>Substituting Strings with the sub() Method</h3><p>The sub() method for Regex objects is passed two arguments:</p><ol><li>The first argument is a string to replace any matches.</li><li>The second is the string for the regular expression.</li></ol><p>The sub() method returns a string with the substitutions applied:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent \w+'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'CENSORED'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice gave the secret documents to Agent Bob.'</span><span class="token punctuation">)</span><span class="token string">'CENSORED gave the secret documents to CENSORED.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Another example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Agent (\w)\w*'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> agent_names_regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\1****'</span><span class="token punctuation">,</span> <span class="token string">'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'</span><span class="token punctuation">)</span>A<span class="token operator">**</span><span class="token operator">**</span> told C<span class="token operator">**</span><span class="token operator">**</span> that E<span class="token operator">**</span><span class="token operator">**</span> knew B<span class="token operator">**</span><span class="token operator">**</span> was a double agent<span class="token punctuation">.</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Managing-Complex-Regexes"><a href="#Managing-Complex-Regexes" class="headerlink" title="Managing Complex Regexes"></a>Managing Complex Regexes</h3><p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p><p>Now instead of a hard-to-read regular expression like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>you can spread the regular expression over multiple lines with comments like this:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phone_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">r'''(    (\d{3}|\(\d{3}\))?            # area code    (\s|-|\.)?                    # separator    \d{3}                         # first 3 digits    (\s|-|\.)                     # separator    \d{4}                         # last 4 digits    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension    )'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Handling-File-and-Directory-Paths"><a href="#Handling-File-and-Directory-Paths" class="headerlink" title="Handling File and Directory Paths"></a>Handling File and Directory Paths</h2><p>There are two main modules in Python that deals with path manipulation.<br>One is the <code>os.path</code> module and the other is the <code>pathlib</code> module.<br>The <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way<br>to handle file system paths.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux"><a href="#Backslash-on-Windows-and-Forward-Slash-on-OS-X-and-Linux" class="headerlink" title="Backslash on Windows and Forward Slash on OS X and Linux"></a>Backslash on Windows and Forward Slash on OS X and Linux</h3><p>On Windows, paths are written using backslashes (<code>\</code>) as the separator between<br>folder names. On Unix based operating system such as macOS, Linux, and BSDs,<br>the forward slash (<code>/</code>) is used as the path separator. Joining paths can be<br>a headache if your code needs to work on different platforms.</p><p>Fortunately, Python provides easy ways to handle this. We will showcase<br>how to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token string">'usr\\bin\\spam'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>And using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">'spam'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">'bin'</span> <span class="token operator">/</span> <span class="token string">'spam'</span><span class="token punctuation">)</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>spam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Notice the path separator is different between Windows and Unix based operating<br>system, that’s why you want to use one of the above methods instead of<br>adding strings together to join paths together.</p><p>Joining paths is helpful if you need to create different file paths under<br>the same directory.</p><p>Using <code>os.path.join</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Users\\asweigart'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\Users\asweigart\accounts<span class="token punctuation">.</span>txtC<span class="token punctuation">:</span>\Users\asweigart\details<span class="token punctuation">.</span>csvC<span class="token punctuation">:</span>\Users\asweigart\invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> my_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accounts.txt'</span><span class="token punctuation">,</span> <span class="token string">'details.csv'</span><span class="token punctuation">,</span> <span class="token string">'invite.docx'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> home <span class="token operator">=</span> Path<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> my_files<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>home <span class="token operator">/</span> filename<span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>accounts<span class="token punctuation">.</span>txt<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>details<span class="token punctuation">.</span>csv<span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">/</span>invite<span class="token punctuation">.</span>docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="The-Current-Working-Directory"><a href="#The-Current-Working-Directory" class="headerlink" title="The Current Working Directory"></a>The Current Working Directory</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Python34'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'C:\\Windows\\System32'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> os <span class="token keyword">import</span> chdir<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chdir<span class="token punctuation">(</span><span class="token string">'/usr/lib/python3.6'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Creating-New-Folders"><a href="#Creating-New-Folders" class="headerlink" title="Creating New Folders"></a>Creating New Folders</h3><p>Using <code>os</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'C:\\delicious\\walnut\\waffles'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">1226</span><span class="token punctuation">,</span> <span class="token keyword">in</span> mkdir    self<span class="token punctuation">.</span>_accessor<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python3.6/pathlib.py"</span><span class="token punctuation">,</span> line <span class="token number">387</span><span class="token punctuation">,</span> <span class="token keyword">in</span> wrapped    <span class="token keyword">return</span> strfunc<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>pathobj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory<span class="token punctuation">:</span> <span class="token string">'/home/asweigart/delicious/walnut/waffles'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oh no, we got a nasty error! The reason is that the ‘delicious’ directory does<br>not exist, so we cannot make the ‘walnut’ and the ‘waffles’ directories under<br>it. To fix this, do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cwd <span class="token operator">=</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>cwd <span class="token operator">/</span> <span class="token string">'delicious'</span> <span class="token operator">/</span> <span class="token string">'walnut'</span> <span class="token operator">/</span> <span class="token string">'waffles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And all is good :)</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Absolute-vs-Relative-Paths"><a href="#Absolute-vs-Relative-Paths" class="headerlink" title="Absolute vs. Relative Paths"></a>Absolute vs. Relative Paths</h3><p>There are two ways to specify a file path.</p><ul><li>An absolute path, which always begins with the root folder</li><li>A relative path, which is relative to the program’s current working directory</li></ul><p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Handling-Absolute-and-Relative-Paths"><a href="#Handling-Absolute-and-Relative-Paths" class="headerlink" title="Handling Absolute and Relative Paths"></a>Handling Absolute and Relative Paths</h3><p>To see if a path is an absolute path:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isabs<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'/home/asweigart'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token string">'/home'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span class="token operator">/</span>asweigart<span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can get a relative path from a starting path to another path.</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token string">'etc/passwd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>relative_to<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>etc<span class="token operator">/</span>passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Checking-Path-Validity"><a href="#Checking-Path-Validity" class="headerlink" title="Checking Path Validity"></a>Checking Path Validity</h3><p>Checking if a file/directory exists:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/etc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a file:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'nonexistentfile'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Checking if a path is a directory:</p><p>Using <code>os.path</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'setup.py'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Path<span class="token punctuation">(</span><span class="token string">'/spam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Finding-File-Sizes-and-Folder-Contents"><a href="#Finding-File-Sizes-and-Folder-Contents" class="headerlink" title="Finding File Sizes and Folder Contents"></a>Finding File Sizes and Folder Contents</h3><p>Getting a file’s size in bytes:</p><p>Using <code>os.path</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32\\calc.exe'</span><span class="token punctuation">)</span><span class="token number">776192</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> stat <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">'/bin/python3.6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span> <span class="token comment"># stat contains some other information about the file as well</span>os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">33261</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">141087</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">2051</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">10024</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1517725562</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1515119809</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1517261276</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span> <span class="token comment"># size in bytes</span><span class="token number">10024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>os.listdir</code> on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'0409'</span><span class="token punctuation">,</span> <span class="token string">'12520437.cpx'</span><span class="token punctuation">,</span> <span class="token string">'12520850.cpx'</span><span class="token punctuation">,</span> <span class="token string">'5U877.ax'</span><span class="token punctuation">,</span> <span class="token string">'aaclient.dll'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token string">'xwtpdui.dll'</span><span class="token punctuation">,</span> <span class="token string">'xwtpw32.dll'</span><span class="token punctuation">,</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token string">'zh-HK'</span><span class="token punctuation">,</span> <span class="token string">'zh-TW'</span><span class="token punctuation">,</span> <span class="token string">'zipfldr.dll'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Listing directory contents using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>tiff2rgba<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>iconv<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>ldd<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>cache_restore<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>udiskie<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>unix2dos<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>t1reencode<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>epstopdf<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>idle3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To find the total size of all the files in this directory:</p><p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to<br>check for whether a path is a file or directory using the methods in the methods discussed in the above section!</p><p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      total_size <span class="token operator">=</span> total_size <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'C:\\Windows\\System32'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1117846456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Using <code>pathlib</code> on *nix:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total_size <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> sub_path <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">'/usr/bin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     total_size <span class="token operator">+=</span> sub_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token number">1903178911</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Copying-Files-and-Folders"><a href="#Copying-Files-and-Folders" class="headerlink" title="Copying Files and Folders"></a>Copying Files and Folders</h3><p>The shutil module provides functions for copying files, as well as entire folders.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'C:\\spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\spam.txt'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'eggs.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\delicious\\eggs2.txt'</span><span class="token punctuation">)</span>   <span class="token string">'C:\\delicious\\eggs2.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">'C:\\bacon'</span><span class="token punctuation">,</span> <span class="token string">'C:\\bacon_backup'</span><span class="token punctuation">)</span><span class="token string">'C:\\bacon_backup'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Moving-and-Renaming-Files-and-Folders"><a href="#Moving-and-Renaming-Files-and-Folders" class="headerlink" title="Moving and Renaming Files and Folders"></a>Moving and Renaming Files and Folders</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shutil<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs\\new_bacon.txt'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs\\new_bacon.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'C:\\bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\eggs'</span><span class="token punctuation">)</span><span class="token string">'C:\\eggs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Permanently-Deleting-Files-and-Folders"><a href="#Permanently-Deleting-Files-and-Folders" class="headerlink" title="Permanently Deleting Files and Folders"></a>Permanently Deleting Files and Folders</h3><ul><li><p>Calling os.unlink(path) or Path.unlink() will delete the file at path.</p></li><li><p>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</p></li><li><p>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</p></li></ul><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Safe-Deletes-with-the-send2trash-Module"><a href="#Safe-Deletes-with-the-send2trash-Module" class="headerlink" title="Safe Deletes with the send2trash Module"></a>Safe Deletes with the send2trash Module</h3><p>You can install this module by running pip install send2trash from a Terminal window.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> send2trash<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span> <span class="token comment"># creates the file</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Walking-a-Directory-Tree"><a href="#Walking-a-Directory-Tree" class="headerlink" title="Walking a Directory Tree"></a>Walking a Directory Tree</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> folder_name<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'C:\\delicious'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The current folder is {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> subfolder <span class="token keyword">in</span> subfolders<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SUBFOLDER OF {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> subfolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'FILE INSIDE {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>The current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\deliciousSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> catsSUBFOLDER OF C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> walnutFILE INSIDE C<span class="token punctuation">:</span>\delicious<span class="token punctuation">:</span> spam<span class="token punctuation">.</span>txtThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\catsFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> catnames<span class="token punctuation">.</span>txtFILE INSIDE C<span class="token punctuation">:</span>\delicious\cats<span class="token punctuation">:</span> zophie<span class="token punctuation">.</span>jpgThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnutSUBFOLDER OF C<span class="token punctuation">:</span>\delicious\walnut<span class="token punctuation">:</span> wafflesThe current folder <span class="token keyword">is</span> C<span class="token punctuation">:</span>\delicious\walnut\wafflesFILE INSIDE C<span class="token punctuation">:</span>\delicious\walnut\waffles<span class="token punctuation">:</span> butter<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><p><code>pathlib</code> provides a lot more functionality than the ones listed above,<br>like getting file name, getting file extension, reading/writing a file without<br>manually opening it, etc. Check out the<br><a href="https://docs.python.org/3/library/pathlib.html">official documentation</a><br>if you want to know more!</p><h2 id="Reading-and-Writing-Files"><a href="#Reading-and-Writing-Files" class="headerlink" title="Reading and Writing Files"></a>Reading and Writing Files</h2><h3 id="The-File-Reading-Writing-Process"><a href="#The-File-Reading-Writing-Process" class="headerlink" title="The File Reading/Writing Process"></a>The File Reading/Writing Process</h3><p>To read/write to a file in Python, you will want to use the <code>with</code><br>statement, which will close the file for you after you are done.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Opening-and-reading-files-with-the-open-function"><a href="#Opening-and-reading-files-with-the-open-function" class="headerlink" title="Opening and reading files with the open() function"></a>Opening and reading files with the open() function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\your_home_folder\\hello.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hello_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     hello_content <span class="token operator">=</span> hello_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello_content<span class="token string">'Hello World!'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     sonnet_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men<span class="token string">'s eyes,\n'</span><span class="token punctuation">,</span> ' I <span class="token builtin">all</span> alone beweep myoutcast state<span class="token punctuation">,</span>\n<span class="token string">', And trouble deaf heaven with my bootless cries,\n'</span><span class="token punctuation">,</span> Andlook upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span>'<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># You can also iterate through the file line by line:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'sonnet29.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sonnet_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> sonnet_file<span class="token punctuation">:</span> <span class="token comment"># note the new line character will be included in the line</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>When<span class="token punctuation">,</span> <span class="token keyword">in</span> disgrace <span class="token keyword">with</span> fortune <span class="token keyword">and</span> men's eyes<span class="token punctuation">,</span>I <span class="token builtin">all</span> alone beweep my outcast state<span class="token punctuation">,</span>And trouble deaf heaven <span class="token keyword">with</span> my bootless cries<span class="token punctuation">,</span>And look upon myself <span class="token keyword">and</span> curse my fate<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Writing-to-Files"><a href="#Writing-to-Files" class="headerlink" title="Writing to Files"></a>Writing to Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello world!\n'</span><span class="token punctuation">)</span><span class="token number">13</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     bacon_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Bacon is not a vegetable.'</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bacon_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     content <span class="token operator">=</span> bacon_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>Hello world!Bacon <span class="token keyword">is</span> <span class="token keyword">not</span> a vegetable<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Saving-Variables-with-the-shelve-Module"><a href="#Saving-Variables-with-the-shelve-Module" class="headerlink" title="Saving Variables with the shelve Module"></a>Saving Variables with the shelve Module</h3><p>To save variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> shelve<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To open and read variables:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'shelve.DbfilenameShelf'</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf_file<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>shelf_file<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cats'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Saving-Variables-with-the-pprint-pformat-Function"><a href="#Saving-Variables-with-the-pprint-pformat-Function" class="headerlink" title="Saving Variables with the pprint.pformat() Function"></a>Saving Variables with the pprint.pformat() Function</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> pprint<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zophie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span> <span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token string">"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     file_obj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = {}\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Reading-ZIP-Files"><a href="#Reading-ZIP-Files" class="headerlink" title="Reading ZIP Files"></a>Reading ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     spam_info <span class="token operator">=</span> example_zip<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Compressed file is %sx smaller!'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>spam_info<span class="token punctuation">.</span>file_size <span class="token operator">/</span> spam_info<span class="token punctuation">.</span>compress_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/'</span><span class="token punctuation">,</span> <span class="token string">'cats/catnames.txt'</span><span class="token punctuation">,</span> <span class="token string">'cats/zophie.jpg'</span><span class="token punctuation">]</span><span class="token number">13908</span><span class="token number">3828</span><span class="token string">'Compressed file is 3.63x smaller!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Extracting-from-ZIP-Files"><a href="#Extracting-from-ZIP-Files" class="headerlink" title="Extracting from ZIP Files"></a>Extracting from ZIP Files</h3><p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'C:\\'</span><span class="token punctuation">)</span>    <span class="token comment"># move to the folder with example.zip</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     example_zip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'example.zip'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> example_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>example_zip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> <span class="token string">'C:\\some\\new\\folders'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'C:\\spam.txt'</span><span class="token string">'C:\\some\\new\\folders\\spam.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Creating-and-Adding-to-ZIP-Files"><a href="#Creating-and-Adding-to-ZIP-Files" class="headerlink" title="Creating and Adding to ZIP Files"></a>Creating and Adding to ZIP Files</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> zipfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> new_zip<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     new_zip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'spam.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="JSON-YAML-and-configuration-files"><a href="#JSON-YAML-and-configuration-files" class="headerlink" title="JSON, YAML and configuration files"></a>JSON, YAML and configuration files</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>Open a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Write a JSON file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsoncontent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Joe"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.<br>It is a convenient choice for configuration files where humans will have to edit it.</p><p>There are two main libraries allowing to access to YAML files:</p><ul><li><a href="https://pypi.python.org/pypi/PyYAML">PyYaml</a></li><li><a href="https://pypi.python.org/pypi/ruamel.yaml">Ruamel.yaml</a></li></ul><p>Install them using <code>pip install</code> in your virtual environment.</p><p>The first one it easier to use but the second one, Ruamel, implements much better the YAML<br>specification, and allow for example to modify a YAML content without altering comments.</p><p>Open a YAML file with:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ruamel<span class="token punctuation">.</span>yaml <span class="token keyword">import</span> YAML<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"filename.yaml"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    yaml<span class="token operator">=</span>YAML<span class="token punctuation">(</span><span class="token punctuation">)</span>    yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Anyconfig"><a href="#Anyconfig" class="headerlink" title="Anyconfig"></a>Anyconfig</h3><p><a href="https://pypi.python.org/pypi/anyconfig">Anyconfig</a> is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p><p>Install it with:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> anyconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Usage:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> anyconfigconf1 <span class="token operator">=</span> anyconfig<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/path/to/foo/conf.d/a.yml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><h3 id="Raising-Exceptions"><a href="#Raising-Exceptions" class="headerlink" title="Raising Exceptions"></a>Raising Exceptions</h3><p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p><ul><li>The raise keyword</li><li>A call to the Exception() function</li><li>A string with a helpful error message passed to the Exception() function</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#191&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> This <span class="token keyword">is</span> the error message<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">box_print</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Symbol must be a single character string.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Width must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> height <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Height must be greater than 2.'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>symbol <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token keyword">for</span> sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ZZ'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        box_print<span class="token punctuation">(</span>sym<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception happened: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Getting-the-Traceback-as-a-String"><a href="#Getting-the-Traceback-as-a-String" class="headerlink" title="Getting the Traceback as a String"></a>Getting the Traceback as a String</h3><p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> traceback<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'This is the error message.'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'errorInfo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> error_file<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>          error_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The traceback info was written to errorInfo.txt.'</span><span class="token punctuation">)</span><span class="token number">116</span>The traceback info was written to errorInfo<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p><pre><code>Traceback (most recent call last):  File "&lt;pyshell#28&gt;", line 2, in &lt;module&gt;Exception: This is the error message.</code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h3><p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p><ul><li>The assert keyword</li><li>A condition (that is, an expression that evaluates to True or False)</li><li>A comma</li><li>A string to display when the condition is False</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'open'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pod_bay_door_status <span class="token operator">=</span> <span class="token string">'I\'m sorry, Dave. I\'m afraid I can\'t do that.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;pyshell#10&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    <span class="token keyword">assert</span> pod_bay_door_status <span class="token operator">==</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'The pod bay doors need to be "open".'</span>AssertionError<span class="token punctuation">:</span> The pod bay doors need to be <span class="token string">"open"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p><p>Disabling Assertions</p><p>Assertions can be disabled by passing the -O option when running Python.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s - %(levelname)s- %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of program'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'Start of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     total <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         total <span class="token operator">*=</span> i<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'i is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', total is '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of factorial(%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">return</span> total<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'End of program'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of program<span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">664</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> Start of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">665</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">668</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">670</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">2</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">673</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">3</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">675</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">4</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">678</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> i <span class="token keyword">is</span> <span class="token number">5</span><span class="token punctuation">,</span> total <span class="token keyword">is</span> <span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">680</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">684</span> <span class="token operator">-</span> DEBUG <span class="token operator">-</span> End of program<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging-Levels"><a href="#Logging-Levels" class="headerlink" title="Logging Levels"></a>Logging Levels</h3><p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p><table><thead><tr><th>Level</th><th>Logging Function</th><th>Description</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td><code>logging.debug()</code></td><td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td></tr><tr><td><code>INFO</code></td><td><code>logging.info()</code></td><td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td></tr><tr><td><code>WARNING</code></td><td><code>logging.warning()</code></td><td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td></tr><tr><td><code>ERROR</code></td><td><code>logging.error()</code></td><td>Used to record an error that caused the program to fail to do something.</td></tr><tr><td><code>CRITICAL</code></td><td><code>logging.critical()</code></td><td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td></tr></tbody></table><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Disabling-Logging"><a href="#Disabling-Logging" class="headerlink" title="Disabling Logging"></a>Disabling Logging</h3><p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> logging<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">' %(asctime)s -%(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">054</span> <span class="token operator">-</span> CRITICAL <span class="token operator">-</span> Critical error! Critical error!<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'Critical error! Critical error!'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error! Error!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Logging-to-a-File"><a href="#Logging-to-a-File" class="headerlink" title="Logging to a File"></a>Logging to a File</h3><p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'myProgramLog.txt'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h2><p>这个函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等于这个 <em>lambda</em> 函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至不需要将其绑定到像add的前边：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>像常规的嵌套函数， lambdas  也可以用作词法闭包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">make_adder</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5 <span class="token operator">=</span> make_adder<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plus_5<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： lambda 只能求值一个表达式，就像单行代码一样，</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Ternary-Conditional-Operator"><a href="#Ternary-Conditional-Operator" class="headerlink" title="Ternary Conditional Operator"></a>Ternary Conditional Operator</h2><p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p><pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;</code></pre><p>Example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>kid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ternary operators can be chained:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token keyword">else</span> <span class="token string">'teenager'</span> <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token keyword">else</span> <span class="token string">'adult'</span><span class="token punctuation">)</span>teenager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The code above is equivalent to:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="args and kwargs"></a>args and kwargs</h2><p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p><ol><li><p>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&lt;name&gt;</code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</p></li><li><p>In a function call, <code>*</code> means “unpack tuple or list named <code>&lt;name&gt;</code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</p></li></ol><p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p><p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruits</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> fruit <span class="token keyword">in</span> args<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruits<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"grapes"</span><span class="token punctuation">)</span><span class="token string">"apples"</span><span class="token string">"bananas"</span><span class="token string">"grapes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fruit</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0}: {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> fruit<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span>name<span class="token punctuation">:</span> applecolor<span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> kwarg2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwarg2<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span><span class="token operator">*</span>data2<span class="token punctuation">,</span> kwarg1<span class="token operator">=</span><span class="token string">"python"</span><span class="token punctuation">,</span>kwarg2<span class="token operator">=</span><span class="token string">"cheatsheet"</span><span class="token punctuation">,</span><span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>pythoncheatsheet<span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">**</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token comment"># If you do not specify ** for kwargs</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> show<span class="token punctuation">(</span><span class="token operator">*</span>data1<span class="token punctuation">,</span> <span class="token operator">*</span>data2<span class="token punctuation">,</span> <span class="token operator">*</span>data3<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token boolean">None</span><span class="token boolean">None</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Things-to-Remember-args"><a href="#Things-to-Remember-args" class="headerlink" title="Things to Remember(args)"></a>Things to Remember(args)</h3><ol><li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li><li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li><li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li><li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li></ol><h3 id="Things-to-Remember-kwargs"><a href="#Things-to-Remember-kwargs" class="headerlink" title="Things to Remember(kwargs)"></a>Things to Remember(kwargs)</h3><ol><li>Function arguments can be specified by position or by keyword.</li><li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li><li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li><li>Optional keyword arguments should always be passed by keyword instead of by position.</li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><p>While Python’s context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p><h3 id="with-statement"><a href="#with-statement" class="headerlink" title="with statement"></a>with statement</h3><p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p><p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     file_contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># the open_file object has automatically been closed.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Anything that ends execution of the block causes the context manager’s exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p><h3 id="Writing-your-own-contextmanager-using-generator-syntax"><a href="#Writing-your-own-contextmanager-using-generator-syntax" class="headerlink" title="Writing your own contextmanager using generator syntax"></a>Writing your own contextmanager using generator syntax</h3><p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> contextlib<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @contextlib<span class="token punctuation">.</span>contextmanager<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">context_manager</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Enter'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">yield</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">with</span> context_manager<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cm<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># the following instructions are run when the 'yield' point of the context</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># manager is reached.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># 'cm' will have the value that was yielded</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Right in the middle with cm = {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span>EnterRight <span class="token keyword">in</span> the middle <span class="token keyword">with</span> cm <span class="token operator">=</span> <span class="token number">3</span>Exit<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="main-Top-level-script-environment"><a href="#main-Top-level-script-environment" class="headerlink" title="__main__ Top-level script environment"></a><code>__main__</code> Top-level script environment</h2><p><code>__main__</code> is the name of the scope in which top-level code executes.<br>A module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p><p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># execute only if run as a script</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m</p><p>For example we are developing script which is designed to be used as module, we should do:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Python program to execute function directly</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># we can test it by calling the function save it as calculate.py</span><span class="token number">30</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Now if we want to use that module by importing we have to comment out our call,</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Instead we can write like this in calculate.py</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> calculate<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> calculate<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ol><li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li><li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li><li>Python files can act as either reusable modules, or as standalone programs.</li><li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li></ol><p>[_返回顶部_](#Python 备忘录)</p><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p><p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p><p>This allows you to easily install Python packages. Often it’s enough to write:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and module will install itself.</p><p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> setup<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token operator">=</span><span class="token string">'pythonCheatsheet'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    version<span class="token operator">=</span><span class="token string">'0.1'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'pipenv'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    license<span class="token operator">=</span><span class="token string">'MIT'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    long_description<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'README.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Find more information visit <a href="http://docs.python.org/install/index.html">http://docs.python.org/install/index.html</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Dataclasses"><a href="#Dataclasses" class="headerlink" title="Dataclasses"></a>Dataclasses</h2><p><code>Dataclasses</code> are python classes but are suited for storing data objects.<br>This module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li><p>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</p></li><li><p>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</p></li></ol><p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p><p>python 2.7</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>with dataclass</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>val<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h3 id="Default-values"><a href="#Default-values" class="headerlink" title="Default values"></a>Default values</h3><p>It is easy to add default values to the fields of your data class.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     count<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     price<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj <span class="token operator">=</span> Product<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>namePython<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>count<span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>price<span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Type-hints"><a href="#Type-hints" class="headerlink" title="Type hints"></a>Type hints</h3><p>It is mandatory to define the data type in dataclass. However, If you don’t want specify the datatype then, use <code>typing.Any</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @dataclass<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">class</span> <span class="token class-name">WithoutExplicitTypes</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    name<span class="token punctuation">:</span> Any<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    value<span class="token punctuation">:</span> Any <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[_返回顶部_](#Python 备忘录)</p><h2 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h2><p>The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><ol><li><p>Install virtualenv</p><pre><code> pip install virtualenv</code></pre></li><li><p>Install virtualenvwrapper-win (Windows)</p><pre><code> pip install virtualenvwrapper-win</code></pre></li></ol><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> mkvirtualenv HelloWold</code></pre><p> Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p></li><li><p>Set Project Directory</p><p> To bind our virtualenv with our current working directory we simply enter:</p><pre><code> setprojectdir .</code></pre></li><li><p>Deactivate</p><p> To move onto something else in the command line type ‘deactivate’ to deactivate your environment.</p><pre><code> deactivate</code></pre><p> Notice how the parenthesis disappear.</p></li><li><p>Workon</p><p> Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder</p><pre><code> workon HelloWold</code></pre></li></ol><p>[_返回顶部_](#Python 备忘录)</p><h3 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a>poetry</h3><blockquote><p><a href="https://poetry.eustace.io/">Poetry</a> is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p></blockquote><ol><li><p>Install Poetry</p><pre><code> pip install --user poetry</code></pre></li><li><p>Create a new project</p><pre><code> poetry new my-project</code></pre><p> This will create a my-project directory:</p><pre><code> my-project ├── pyproject.toml ├── README.rst ├── poetry_demo │   └── __init__.py └── tests     ├── __init__.py     └── test_poetry_demo.py</code></pre><p> The pyproject.toml file will orchestrate your project and its dependencies:</p><pre><code> [tool.poetry] name = "my-project" version = "0.1.0" description = "" authors = ["your name &lt;your@mail.com&gt;"] [tool.poetry.dependencies] python = "*" [tool.poetry.dev-dependencies] pytest = "^3.4"</code></pre></li><li><p>Packages</p><p> To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p><pre><code> [tool.poetry.dependencies] pendulum = "^1.4"</code></pre><p> Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p><pre><code> $ poetry add pendulum</code></pre><p> To install the dependencies listed in the pyproject.toml:</p><pre><code> poetry install</code></pre><p> To remove dependencies:</p><pre><code> poetry remove pendulum</code></pre></li></ol><p>For more information, check the <a href="https://poetry.eustace.io/docs/">documentation</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p><a href="https://pipenv.readthedocs.io/en/latest/">Pipenv</a> is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.</p></blockquote><ol><li><p>Install pipenv</p><pre><code> pip install pipenv</code></pre></li><li><p>Enter your Project directory and install the Packages for your project</p><pre><code> cd my_project pipenv install &lt;package&gt;</code></pre><p> Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p></li><li><p>Uninstall Packages</p><pre><code> pipenv uninstall &lt;package&gt;</code></pre></li><li><p>Activate the Virtual Environment associated with your Python project</p><pre><code> pipenv shell</code></pre></li><li><p>Exit the Virtual Environment</p><pre><code> exit</code></pre></li></ol><p>Find more information and a video in <a href="https://docs.pipenv.org/">docs.pipenv.org</a>.</p><p>[_返回顶部_](#Python 备忘录)</p><h3 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h3><p><a href="https://anaconda.org/">Anaconda</a> is another popular tool to manage python packages.</p><blockquote><p>Where packages, notebooks, projects and environments are shared.<br>Your place for free public conda package hosting.</p></blockquote><p>Usage:</p><ol><li><p>Make a Virtual Environment</p><pre><code> conda create -n HelloWorld</code></pre></li><li><p>To use the Virtual Environment, activate it by:</p><pre><code> conda activate HelloWorld</code></pre><p> Anything installed now will be specific to the project HelloWorld</p></li><li><p>Exit the Virtual Environment</p><pre><code> conda deactivate</code></pre></li></ol><p>[_返回顶部_](#Python 备忘录)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021第一份美好如约而至，请查收！</title>
      <link href="/myhexo/2021/03/09/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-6-ri-fang-shan/"/>
      <url>/myhexo/2021/03/09/sheng-huo/yi-gong/huo-dong-zong-jie/2021-nian-3-yue-6-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老义工： 丽、上校、鸿德、妙涵、素素、翠小花、南山南、安羽、梅子、蛋清、暗香、金蟾格格、川姐姐、冬雪儿、戏浪小生、田喜悦的巧克力、杜海、小鱼儿、天堂燕蝶、E3、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>开年第一次活动，热闹非凡，也许是大家好久不见啦，所以见面后显得格外亲切，这么多人一起约定来参加活动就更多了一丝丝激动，总觉得这么长时间不见，应该会有不一样的变化，见面后却又发现还是原来的样子，未曾改变，熟悉的背影，熟悉的笑脸，熟悉的声音，熟悉的眼神。</p><p>赶上孩子们刚开学不久，小孩们绝大多数都已经到校，孩子人数和义工们也正相当，所以活动起来也不用担心相互照顾不到。这次活动主要是陪孩子们画画和搭积木，也许确实也想不到有什么更好的活动内容了，这两项活动的好处就是不用费多少体力，不用跑来跑去你争我抢，当然也不用担心孩子们磕磕碰碰，尤其是对一些比较喜欢安静的小孩那就更好了，展开想象力天马行空地画，画出多彩的世界万物。</p><p>还有几位在一楼活动，主要是在厨房做饭，在库房整理东西，红红火火干劲十足。干得都是体力活，一大锅的鸡翅翻来炒去，一袋袋大米码得整整齐齐，这些功夫都不是一天两天可以炼成的，在家里肯定也个个都是一把好手。</p><p>每年各片区的开年活动都会制造一些特别，今年的特别之处是会长给参加活动的义工们每人准备了一个印有北京义工联LOGO的手提布袋，好珍贵的纪念物，值得一生典藏。手提袋具体是什么样子的大家翻看一下论坛的活动照片贴就清楚了。另外为了照顾义工们的口福，有一位义工特意从康复中心买了一些孩子们做的牛轧糖给义工们分享，这位义工是人称涛哥的李雪涛老义工，一个甜甜的开年活动。</p><p>心存善良，一切美好如约而至。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猎户星座</title>
      <link href="/myhexo/2021/03/02/sheng-huo/iknow/xi-hu-xing-zuo/"/>
      <url>/myhexo/2021/03/02/sheng-huo/iknow/xi-hu-xing-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="猎户星座"><a href="#猎户星座" class="headerlink" title="猎户星座"></a>猎户星座</h1><h2 id="星座神话"><a href="#星座神话" class="headerlink" title="星座神话"></a>星座神话</h2><h3 id="罗马神话"><a href="#罗马神话" class="headerlink" title="罗马神话"></a>罗马神话</h3><p>罗马神话中，海神尼普顿（Neptune）有个儿子名叫奥瑞恩（Orion）。奥瑞恩生来就像他的父亲一样，长得魁梧强壮。可他并不喜欢生活在海里，而总是来到山野间，攀岩、捕猎。不过，他毕竟是海神的儿子，所以即使是在海面上也能行走如飞。整日陪伴他的是一条名叫西立乌斯（Laelaps）的猎犬，它和主人一样勇猛，打猎时总是冲在最前面，遇到猛兽也总是挡在奥瑞恩身前。日子久了，奥赖温经常在打猎时碰到月亮女神狄安娜（Diana）。两人很快就被对方的高雅潇洒和出神入化的猎技深深吸引住了，后来，他们经常一起在山间漫步，登绝壁，攀险峰，无话不谈。这一切，却使太阳神阿波罗（Apollo）很生气，他怕妹妹狄安娜像月桂女神达芙妮（Daphne）一样。他知道狄安娜是个性格倔强的女孩，劝说根本不会打动她。阿波罗一狠心，想出了一条毒计。 </p><p>一天，奥瑞恩像往常一样，在海面上“飞行”，准备上岸去捕猎。他的全身都浸在水里，只有头部露出水面。阿波罗和狄安娜“正巧”从海面上飞过，阿波罗引诱狄安娜比试射术。狄安娜射中海上的目标，心里十分得意，降落到海上，想看看被射中的目标。可她看到的却是头部中箭的奥瑞恩，静静地躺在水面上，来不及和他的心上人说一句话，就已经气绝身亡了。最心爱的人竟然死在自己的箭下，狄安娜一下昏倒了。西立乌斯听到主人惨死的消息，悲痛得整夜哀号，绝食几天便随奥瑞恩而去了。这幕惨剧使众神之王朱庇特（Jupiter）也唏嘘不已。他收殓了奥瑞恩的尸首，把他升到天上化作猎户座。生前不能常相守，死后和心上人月神狄安娜永远在一起了。西立乌斯也以自己的忠诚赢得了朱庇特的同情，被提升到天界，继续陪伴在主人身旁，这就是大犬座。为了不使西立乌斯寂寞，朱庇特还特意给它找了个伙伴——小犬座。朱庇特知道奥瑞恩生前最喜欢打猎，就在他身边放了一只小小的猎物——天兔座。 </p><h3 id="希腊神话"><a href="#希腊神话" class="headerlink" title="希腊神话"></a>希腊神话</h3><p>希腊神话中，俄里翁（Orion）是神界中有名的狩猎者，他不但擅长打猎，而且力大无穷，外表更是高大健壮又英俊，因此变得骄傲自大，他到处向人吹嘘，自己是世界上最伟大的狩猎专家，没有一种动物见到他不害怕的，因此得罪了天后赫拉（Hele）。为了要惩罚这个狂妄的猎人，赫拉派了一只毒蝎子，在俄里翁每天会经过的路上埋伏，想趁著他不注意时袭击他。当俄里翁发现毒蝎子时，为时已晚，他一不留神，竟被毒蝎子给螫了一下，没多久便毒发身亡。就在他倒下的同时，身体恰巧压在来不及闪避的毒蝎子上，毒蝎子也就这样被活活压死了。赫拉因为这只毒蝎子尽忠职守，于是便将它升到天上，成了天蝎座。俄里翁则被主神宙斯（Zeus）升到天上，成为了猎户座。据说，俄里翁仍然在逃避毒蝎子的追击，因此夜晚的星空上，只要天蝎座出现，猎户座就会从另外一边消失的无影无踪，等到天蝎座落下，猎户座才又会高高升起。这两个星座就这么永远的在天空中追逐，彼此互不相见。</p><h2 id="猎户星座-（朴树演唱歌曲）"><a href="#猎户星座-（朴树演唱歌曲）" class="headerlink" title="猎户星座 （朴树演唱歌曲）"></a>猎户星座 （朴树演唱歌曲）</h2><h3 id="歌曲歌词"><a href="#歌曲歌词" class="headerlink" title="歌曲歌词"></a>歌曲歌词</h3><p>你还记得吗 那时的夜晚<br>是如何降临的<br>什么都不说 像来自天空<br>轻如指尖的触痛<br>你是否得到了 期待的人生<br>梦里的海潮声<br>他们又如何从 指缝中滑过<br>像吹在旷野里的风<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿<br>世界在雾中 那些人说着<br>来吧 就不见了<br>从未看清过 这一座迷宫<br>所有走错的路口<br>那些死去的人 停留在夜空<br>为你点起了灯<br>有时你乘起风 有时你沉没<br>有时午夜有彩虹<br>有时你唱起歌 有时你沉默<br>有时你望着天空<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿<br>情长 飘黄 静悄悄的时光<br>清晨 日暮 何处是我的归宿</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=532776436&amp;auto=1&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猎户星座 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>销售冠军是如何炼成的课读书笔记</title>
      <link href="/myhexo/2021/02/27/xue-xi/reading/xiao-shou-guan-jun-shi-ru-he-lian-cheng-de/"/>
      <url>/myhexo/2021/02/27/xue-xi/reading/xiao-shou-guan-jun-shi-ru-he-lian-cheng-de/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>销售冠军是如何炼成的</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：贺学友<br>出版社：四川人民出版社</p><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><ul><li>销售是一个伟大的职业，也是一份充满挑战的工作。</li></ul><p>普通销售员和Top Sales在心态上的区别</p><p>永不言败，永不放弃</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">不自信</td><td align="center">非常自信</td></tr><tr><td align="center">不乐观</td><td align="center">乐观主义</td></tr><tr><td align="center">不积极</td><td align="center">积极向上</td></tr><tr><td align="center">谁都可以取代我</td><td align="center">舍我其谁</td></tr></tbody></table><p>普通销售员和Top Sales在状态上的区别</p><p>努力到感动自己，拼搏到无能为力</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">努力了不后悔</td><td align="center">全力以赴战斗</td></tr><tr><td align="center">差不多就得了</td><td align="center">达目标才甘心</td></tr><tr><td align="center">觉得自己在给别人打工</td><td align="center">为了自己的现在和未来拼搏</td></tr></tbody></table><p>普通销售员和Top Sales在效率上的区别</p><p>普通销售员与冠军的3-5倍效率差</p><table><thead><tr><th align="center">普通销售员</th><th align="center">Top Sales</th></tr></thead><tbody><tr><td align="center">为开发而开发</td><td align="center">只为精准开发</td></tr><tr><td align="center">为拜访而拜访</td><td align="center">只为目标拜访</td></tr><tr><td align="center">尝试性地签单</td><td align="center">为帮助客户创造价值而签单</td></tr></tbody></table><h2 id="理论联系实践，养成十大高效习惯"><a href="#理论联系实践，养成十大高效习惯" class="headerlink" title="理论联系实践，养成十大高效习惯"></a>理论联系实践，养成十大高效习惯</h2><p>好的习惯促进好的行为，好的行为成就好的结果。而所有的好习惯，都必须在实践中养成。</p><h3 id="思考的习惯"><a href="#思考的习惯" class="headerlink" title="思考的习惯"></a>思考的习惯</h3><h3 id="总结的习惯"><a href="#总结的习惯" class="headerlink" title="总结的习惯"></a>总结的习惯</h3><h3 id="早起的习惯"><a href="#早起的习惯" class="headerlink" title="早起的习惯"></a>早起的习惯</h3><h3 id="勤奋的习惯"><a href="#勤奋的习惯" class="headerlink" title="勤奋的习惯"></a>勤奋的习惯</h3><h3 id="做笔记的习惯"><a href="#做笔记的习惯" class="headerlink" title="做笔记的习惯"></a>做笔记的习惯</h3><h3 id="进步的习惯"><a href="#进步的习惯" class="headerlink" title="进步的习惯"></a>进步的习惯</h3><h3 id="失败的习惯"><a href="#失败的习惯" class="headerlink" title="失败的习惯"></a>失败的习惯</h3><h3 id="倾听的习惯"><a href="#倾听的习惯" class="headerlink" title="倾听的习惯"></a>倾听的习惯</h3><h3 id="分享的习惯"><a href="#分享的习惯" class="headerlink" title="分享的习惯"></a>分享的习惯</h3><h3 id="成交的习惯"><a href="#成交的习惯" class="headerlink" title="成交的习惯"></a>成交的习惯</h3>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Look at ... 看。。。。。。</title>
      <link href="/myhexo/2021/02/17/xue-xi/english/new-concept/lesson10/"/>
      <url>/myhexo/2021/02/17/xue-xi/english/new-concept/lesson10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>that man! (fat)</p><p>that woman!(thin)</p><p>that policeman!(tall)</p><p>that policewoman!(short)</p><p>that mechanic!(dirty)</p><p>that nurse!(clean)</p><p>Steven!(hot)</p><p>Emma!(cold)</p><p>that milkman!(old)</p><p>that air hostess!(young)</p><p>that hairdresser!(busy)</p><p>that housewife!(lazy)</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>fat</td><td>胖的</td></tr><tr><td>woman</td><td>女人</td></tr><tr><td>thin</td><td>瘦的</td></tr><tr><td>tall</td><td>高的</td></tr><tr><td>short</td><td>矮的</td></tr><tr><td>dirty</td><td>脏的</td></tr><tr><td>clean</td><td>干净的</td></tr><tr><td>hot</td><td>热的</td></tr><tr><td>cold</td><td>冷的</td></tr><tr><td>old</td><td>老的</td></tr><tr><td>young</td><td>年轻的</td></tr><tr><td>busy</td><td>忙的</td></tr><tr><td>lazy</td><td>懒的</td></tr></tbody></table><h2 id="Written-exercises"><a href="#Written-exercises" class="headerlink" title="Written exercises"></a>Written exercises</h2><p>Complete these sentences using He’s, She’s or It’s.</p><p>Example:<br>Robert isn’t a teacher.He’s an engineer.</p><p>Mr.Blake isn’t a student. He’s a teacher.</p><p>This isn’t my umbrella. It’s your umbrella.</p><p>Sophie isn’t a teacher. She’s a keyboard operator.</p><p>Steven isn’t cold. He’s hot.</p><p>Naoko isn’t Chinese. He’s Japanese.</p><p>This isn’t a German car. It’s a Swedish car.</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斯坦福大学人生设计课读书笔记</title>
      <link href="/myhexo/2021/02/06/xue-xi/reading/si-tan-fu-da-xue-ren-sheng-she-ji-ke/"/>
      <url>/myhexo/2021/02/06/xue-xi/reading/si-tan-fu-da-xue-ren-sheng-she-ji-ke/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>斯坦福大学人生设计课</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：[美] 比尔.博内特  [美] 戴夫.伊万斯  著    周芳芳 译<br>出版社：中信出版集团</p><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><p>在人生设计的过程中，你需要：</p><ul><li><p>保持好奇</p><ul><li>激发你的探索欲，发现自己的兴趣所在。</li></ul></li><li><p>不断尝试</p><ul><li>将目标付诸行动，不断尝试，切忌空想。  </li></ul></li><li><p>重新定义问题</p><ul><li>重新审视目前的状况，转换思维模式。 </li></ul></li><li><p>保持专注</p><ul><li>学会放手，专注于过程。 </li></ul></li><li><p>深度合作</p><ul><li>与他人合作，适度求助。 </li></ul></li></ul><p>你的人生是工业品，还是艺术品？</p><p>思维误区： 你的学位决定你的职业生涯。<br>重新定义： 3/4 的大学毕业生最后从事的工作都与他们所学的专业无关。</p><p>思维误区： 获得成功就会感到幸福。<br>重新定义：真正的幸福源于设计有意义的人生。</p><p>思维误区： 太晚了。<br>重新定义： 设计一种自己热爱的生活，合适都不晚。</p><p>发现问题+解决问题=精心设计的人生</p><p>重力问题： 在设计人生的过程中，如果一个问题不能被解决，那么他就不是真正的问题。 如果一个问题不能被解决，那么它就不是一个问题。它只是一种情况，一种环境，一种生活现实；它像重力一样，是一个无法解决的问题。</p><p>思维误区： 我应该已经知道自己的目的地了。<br>重新定义：只有你了解了自己现在的位置，你才能指导如何到达目的地。</p><p>人生设计评估：</p><ul><li><p>健康</p></li><li><p>工作</p></li><li><p>娱乐</p></li><li><p>爱</p></li></ul><p>如果你不知道自己当下的位置，就无法指导自己未来的方向。</p><p>工作观和人生观</p><p>思维误区： 我应该知道前进的目标。<br>重新定义：我不可能一直知道自己前进的目标，但是我会清楚自己的方向是否正确。</p><p>思维误区： 工作不应该有乐趣，因此它才被称为工作。<br>重新定义：乐趣会指引你找到适合你的工作。</p><p>美好时光日志</p><p>心流体验是指全身心投入的一种心理转台，心流产生的同时伴有兴奋感。</p><p>你唯一犯的错误就是什么也不做。</p><p>头脑风暴规则：</p><ol><li>重量不重质</li><li>不要对他人提出的想法立即做出评判，也不需要进行修改。</li><li>在其他人的想法进行创新。</li><li>鼓励大家说出大胆疯狂的想法。</li></ol><p>思维误区：关系网就是一群虚伪的人。<br>重新定义： 关系网只是为了咨询方向。</p><p>思维误区：幸福就是拥有一切。<br>重新定义：幸福就是断舍离。</p><p>思维误区： 我们以结果评判我们的人生。<br>重新定义：人生是一个过程，而不是一个结果。</p><p>失败只是人生的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯环</title>
      <link href="/myhexo/2021/02/06/xue-xi/essay/mo-bi-wu-si-huan/"/>
      <url>/myhexo/2021/02/06/xue-xi/essay/mo-bi-wu-si-huan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="莫比乌斯环"><a href="#莫比乌斯环" class="headerlink" title="莫比乌斯环"></a>莫比乌斯环</h2><p>在这个世界上有很多神奇的存在，莫比乌斯带就十分有趣，虽然看似简单，却包含了很多物理、数学等方面的信息。把一根纸条扭转180°后，两头再粘接起来做成的纸带圈，称作莫比乌斯带。</p><p>一般来讲，人们在观察某个图形时，往往会产生一些固定不变的“边界意识”，而且绝大多数人会下意识地顺从这些“边界”，而莫比乌斯带恰恰超出了人们的认知，莫比乌斯带圈没有所谓的边界，没有所谓的内外之分，是一个真正的无限循环的圈。</p><p>你可以设想一只蜘蛛开始沿着莫比乌斯带爬，那么它能够爬遍整条带子而无须跨越带的边缘。如果你想要验证这一点，可以拿一支铅笔不离纸地连续画线。那么，你会发现线条转了一圈，又返回了起点。</p><p>莫比乌斯带还有另一个有趣的性质，当你沿着带子的中央剪开，把这个圈一分为二，照理应得到两个圈儿，可奇怪的是，剪开后竟然是一个大圈儿。如果在纸条上画两条线，把纸条三等分，再粘成“莫比乌斯圈”，用剪刀沿画线剪开，剪刀绕两个圈竟然又回到原出发点。而且，纸带不仅没有一分为二，反而剪出一个两倍长的纸圈，更令人惊奇的是，新得到的这个较长的纸圈，本身却是一个双侧曲面，它的两条边界自身虽不打结，但却相互套在一起。</p><p>1882年，一位德国数学家菲利克斯·克莱因提出了“克莱因瓶”。“克莱因瓶”是一个平面，没有边界、没有定向性，随着表面前进，方向在不断变化；更有趣的是，这是一个不存在内部和外部的奇特形状。将一个“克莱因瓶”适当剪开，我们就能得到两条莫比乌斯带。莫比乌斯带于19世纪由数学家莫比乌斯发现，这种奇特的形状使之在工业中大放异彩，比如电阻器就被设计为莫比乌斯带的形状，以便更为充分地利用更多的表面，增强产品的耐用性。用皮带传送的动力机械的皮带也可以做成莫比乌斯带状，这样皮带有了更长的磨损面积，就不会只磨损一面了。</p><p><strong>莫比乌斯带原理可以运用到什么地方?</strong><br><strong>“莫比乌斯带”在生活和生产中已经有了一些用途。</strong></p><p>　　1. 用皮带传送的动力机械的皮带就可以做成“莫比乌斯带”状，这样皮带可以磨损的面积就变大了。</p><p>　　2. 如果把录音机的磁带做成“莫比乌斯带”状，就不存在正反两面的问题了，磁带就只有一个面了。</p><p>　　3. 它还能平坦的嵌入三维空间。简易的“莫比乌斯圈”可通过一张长方形纸任何一面反转粘贴。</p><p>　　传送带、减缓橡胶老化、针式打印机的色带。<br>用皮带传送的动力机械的皮带就可以做成“莫比乌斯带”状，这样皮带可以磨损的面积就变大了。如果把录音机的磁带做成“莫比乌斯带”状，就不存在正反两面的问题了，磁带就只有一个面了。它还能平坦的嵌入三维空间。</p><p>　　简易的“莫比乌斯圈”可通过一张长方形纸任何一面反转粘贴。</p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> essay </tag>
            
            <tag> 莫比乌斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《围城》读书笔记</title>
      <link href="/myhexo/2021/02/06/xue-xi/reading/wei-cheng/"/>
      <url>/myhexo/2021/02/06/xue-xi/reading/wei-cheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名"><a href="#书名" class="headerlink" title="书名"></a>书名</h2><p>围城</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>作者：钱钟书<br>出版社：人民文学出版社</p><h2 id="阅读心得"><a href="#阅读心得" class="headerlink" title="阅读心得"></a>阅读心得</h2><ol><li>以前看过有些文章用清高来形容主人公方鸿渐，我特意查了一下清高这个词的含义，1.指人品纯洁高尚，不同流合污。2.指人孤高，不合群。看完了书后发现“清高”这个词有点不妥，书中赵辛楣对方鸿渐的评价是“你不讨厌，可是全无用处”。每位读者都有自己的理解和看待问题和人物的角度，给出不同的描述也很正常，这本书中的人物各有各的特点，钱老用犀利的笔法对人物形象刻画的太深刻了，大多人物都算是文人，这也正是钱老作为中国文学大家最和大学教授最手到擒来的素材来源。钱老在前言中说，《围城》写完就对它很不满。但仍然不失为一本现代名著。</li><li> 从整体上看这本书的基调比较轻松，里边有各种人物穿插其间，恰到好处的表达，让读者不得不赞叹钱老的文笔。</li><li>。。。 。。。</li></ol><h2 id="重点摘录"><a href="#重点摘录" class="headerlink" title="重点摘录"></a>重点摘录</h2><ol><li>围在城里的人想逃出去，城外的人想冲进去，对婚姻也罢，职业也罢，人生的愿望大多如此。</li><li>叔本华 ：  世间哪有恋爱？压根儿是生殖冲动。            另一说法：所有的两情相悦都不过本能而已。</li><li>葡萄牙人有句谚语说：“运气好的人生的孩子，第一胎准是女的。” 因为女孩子长大了，可以打杂，看护弟弟妹妹，在未嫁之前，她父母省得下一个女佣人的工钱。</li><li>苏小姐理想的自己是：“艳若桃李，冷若冰霜。”</li><li>保持实力，做战略上的撤退。</li><li>不必去求诗的意义，诗有意义是诗的不幸。</li><li>他觉得用文言比较妥当，词意简约含混，是文过饰非轻描淡写的好工具。</li><li>小胖子大诗人曹元朗是不是也请在里面？有他，菜可以省一点，看见他那个四喜丸子的脸，人就饱了。</li><li>我知道她难看，可是因为她是我们的恩人，我不忍细看她。对于丑人，细看是一种残忍–除非他是坏人，你要惩罚他。</li><li>你不讨厌，可是全无用处。</li><li>大学校长份文科出身和理科出身两类。文科出身的人轻易做不到这位子，做到了也不以为荣，准是干政治碰壁下野，仕而不优则学，借诗书之泽、弦诵之声来修养身心。理科出身的人呢，就全然不同了。中国是世界上最提倡科学的国家，没有旁的国家肯给科学家大官做的。外国科学进步，中国科学家进爵。</li><li>假惊异的表情做得惟妙惟肖，比方鸿渐的真惊惶自然得多；他没演话剧，是话剧的不幸，而是演员们的大幸。</li><li>叫花子只能讨到什么吃什么，点菜时轮他不着的。</li><li>不识抬举，不敢高攀。</li><li>伊索寓言里那只没尾巴的狐狸。    </li><li>天下只有两种人。譬如一串葡萄到手，一种人挑最好吃的先吃。另一种人把最好的留在最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里面最坏的。不过事实上适得其反，缘故是第二种人还有希望，第一种人只有回忆。</li><li>拥挤里的孤寂，热闹里的凄凉。</li><li>这只钟走得非常准，我昨天试过的，每点钟只走慢七分，记好，要走慢七分。</li><li>喜事不比丧事，礼是可以补送的。</li><li>人生最原始的睡，同时也是死的样品。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How are you today? 你今天好吗？</title>
      <link href="/myhexo/2021/02/04/xue-xi/english/new-concept/lesson9/"/>
      <url>/myhexo/2021/02/04/xue-xi/english/new-concept/lesson9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-How-is-Emma"><a href="#Listen-to-the-tape-then-answer-this-question-How-is-Emma" class="headerlink" title="Listen to the tape then answer this question.  How is Emma?"></a>Listen to the tape then answer this question.  How is Emma?</h2><p>STEVEN: Hello,Helen.</p><p>HELEN: Hi,Steven.</p><p>STEVEN: How are you today?</p><p>HELEN: I’m very well,thank you. And you?</p><p>STEVEN: I’m fine,thanks.</p><p>STEVEN: How is Tony?</p><p>HELEN: He’s fine,thanks.</p><p>​                How’s Emma?</p><p>STEVEN: She’s very well,too,Helen.</p><p>Steven: Goodbye,Helen.</p><p>​                Nice to see you.</p><p>EHLEN: Nice to see you,too,Steven.Goodbye.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>hello</th><th>喂（表示问候）</th></tr></thead><tbody><tr><td>hi</td><td>喂，嗨</td></tr><tr><td>how</td><td>怎样</td></tr><tr><td>today</td><td>今天</td></tr><tr><td>well</td><td>身体好</td></tr><tr><td>fine</td><td>美好的</td></tr><tr><td>thanks</td><td>谢谢</td></tr><tr><td>goodbye</td><td>再见</td></tr><tr><td>see</td><td>见</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Are you a teacher? 你是教师吗？</title>
      <link href="/myhexo/2021/02/01/xue-xi/english/new-concept/lesson7/"/>
      <url>/myhexo/2021/02/01/xue-xi/english/new-concept/lesson7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-What-is-Robert’s-job"><a href="#Listen-to-the-tape-then-answer-this-question-What-is-Robert’s-job" class="headerlink" title="Listen to the tape then answer this question.  What is Robert’s job?"></a>Listen to the tape then answer this question.  What is Robert’s job?</h2><p>ROBERT: I am a new student. My name ‘s Robert.</p><p>SOPHIE: Nice to meet you. My name’s Sophie.</p><p>ROBERT: Are you French?</p><p>SOPHIE: Yes,I am.</p><p>SOPHIE: Are you French,too?</p><p>ROBERT: No,I am not.</p><p>SOPHIE: What nationality are you?</p><p>ROBERT: I’m Italian.</p><p>ROBERT: Are you a teacher?</p><p>SOPHIE: No, I’m not.</p><p>ROBERT: What’s your job?</p><p>SOPHIE: I’m a keyboard operator.</p><p>SOPHIE: What’s your job?</p><p>ROBERT: I’m an engineer.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>I</th><th>我</th></tr></thead><tbody><tr><td>nationality</td><td>国籍</td></tr><tr><td>am</td><td>be动词现在时第一人称单数</td></tr><tr><td>job</td><td>工作</td></tr><tr><td>are</td><td>be动词现在时复数</td></tr><tr><td>keyboard</td><td>电脑键盘</td></tr><tr><td>name</td><td>名字</td></tr><tr><td>operator</td><td>操作人员</td></tr><tr><td>what</td><td>什么</td></tr><tr><td>engineer</td><td>工程师</td></tr></tbody></table><h2 id="Notes-on-the-text"><a href="#Notes-on-the-text" class="headerlink" title="Notes on the text."></a>Notes on the text.</h2><ol><li>My name’s = My name is.</li><li>I’m = I am</li><li>What’s your job?</li><li>What’s  = What is</li><li>What nationality are you? 用来询问对方国籍。也可以问Where are you frome?</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What&#39;s your job? 你是做什么工作的？</title>
      <link href="/myhexo/2021/01/31/xue-xi/english/new-concept/lesson8/"/>
      <url>/myhexo/2021/01/31/xue-xi/english/new-concept/lesson8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>I’m a policeman.</p><p>I’m a policewoman.</p><p>I’m a taxi driver.</p><p>I’m an air hostess.</p><p>I’m a postman.</p><p>I’m a nurse.</p><p>I’m a mechanic.</p><p>I’m a hairdresser.</p><p>I’m a housewife.</p><p>I’m a milkman.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><table><thead><tr><th>policeman</th><th>警察</th></tr></thead><tbody><tr><td>nurse</td><td>护士</td></tr><tr><td>policewoman</td><td>女警察</td></tr><tr><td>mechanic</td><td>机械师</td></tr><tr><td>taxi driver</td><td>出租汽车司机</td></tr><tr><td>hairdresser</td><td>理发师</td></tr><tr><td>air hostess</td><td>空中小姐</td></tr><tr><td>housewife</td><td>家庭妇女</td></tr><tr><td>postman</td><td>邮递员</td></tr><tr><td>milkman</td><td>送牛奶的人</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What make is it. 他是什么牌子？</title>
      <link href="/myhexo/2021/01/26/xue-xi/english/new-concept/lesson6/"/>
      <url>/myhexo/2021/01/26/xue-xi/english/new-concept/lesson6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>It’s a Volvo.(Swedish)</p><p>It’s a Peugeot.(French)</p><p>It’s a Mercedes.(German)</p><p>It’s a Toyota.(Japanese)</p><p>It’s a Daewoo.(Korean)</p><p>It’s a Mini.(English)</p><p>It’s a Ford.(American)</p><p>It’s a Fiat.(Italian)</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions."></a>New words and expressions.</h2><p>make /meik/ n (产品的)牌号        Mercedes   梅赛德斯</p><p>Swedish      瑞典的        Toyota   丰田</p><p>English   英国的        Daewoo   大宇</p><p>American    美国的    Mini  迷你</p><p>Volvo   沃尔沃        Fiat   菲亚特</p><p>peugeot  标志</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nice to meet you. 很高兴见到你。</title>
      <link href="/myhexo/2021/01/25/xue-xi/english/new-concept/lesson5/"/>
      <url>/myhexo/2021/01/25/xue-xi/english/new-concept/lesson5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Is-Chang-woo-Chinese"><a href="#Listen-to-the-tape-then-answer-this-question-Is-Chang-woo-Chinese" class="headerlink" title="Listen to the tape then answer this question. Is Chang-woo Chinese?"></a>Listen to the tape then answer this question. Is Chang-woo Chinese?</h2><p>MR. BLAKE: Good morning.</p><p>STUDENTS: Good morning,Mr.Blake.</p><p> MR. BLAKE:  This is Miss Sophie Dupont.</p><p>​                        Sophie is a new student.</p><p>​                        She is French.</p><p>MR. BLAKE:  Sophie,this is Hans. He is German.</p><p>HANS: Nice to meet you.</p><p>MR.BLAKE: And this is Naoko. She is Japanese.</p><p>NAOKO: Nice to meet you.</p><p>MR. BLAKE: And this is Chang-woo. He’s Korean.</p><p>CHANG-WOO: Nice to meet you.</p><p>MR. BLAKE: And this is Luming. He’s Chinese.</p><p>LUMING: Nice to meet you.</p><p>MR. BLAKE: And this is Xiaohui,She’s Chinese,too.</p><p>XIAOHUI: Nice to meet you.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>Mr.     German</p><p>good    nice</p><p>morning    meet</p><p>Miss    Japanese</p><p>new    Korean</p><p>student Chinese</p><p>French    too</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is this your ...? 这是你的。。。。。。吗？</title>
      <link href="/myhexo/2021/01/25/xue-xi/english/new-concept/lesson4/"/>
      <url>/myhexo/2021/01/25/xue-xi/english/new-concept/lesson4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>Is this your pen?</p><p>Is this your pencil?</p><p>Is this your book?</p><p>Is this your watch?</p><p>Is this your coat?</p><p>Is this your dress?</p><p>Is this your skirt?</p><p>Is this your shirt?</p><p>Is this your car?</p><p>Is this your house?</p><p>Is this your suit?</p><p>Is this your school?</p><p>Is this your teacher?</p><p>Is this your son?</p><p>Is this your daughter?</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>suit /su:t/n          son<br>school    daughter<br>teacher    </p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sorry,sir. 对不起，先生。</title>
      <link href="/myhexo/2021/01/24/xue-xi/english/new-concept/lesson3/"/>
      <url>/myhexo/2021/01/24/xue-xi/english/new-concept/lesson3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Does-the-man-get-his-umbrella-back"><a href="#Listen-to-the-tape-then-answer-this-question-Does-the-man-get-his-umbrella-back" class="headerlink" title="Listen to the tape then answer this question. Does the man get his umbrella back?"></a>Listen to the tape then answer this question. Does the man get his umbrella back?</h2><p>My coat and my umbrella please.</p><p>Here is my ticket.</p><p>Thank you,sir.<br>Number five.</p><p>Here’s your umbrella and your coat.</p><p>This is not my umbrella.<br>Sorry,sir.</p><p>Is this your umbrella?<br>No,it isn’t.</p><p>Is this it?<br>Yes,it is.<br>Thank you very much.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>umbrella    number<br>please    five<br>here    sorry<br>my    sir<br>ticket    cloakroom</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is this your ...? 这是你的。。。。。。吗？</title>
      <link href="/myhexo/2021/01/21/xue-xi/english/new-concept/lesson2/"/>
      <url>/myhexo/2021/01/21/xue-xi/english/new-concept/lesson2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question"><a href="#Listen-to-the-tape-then-answer-this-question" class="headerlink" title="Listen to the tape then answer this question."></a>Listen to the tape then answer this question.</h2><p>-Is this your …?<br>-Is this your book?</p><ul><li>Is this your car?</li><li>Is this your coat?</li><li>Is this your dress?</li><li>Is this your house?</li><li>Is this your pen?</li><li>Is this your pencil?</li><li>Is this your shirt?</li><li>Is this your skirt?</li><li>Is this your watch?</li></ul><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>pen        dress<br>pencil    skirt<br>book    shirt<br>watch    car<br>coat    house</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excuse me!</title>
      <link href="/myhexo/2021/01/20/xue-xi/english/new-concept/lesson1/"/>
      <url>/myhexo/2021/01/20/xue-xi/english/new-concept/lesson1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Listen-to-the-tape-then-answer-this-question-Whose-handbag-is-it"><a href="#Listen-to-the-tape-then-answer-this-question-Whose-handbag-is-it" class="headerlink" title="Listen to the tape then answer this question. Whose handbag is it?"></a>Listen to the tape then answer this question. Whose handbag is it?</h2><p>-Excuse me!<br>-Yes?<br>-Is this your handbag?<br>-Pardon?<br>-Is this your handbag?<br>-Yes,it is.<br>-Thank you very much.</p><h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a>New words and expressions</h2><p>excuse        handbag<br>me        pardon<br>yes         it<br>is         thank you<br>this        very much<br>your</p><h2 id="Notes-on-the-text"><a href="#Notes-on-the-text" class="headerlink" title="Notes on the text"></a>Notes on the text</h2><ol><li>Excuse me.<br>这个短语常用于与陌生人搭话，打断别人的说活或从别人身边挤过。在课文中，男士为了吸引女       士的注意力而用了这个表示客套的短语。</li><li>Pardon?<br>全句为 I beg your pardon. 意思是请求对方把刚才讲过的话重复一遍。</li></ol><h3 id="参考译文"><a href="#参考译文" class="headerlink" title="参考译文"></a>参考译文</h3><p>-对不起！<br>-什么事？<br>-这是您的手提包吗？<br>-对不起，请再说一遍。<br>-这是您的手提包吗？<br>-是的，是我的。<br>-非常感谢！</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外语的课堂教学</title>
      <link href="/myhexo/2021/01/20/xue-xi/english/new-concept/about/"/>
      <url>/myhexo/2021/01/20/xue-xi/english/new-concept/about/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>衡量是否掌握一门语言，最终是要看他运用如何，而不是懂多少。学习语言和学习乐器十分相似。学生做的操练和练习都是为了达到一个明确的目标：使他成为一个熟练的操作者。一个学生学了许多语法知识却不会运用语言，就像弹钢琴的学了许多关于和声的知识却不会弹钢琴一样。因此衡量学生是否掌握语言并不看他懂了多少，而要看他在众人面前语言运用的如何。</p><hr><audio controls="">  <source src="about.mp3" type="audio/mpeg">  您的浏览器不支持 audio 元素。</audio><hr><audio controls="">  <source src="/myhexo/2021/01/20/xue-xi/english/new-concept/about/about.mp3" type="audio/mpeg">  您的浏览器不支持 audio 元素。</audio>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> English </tag>
            
            <tag> new concept </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之禅</title>
      <link href="/myhexo/2021/01/12/xue-xi/python/python-zhi-shan/"/>
      <url>/myhexo/2021/01/12/xue-xi/python/python-zhi-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>又名 <a href="https://www.python.org/dev/peps/pep-0020"><strong>PEP 20</strong></a>, Python设计的指导原则。</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!Python之禅 by Tim Peters优美胜于丑陋（Python以编写优美的代码为目标）明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）可读性很重要（优美的代码是可读的）即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）当存在多种可能，不要尝试去猜测而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京义工联2019年年会照片贴--在这个世界相遇</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/nian-hui/bei-jing-yi-gong-lian-2019-nian-nian-hui-zhao-pian-tie/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/nian-hui/bei-jing-yi-gong-lian-2019-nian-nian-hui-zhao-pian-tie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在这个世界相遇</p><p>北京义工联2019年年会照片贴</p><p><img src="0.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 年会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心路，义工路</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/xin-lu-yi-gong-lu/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/xin-lu-yi-gong-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>**既然是写心路还是从开始说起吧，没来义工联之前，周六日无所事事，在消耗中度过休息日，觉得日子过得很可惜，深夜再一想，还有很多事情还没做，台湾还没解放，我也很着急，台湾同胞还生活在水深火热中，每当想到这里我都惆怅不已。忽然有一天在网上看到了北京义工联，把解放台湾的事儿先放一放，周六日参加一下义工活动应该不错。<br>**</p><p>  <strong>提交申请后等了不多久就通过了，组织领导效率这么高，让我很诧异。按照地点和时间来到海淀活动点看到了很多新的面孔和笑脸，第一次是蓝晶海豚带队，带队来得很早，仅仅比我晚了一步，觉得此人面相不凡走位娴熟，定当是特别人物，互相一交流果然不出我所料。活动在带队的安排下开始了，这么多义工，那么多孩子，好不热闹，我第一次来参加活动，感觉很茫然，不知所措，不过还是有信心能和孩子们玩到一起的，接着继续参加了多次活动，就逐渐认识了几个小孩儿，并且记住了他们的名字，同时也认识了更多友好的义工朋友们。</strong></p><p>  <strong>刚开始做义工可能就仅仅是为了消遣，慢慢认识了很多义工朋友们，觉得在一起能开心，并且能做一些力所能及的事情会创造出很多欢乐。刚开始认识的人中，鸿德应该算是印象比较深刻的，当年的年会上，鸿德伴着《江南Style》神曲秀了一段马式舞步，惊艳全场，这样的鸟叔他怎能不惹人醉。以前一直怀疑鸿德和芒果台主持人杜海涛一定有关系，现在终于真相大白了，原来是异父异母的亲兄弟。清新姐和旅程姐认识的也比较早，在活动中清新姐办事利落雷厉风行，旅程姐面面俱到关怀备至，逸然也是认识比较早的带队，在活动中总是事无巨细地忙前忙后，尽管由于工作原因不能经常参加活动，但是一有机会来参加，大哥风范犹存。</strong></p><p>  <strong>接下来主要写一下海淀片区的人们吧，毕竟我的根据地在海淀片区，认识的义工们相对比较多，先说一下四大（ ）吧，雪涛兄，为什么你是之首呢？我现在都没弄明白，一直觉得你既是个斯文人，博学多才，又是个硬人，宁折不弯，不料世事无常，人间正道是沧桑，逗比路上多奇葩。</strong></p><p>**天堂燕蝶、蝶姐、蝶妹、小蝶，这几个名字为什么怎么叫都无比娘气呢？你就认了吧，人缘好是被叫出来的，天气预报哪家强，小蝶是个好姑娘。曹贼，九零后，山西人士，逗比界的杰出代表，在海淀片区逗比领域有突出贡献，因为帅，所以逗比。青岛小哥，自称九零后，谁信？作为逗比领导者，你不要拿年龄和长相逗大家，中国梦，你的梦，逗比梦。<br>**</p><p>  <strong>再从另一个角度说一下四位吧，涛哥是一个很关心孩子和义工的大哥，最近涛哥在忙大事，所以没出现在活动片区，大家应该恭喜一下，送上美好的祝福。蝶姐每天发天气预报这份坚持，值得所有人学习，还有每次在常规活动或者其他活动都积极参与，并给予义工和服务对象贴心的帮助，让带队们感到队伍中有这样的义工很欣慰，很值得自豪。曹贼除了帅，也很热心，在去年春运期间帮帮忙活动中表现的很好，活动组织者给了很高的评价，棒棒的。小哥，进入义工联以来，我一步一步看着小哥长大，猛然间发现小哥已经太成熟了，小哥和海淀片区的各个老师都很谈得来，和孩子们也能玩成一片，活动后每次的总结写得也很细致，带队的小哥已经很有魅力了，向小哥学习。为逗比而生，义联更懂你，如果不逗比，生活多无趣。</strong></p><p>**<br>  皮小奇，我第一次参加活动就对小奇印象比较深，那天小奇来得很早，感觉萌萌哒，像一个高中生。小奇担任带队后才逐渐了解小奇，但有一点一直不了解，小奇你的饭量到底有多大？梅子是和小哥一起开始担任带队，一路成长，从开始的手足无措到现在熟练把握活动全局，每一次组织活动都能很好地完成，活动总结写得那么仔细那么用心，记得去年圣诞节为孩子们安排的活动非常棒，欢乐和幸福洋溢在每一个孩子和义工的脸上，多么开心的一段时光。这篇心路写到这里我也不知道该怎么继续描述下一位义工了，在义工联里有很多很多的义工都在用心做着每一件事，我熟悉的或者不熟悉的一些义工，在某一个瞬间给过我一些温暖的感觉,都值得记录下来，或许是点滴微小的一个动作，也或许是一个问候式的笑脸。**</p><p>  <strong>这篇心路主要写了一下海淀片区的一些义工，还有很多义工我都想一一写下来，海淀暖男罗刹，热心的小鱼儿，端庄的安羽，丽姐男朋友Davy，好摄影师幻龙，漫步阳光里，川姐姐、星星。。。。。。。很感激北京义工联这个组织，让这么多义工朋友们在一起开心，一起欢乐。</strong></p><p>  <strong>感谢有你，北京义工联！有你真好，北京义工联！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>太阳升起的地方就是希望</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>太阳升起的地方就是希望</p><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/1.jpg" class="" title="桃花小学大合影"><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/zhu-xue/2019-nian-he-bei-wei-xian-zou-fang-zhao-pian/2.jpg" class="" title="王庄子完小大合影">]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 走访 </tag>
            
            <tag> 助学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋天有你陪伴，真好！</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2019-nian-10-yue-26-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2019-nian-10-yue-26-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>秋天有你陪伴，真好</p><p>新义工： 王欢欢<br>老义工： 池文馨、胖龙、E3、暗香、饭团掌柜、老六、南山南、Sara214、李佳丽、鸿德、弘毅正兴<br>摄影：暗香<br>带队：弘毅正兴</p><p>​    秋高气爽，天高云淡，色彩斑斓的季节，在这样的天气参加义工活动别有一番风味，从市里的热闹到房山的闲静，除了欣赏一路的风景，更多的是一颗颗热切的义工心。</p><p>活动断断续续地停了几次，有些老义工也隔了段时间又回来啦，有变化的也有不变的，有孩子们熟悉的面孔，也有新来的小朋友，万事万物都在随着时间变换，春去秋来，新义工成了老义工，陌生到熟悉，相识到相知，一切都是这么自然。</p><p>​    担心迟到没吃午饭的义工胖龙，早早地来到活动点，时间足够，就再附近的小面馆吃了一顿，吃饱后悠哉悠哉地进了学校等着其他义工。这次的房山大当家鸿德叔叔忙里偷闲不用加班，还不到下午一点就到了，有这样积极的大带队坐镇活动也不用担心组织不起来了。</p><p>   E3这次不用负责摄影工作，可以专心陪孩子们了，这个过程和孩子一起拼图，一起画画写字，默默地配合，静静地依偎，时不时伸出大拇指鼓励。Sara214还是那个哪里需要去哪里的义工，时不时地去厨房一起做饭，陪孩子也是个能手，总能找到好方法去应对各种性格的小朋友。</p><p>​    这次唯一的新义工是老六推荐的，老六对义工联的传播和普及很好，让身边的人对义工很更多的认识。这次的新义工王欢欢可能提前了解了一下情况，所以新人培训中提到的注意事项都遵守的很好，和孩子们玩的时候也游刃有余，没有一丝拘谨。暗香这次负责摄影，抓拍的每一张照片都非常到位，各种表情，各种姿势，各种欢乐。</p><p>​    南山南协助着组织活动，她认识的孩子们多，孩子们相当配合，尽管中间也有抢玩具的现象，但还是很快轻松化解。</p><p>   小生这次还是在厨房里做美食，饭团一起配合着，炸带鱼、清炒胡萝卜还有一道不知道是什么，反正是色香味俱全，进了厨房的人们都想尝尝。饭团的厨艺也相当了得，赞一个吧。</p><p>​    活动结束总结的时候有一个意外惊喜，有小朋友把送了一束花给池文馨，不一会儿又有很多的小朋友给其他的义工们送上了鲜花，义工们都好开心，和孩子们拥抱。原来是大班的孩子们下午学习插花,把亲手做的成果送给了义工们，意外的收获，以惊喜的方式结束了活动。</p><p>星火相承，义路同行。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档</title>
      <link href="/myhexo/2020/12/24/xue-xi/hexo/index/"/>
      <url>/myhexo/2020/12/24/xue-xi/hexo/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 <a href="troubleshooting.html">问题解答</a> 中的解答，或者在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>、<a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。</p><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请<a href="https://github.com/hexojs/hexo/issues">提交问题</a>，我们会尽力解决您的问题。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><p>Mac 用户<br>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p><p>Windows 用户<br>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><p>Windows 用户<br>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p><p>Mac / Linux 用户<br>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进阶安装和使用"><a href="#进阶安装和使用" class="headerlink" title="进阶安装和使用"></a>进阶安装和使用</h3><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="<span class="token environment constant">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h3></li></ol><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们的时光，义工的过往</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/wo-men-de-shi-guang-yi-gong-de-guo-wang/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/xin-lu/wo-men-de-shi-guang-yi-gong-de-guo-wang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们的时光，义工的过往</p><p>头顶的太阳<br>燃烧着青春的余热<br>大海的波浪<br>翻滚着我们的向往<br>我们的时光<br>是无忧的时光<br>—–赵雷</p><p>​    五四青年节B站推出的《后浪》短视频在朋友圈刷屏，看完了何冰极富感染力的演讲才发现原来浪也分前后，以前只觉得一个人浪就是浪，不分前后左右。 其中说到的年轻人凭着相同的爱好就能结交千万个值得干杯的朋友，对于我来说多少也有点感触，在这个偌大的城市可以释怀干杯的朋友很多就是在北京义工联里相识的，但我们属不属于视频中所说的后浪我也不敢确定，毕竟每个人浪的程度和时期都不一样。联里的义工们年龄差距比较大，应该是前浪后浪都有，也有中间浪。这些浪是怎么成千上万在一起的？视频中也给了答案，因为热爱，因为善良，因为心里有火，眼里有光。君子美美与共，和而不同。</p><p>​    做一名义工对社会的影响有多大？总觉得年轻人在社会上，应该有一分热，发一分光。和尔盖茨和扎克伯格这样有影响力的大人物做慈善相比，我们每一个人的光和热都是很有限的，但这些就足以影响身边的人，影响你我自己的人生经历。放手去拥抱这个世界，热爱身边的人，热爱生活，不负青春！</p><p>​    马克吐温说:“善良,是一种世界通用的语言。” 与人为善,就是为自己积攒福气和运气…，<br>世界上所有的惊喜和好运，都是你积累的人品和善良。有善意之举的人，看似笨拙的付出了时间和精力，但其实是一种惊喜和好运的积累。善待整个世界，整个世界也会善待着你。你所有选择的善良里面，都会藏着你未来的道路上的惊喜和运气。</p><p>​    在义工联里活动的时候总是能看到身边人脸上带着笑，时间一长就发现原来笑是可以传递的，初加入的新义工看到这样的笑会觉得这里有暖，有爱，热情活力。老义工看到这样的笑会更加坚定自己当初所做行动和付出。这就是微笑的力量，给自己一个微笑，让生活多一份热爱。微笑可以化解陌生，也可以递增情义，可以向前浪致敬，也可以和后浪干杯。</p><p>给我一个微笑就够了<br>如薄酒一杯，像柔风一缕<br>这就是一篇最动人的宣言呵<br>仿佛春天　温馨又飘逸<br>—–汪国真</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微风细雨，岁月静好</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-8-yue-15-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-8-yue-15-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>微风细雨，岁月静好</p><p>老义工： 丽、金蟾格格、川姐姐、胖龙、杨涵妈、小鱼儿、冬雪儿、不点、E3、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>​    几天前断断续续的暴雨过去后，空气自然好了很多，凉爽的天气给人好心情，没有燥热，没有热汗，有的是义工们热切的心。<br>​<br>​    周五义工们就三五人约好结伴同行，又都是老义工，所以不用担心找不到活动地点，一起同行也有了更多的时间聊一聊八卦，谈一谈人生。 由于今年的特殊情况，活动最近才开始，所以义工们很长时间没见面，会有更多的话可以说，还是原来熟悉的面孔，还是往日一样的热情。</p><p>​    好久不带队流程都不熟悉了，去了活动片区只顾着领任务，接着就去干，忘了活动后还要写总结，所以这篇总结一定不会记录细节，确实没有去各小组转一转看一看义工们活动得怎么样，玩得嗨不嗨。从活动后的照片来看小伙伴们都笑脸盈盈，不亦乐乎，想必一定都没玩够。</p><p>   厨房里小鱼儿，杨涵妈和格格在热火朝天地忙着做饭，活动最后部分义工以各种理由进厨房检查了一下菜的质量和口味。</p><p>​    男女洗澡小组一定更忙，做的都是流水线上的活儿，孩子们排着队进来，洗好了一个又来一个，义工们是持续不断地操作，再加上有的小孩儿洗澡比较闹腾，就更够义工们手忙脚乱的了，胖龙鞋和口罩都湿了，想一想就知道这工作量有多大了。</p><p>​    还有些义工在教室里陪孩子们一起看电视，好像看的是《海贼王》，孩子们的童年都是用一部部动画片连起来的，也正是动画片给了孩子们最纯真的欢笑。</p><p>   不知不觉时间就过去了，义工们要集合了，院子里各种孩子们的玩具义工们趁着空隙玩一玩，感受一下童年的美好时代。</p><p>星火相承，义路同行。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你只管善良，美好正在路上</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-9-yue-19-ri-fang-shan/0.jpg</p><p>你只管善良，美好正在路上</p><p>老义工： 丽、金蟾格格、戏浪小生、上校、蛋清、幻龙、小鱼儿、冬雪儿、E3、天堂燕蝶、李畅、弘毅正兴<br>摄影：小鱼儿<br>带队：弘毅正兴</p><p>​    首先这么优雅的标题肯定不是带队写的，也不是摄影写的，那是谁写的呢？还是大家猜一下吧。</p><p>每周的活动内容都差不多，但每周都有不一样的新鲜感，新鲜感或许是来自好久不见得义工，也或许是因为新接触了一个很好玩的小朋友，也可能是到厨房帮厨的时候了解到了一种菜的新做法，还可能是听到了一些义工们的新八卦段子。反正每次都觉得义工活动像是和老朋友见面，既是一份挂念，又是一次畅聊。</p><p>​    义工分了两部分，一部分在楼上陪孩子一起拼积木，另一部分在楼下的厨房里大展厨艺。这次的男义工比较多，和女义工人数相当。男同学扎堆都跑到了厨房里，有些可能是担心陪不了孩子吧。不过活动后出锅的鱼确实做得不错，馋坏了其他的其他的义工们，只恨没能到厨房里品味一下。</p><p>​    陪孩子们的义工这次拼积木不知效果怎么样，孩子们的世界总是会给成人很多启发，各个小孩都有自己的性格，也能让我们想起自己的小时候。陪孩子多一些耐心，试着去体会和了解他们的想法，这样就能更好地与孩子们一起玩，一起成长。</p><p>​    这次的摄影师是小鱼儿，另外还有三姐做幕后指导，两两配合，把这次的照片拍得很美，抓拍到很多美好瞬间。</p><p>​    最后，大家猜到这次的题目出自谁手了吗？可以翻翻当天活动义工的朋友圈。我给大家四个字的提示“温婉恬静”。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>善良遇见善良，是世间最美的邂逅!</title>
      <link href="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/"/>
      <url>/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>善良遇见善良，是世间最美的邂逅！</p><p><img src="/myhexo/2020/12/24/sheng-huo/yi-gong/huo-dong-zong-jie/2020-nian-12-yue-12-ri-fang-shan/1.jpg"></p><p>老义工： 丽、翠小花、蛋清、E3、金蟾格格、川姐姐、冬雪儿、戏浪小生、田喜悦的巧克力、马小靖、杜海、小鱼儿、天堂燕蝶、弘毅正兴<br>摄影：E3<br>带队：弘毅正兴</p><p>​    这次来活动的义工真不少，孩子们都快不够分了，来的是老义工所以很快都进入了活动状态，没有陌生和拘束，有的是笑声和热闹。带队组织活动根本不用担心义工们对孩子照顾不周，和孩子们玩时放不开，毕竟都是从孩子们过来的，孩子们的小心思，孩子们的调皮捣蛋一个眼神一个动作就心领神会。</p><p>​    没有新鲜多样的游戏，还是一如既往地搭积木，实在也是没有更好玩的啦，每次义工和孩子们配合都会搭出不一样的模型，同样的东西玩得方式也各有各的不同，各个阶段完成的结果也不一样，变幻莫测，意想不到，开始是一个一串连起来的小火车，后来就变成了一座围起来的城堡，开始还是一个即将起飞的火箭，后来再一组合就变成一把冲锋枪了。孩子们把长条的积木挑出来当多米诺骨牌来玩也很有意思，每次摆得足够长了的时候总有一个捣蛋的孩子过来看似很不小心地推到第一块，一连串就都倒下了，继续重新摆把。</p><p>​    只要小生参加活动，每次都会在厨房看到他的身影，学校这样的厨房最能体现厨师的水平，同时也更考验厨师的体力。同样每次的摄影除了拍照技术还要考虑到每位义工都能上镜，更要考虑上镜后的高矮胖瘦，不能太写实也不能太抽象。</p><p>​    双十二来参加活动，遇见美好，传递善良。</p>]]></content>
      
      
      <categories>
          
          <category> 义工 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 北京义工联 </tag>
            
            <tag> 活动总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 Git 命令清单</title>
      <link href="/myhexo/2020/10/26/xue-xi/git/chang-yong-git-ming-ling-qing-dan/"/>
      <url>/myhexo/2020/10/26/xue-xi/git/chang-yong-git-ming-ling-qing-dan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-命令清单。几个专用名词的译名如下。"><a href="#Git-命令清单。几个专用名词的译名如下。" class="headerlink" title="Git 命令清单。几个专用名词的译名如下。"></a>Git 命令清单。几个专用名词的译名如下。</h2><ul><li>Workspace：工作区 Index </li><li>Stage：暂存区 </li><li>Repository：仓库区（或本地仓库） </li><li>Remote：远程仓库</li></ul><p><img src="git.png"></p> <a id="more"></a><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 在当前目录新建一个Git代码库$ git init 新建一个目录，将其初始化为Git代码库$ git init [project-name] 下载一个项目和它的整个代码历史$ git clone [url]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><blockquote><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 显示当前的Git配置$ git config --list 编辑Git配置文件$ git config -e [--global] 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 添加指定文件到暂存区$ git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录$ git add [dir] 添加当前目录的所有文件到暂存区$ git add . 添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现分次提交$ git add -p 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ... 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file] 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 提交暂存区到仓库区$ git commit -m [message] 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message] 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a 提交时显示所有diff信息$ git commit -v 使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message] 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 列出所有本地分支$ git branch 列出所有远程分支$ git branch -r 列出所有本地分支和远程分支$ git branch -a 新建一个分支，但依然停留在当前分支$ git branch [branch-name] 新建一个分支，并切换到该分支$ git checkout -b [branch] 新建一个分支，指向指定commit$ git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区$ git checkout [branch-name] 切换到上一个分支$ git checkout - 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支$ git merge [branch] 选择一个commit，合并进当前分支$ git cherry-pick [commit] 删除分支$ git branch -d [branch-name] 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 列出所有tag$ git tag 新建一个tag在当前commit$ git tag [tag] 新建一个tag在指定commit$ git tag [tag] [commit] 删除本地tag$ git tag -d [tag] 删除远程tag$ git push origin :refs/tags/[tagName] 查看tag信息$ git show [tag] 提交指定tag$ git push [remote] [tag] 提交所有tag$ git push [remote] --tags 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 显示有变更的文件$ git status 显示当前分支的版本历史$ git log 显示commit历史，以及每次commit发生变更的文件$ git log --stat 搜索提交历史，根据关键词$ git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file] 显示指定文件相关的每一次diff$ git log -p [file] 显示过去5次提交$ git log -5 --pretty --oneline 显示所有提交过的用户，按提交次数排序$ git shortlog -sn 显示指定文件是什么人在什么时间修改过$ git blame [file] 显示暂存区和工作区的差异$ git diff 显示暂存区和上一个commit的差异$ git diff --cached [file] 显示工作区与当前分支最新commit之间的差异$ git diff HEAD 显示两次提交之间的差异$ git diff [first-branch]...[second-branch] 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}" 显示某次提交的元数据和内容变化$ git show [commit] 显示某次提交发生变化的文件$ git show --name-only [commit] 显示某次提交时，某个文件的内容$ git show [commit]:[filename] 显示当前分支的最近几次提交$ git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 下载远程仓库的所有变动$ git fetch [remote] 显示所有远程仓库$ git remote -v 显示某个远程仓库的信息$ git remote show [remote] 增加一个新的远程仓库，并命名$ git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch] 上传本地指定分支到远程仓库$ git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force 推送所有分支到远程仓库$ git push [remote] --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 恢复暂存区的指定文件到工作区$ git checkout [file] 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file] 恢复暂存区的所有文件到工作区$ git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file] 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit] 新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit] 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> 生成一个可供发布的压缩包$ git archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">来自阮一峰的网络日志，列出了 Git 最常用的命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高效编程技巧</title>
      <link href="/myhexo/2020/10/24/xue-xi/python/python-gao-xiao-bian-cheng-ji-qiao/"/>
      <url>/myhexo/2020/10/24/xue-xi/python/python-gao-xiao-bian-cheng-ji-qiao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myhexo/assets/css/APlayer.min.css"><script src="/myhexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>工作中经常要处理各种各样的数据，遇到项目赶进度的时候自己写函数容易浪费时间。<br>Python 中有很多内置函数帮你提高工作效率！<br>一：在列表，字典中根据条件筛选数据</p><p>1.假设有一个数字列表 data, 过滤列表中的负数<br>列表推导式</p><pre class="line-numbers language-none"><code class="language-none">result = [i for i in data if i &gt;= 0]filterresult = filter(lambda x: x&gt;= 0, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.学生的数学分数以字典形式存储，筛选其中分数大于 80 分的同学</p><pre class="line-numbers language-none"><code class="language-none">d = {x:randint(50, 100) for x in range(1, 21)}{k: v for k, v in d.items() if v &gt; 80}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二：对字典的键值对进行翻转</p><p>使用 zip() 函数</p><pre><code>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; s1 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s1{'b': 1, 'f': 4, 'g': 3, 'r': 1}&gt;&gt;&gt; d = {k:v for k, v in zip(s1.values(), s1.keys())}&gt;&gt;&gt; d{1: 'r', 4: 'f', 3: 'g'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二. 统计序列中元素出现的频度<br>1.某随机序列中，找到出现次数最高的3个元素，它们出现的次数是多少？</p><p>随机序列如下：</p><pre class="line-numbers language-none"><code class="language-none">data = [randint(0,20) for _ in range(20)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法1: 可以使用字典来统计，以列表中的数据为键，以出现的次数为值</p><pre class="line-numbers language-none"><code class="language-none">from random import randintdef demo():    data = [randint(0, 20) for _ in range(30)]    # 列表中出现数字出现的次数    d = dict.fromkeys(data, 0)    for v in li:        d[v] += 1    return d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2：直接使用 collections 模块下面的 Counter 对象</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data = [randint(0, 20) for _ in range(30)]&gt;&gt;&gt; data[7, 8, 5, 16, 10, 16, 8, 17, 11, 18, 11, 17, 15, 7, 2, 19, 5, 16, 17, 17, 12, 19, 9, 10, 0, 20, 11, 2, 11, 10]&gt;&gt;&gt; c2 = Counter(data)&gt;&gt;&gt; c2Counter({17: 4, 11: 4, 16: 3, 10: 3, 7: 2, 8: 2, 5: 2, 2: 2, 19: 2, 18: 1, 15: 1, 12: 1, 9: 1, 0: 1, 20: 1})&gt;&gt;&gt; c2[14]4&gt;&gt;&gt; c2.most_common(3)  # 统计频度出现最高的3个数[(17, 4), (11, 4), (16, 3)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对某英文文章单词进行统计，找到出现次数最高的单词以及出现的次数</li></ol><p>通过上面的练习，我们知道可以用 Counter 来解决</p><pre class="line-numbers language-none"><code class="language-none">import refrom collections import Counter# 统计某个文章中英文单词的词频with open('test.txt', 'r', encoding='utf-8')as f:    d = f.read()total = re.split('\W+', d)  # 所有的单词列表result = Counter(total)print(result.most_common(10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.根据字典中值的大小，对字典中的项进行排序</p><p>比如班级中学生的数学成绩以字典的形式存储：</p><pre class="line-numbers language-none"><code class="language-none">{"Lnad": 88, "Jim", 71...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请按数学成绩从高到底进行排序！</p><p>方法1: 利用 zip 将字典转化为元祖，再用 sorted 进行排序</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data = {x: randint(60, 100) for x in "xyzfafs"}&gt;&gt;&gt; data{'x': 73, 'y': 69, 'z': 76, 'f': 61, 'a': 64, 's': 100}&gt;&gt;&gt; sorted(data)['a', 'f', 's', 'x', 'y', 'z']&gt;&gt;&gt; data = sorted(zip(data.values(), data.keys()))&gt;&gt;&gt; data[(61, 'f'), (64, 'a'), (69, 'y'), (73, 'x'), (76, 'z'), (100, 's')]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2: 利用 sorted 函数的 key 参数</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data.items()&gt;&gt;&gt; dict_items([('x', 64), ('y', 74), ('z', 66), ('f', 62), ('a', 80), ('s', 72)])&gt;&gt;&gt; sorted(data.items(), key=lambda x: x[1])[('f', 62), ('x', 64), ('z', 66), ('s', 72), ('y', 74), ('a', 80)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>四. 在多个字典中找到公共键</p><p>实际场景：在足球联赛中，统计每轮比赛都有进球的球员</p><pre><code>第一轮： {"C罗": 1, "苏亚雷斯":2, "托雷斯": 1..}第二轮： {"内马尔": 1, "梅西":2, "姆巴佩": 3..}第三轮： {"姆巴佩": 2, "C罗":2, "内马尔": 1..}</code></pre><p>模拟随机的进球球员和进球数</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; s1 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s1{'d': 3, 'g': 2}&gt;&gt;&gt; s2 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s2{'b': 4, 'g': 1, 'f': 1, 'r': 4, 'd': 3}&gt;&gt;&gt; s3 = {x: randint(1, 4) for x in sample('abfcdrg', randint(1,5))}&gt;&gt;&gt; s3{'b': 4, 'r': 4, 'a': 2, 'g': 3, 'c': 4}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取字典的 keys，然后取每轮比赛 key 的交集<br>由于比赛轮次数是不定的，所以使用 map 来批量操作</p><pre class="line-numbers language-none"><code class="language-none">map(dict.keys, [s1, s2, s3])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一直累积取其交集， 使用 reduce 函数</p><pre class="line-numbers language-none"><code class="language-none">reduce(lambda x,y: x &amp; y, map(dict.keys, [s1, s2, s3]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一行代码搞定！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
